<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Gregory Szorc's Digital Home</title>
    <link>http://gregoryszorc.com/blog</link>
    <description>Rambling on</description>
    <pubDate>Wed, 07 Apr 2021 16:13:59 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Announcing the 0.9 Release of PyOxidizer</title>
      <link>http://gregoryszorc.com/blog/2020/10/18/announcing-the-0.9-release-of-pyoxidizer</link>
      <pubDate>Sun, 18 Oct 2020 22:00:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2020/10/18/announcing-the-0.9-release-of-pyoxidizer</guid>
      <description>Announcing the 0.9 Release of PyOxidizer</description>
      <content:encoded><![CDATA[<p>I have decided to make up for the 6 month lull between PyOxidizer's
0.7 and 0.8 releases by releasing
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/">PyOxidizer</a> 0.9 just 1 week
after 0.8!</p>
<p>The full 0.9 changelog is found
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/history.html#version-0-9-0">in the docs</a>.
First time user? See the
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/getting_started.html">Getting Started</a>
documentation.</p>
<p>While the 0.9 release is far smaller in terms of features compared to 0.8,
it is an important release because of progress closing compatibility gaps.</p>
<h2>Build a <code>python</code> Executable</h2>
<p>PyOxidizer 0.8 quietly shipped the ability to build executables that
behave like <code>python</code> executables via enhancements to the configurability of
embedded Python interpreters.</p>
<p>PyOxidizer 0.9 made some minor changes to make this scenario work better
and there is even
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/packaging_python_executable.html">official documentation</a>
on how to achieve this. So now you can emit a <code>python</code> executable next to your
application's executable. Or you could use PyOxidizer to build a highly portable,
self-contained <code>python</code> executable and ship your Python scripts next to it,
using PyOxidizer's <code>python</code> in your <code>#!</code>.</p>
<h2>Support Packaging Files as Files for Maximum Compatibility</h2>
<p>There is a long-tail of Python packages that don't <em>just work</em> with
PyOxidizer. A subset of these packages don't work because of bugs with how
PyOxidizer attempts to classify files as specific types of Python resources.</p>
<p>The way that normal Python works is you materialize a bunch of files on
the filesystem and at run-time the filesystem-based importer <code>stat()</code>s a
bunch of paths until it finds a candidate file satisfying the <code>import</code>
request. This works of course. But it is inefficient. Since PyOxidizer has
awareness of every resource being packaged at build time, it attempts to
index all known resources and serialize them to an efficient data structure
so finding and loading a resource can be extremely quick (effectively just a
hashmap lookup in Rust code to resolve the memory address of data).</p>
<p>PyOxidizer's approach does work in the majority of cases. But there are
edge cases. For example, NumPy's binary wheels have installed file paths
like <code>numpy.libs/libopenblasp-r0-ae94cfde.3.9.dev.so</code>. The <code>numpy.libs</code>
directory is not a valid Python package directory since it has a <code>.</code> and
since it doesn't have an <code>__init__.py[c]</code> file. This is a case where
PyOxidizer's code for turning files into <em>resources</em> is currently confused.</p>
<p>It is tempting to argue that file layouts like NumPy's are <em>wrong</em>. But
there doesn't seem to be any formal specification preventing the use of
such layouts. The arbiter of truth here is what Python packaging tools
accept and the current code for installing <em>wheels</em> gladly accepts file
layouts like these. So I've accepted that PyOxidizer is just going to have
to support edge cases like this. (I've captured more details about this
particular issue
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/technotes.html#ambiguous-file-classification">in the docs</a>).</p>
<p>Anyway, PyOxidizer 0.9 ships a new, simpler mode for handling files:
<em>files mode</em>. In <a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/packaging_resources.html#classified-resources-versus-files">files mode</a>,
PyOxidizer disables its code for <em>classifying</em> files as typed Python
resources (like module sources and extension modules) and instead treats
a file as... a file.</p>
<p>When in files mode, actions that invoke Python packaging tools return
files objects instead of classified resources. If you then add these files
for packaging, those files are materialized on the filesystem next to your
built executable. You can then use Python's standard filesystem importer
to load these files at run-time.</p>
<p>This allows you to use PyOxidizer with packages like NumPy that were
previously incompatible due to bugs with file/resource classification.
In fact, getting NumPy working with PyOxidizer is
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/packaging_additional_files.html#installing-unclassified-files-on-the-filesystem">now in the official documentation</a>!</p>
<p><em>Files mode</em> is still in its infancy. There exists code for embedding
files data in the produced executable. I plan to eventually teach PyOxidizer's
run-time code to extract these embedded files to a temporary directory,
SquashFS FUSE filesystem, etc. This is the approach that other Python
packaging tools like PyInstaller and XAR use. While it is less efficient, this
approach is highly compatible with Python code in the wild since you sidestep
issues with <code>__file__</code> and other assumptions about installed file layouts. So
it makes sense for PyOxidizer to provide support for this so you can still
achieve the friendliness of a self-contained executable without worrying
about compatibility. Look for improvements to <em>files mode</em> in future releases.</p>
<p>And to help debug issues with PyOxidizer's file handling and resource
classification, the new
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/managing_projects.html#debugging-resource-scanning-and-identification-with-find-resources">pyoxidizer find-resources</a>
command can be used to invoke PyOxidizer's code for scanning and classifying
files. Hopefully this makes it easier to diagnose bugs in this critical
component of PyOxidizer!</p>
<h2>Some Important Bug Fixes</h2>
<p>PyOxidizer 0.8 shipped with some pretty annoying bugs and behavior quirks.</p>
<p>The ability to set custom <code>sys.path</code> values via Starlark was broken. How I
managed to ship that, I'm not sure. But it is fixed in 0.9.</p>
<p>Another bug I can't believe I shipped was
the <code>PythonExecutable.read_virtualenv()</code> Starlark method being broken due to
a typo. You can read from virtualenvs again in PyOxidizer 0.9.</p>
<p>Another important improvement is in the default Python interpreter
configuration. We now automatically initialize Python's locales configuration
by default. Without this, the encoding of filesystem paths and <code>sys.argv</code> may
not have been correct. If someone passed a non-ASCII argument, the Python <code>str</code>
value was likely mangled. PyOxidizer built binaries should behave reasonably
by default now. The <a href="https://github.com/indygreg/PyOxidizer/issues/294">issue</a>
is a good read if the subtle behaviors of how encodings work in Python and on
different operating systems is interesting to you.</p>
<h2>Better Binary Portability Documentation</h2>
<p>The documentation on
<a href="https://pyoxidizer.readthedocs.io/en/v0.9.0/packaging_binary_compatibility.html">binary portability</a>
has been overhauled. Hopefully it is much more clear about the capabilities
of PyOxidizer to produce a binary that <em>just works</em> on other machines.</p>
<p>I eventually want to get PyOxidizer to a point where users don't have to
think about binary portability. But until PyOxidizer starts generating
installers and providing the ability to run builds in deterministic and
reproducible environments, it is sadly a problem that is being externalized
to end users.</p>
<h2>In Conclusion</h2>
<p>PyOxidizer 0.9 is a small release representing just 1 week of work. But
it contains some notable features that I wanted to get out the door.</p>
<p>As always, please report any issues or feedback in the
<a href="https://github.com/indygreg/PyOxidizer/issues/new">GitHub issue tracker</a>
or the <a href="https://groups.google.com/forum/#!forum/pyoxidizer-users">users mailing list</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Announcing the 0.8 Release of PyOxidizer</title>
      <link>http://gregoryszorc.com/blog/2020/10/12/announcing-the-0.8-release-of-pyoxidizer</link>
      <pubDate>Mon, 12 Oct 2020 00:45:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2020/10/12/announcing-the-0.8-release-of-pyoxidizer</guid>
      <description>Announcing the 0.8 Release of PyOxidizer</description>
      <content:encoded><![CDATA[<p>I am very excited to announce the 0.8 release of
<a href="https://pyoxidizer.readthedocs.io/en/stable/">PyOxidizer</a>, a modern
Python application packaging tool. You can find the full changelog
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/history.html">in the docs</a>.
First time user? See the
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/getting_started.html">Getting Started</a>
documentation.</p>
<p>Foremost, I apologize that this release took so long to publish (0.7 was
released on 2020-04-09). I fervently believe that frequent releases are
a healthy software development practice. And 6 months between PyOxidizer
releases was way too long. Part of the delay was due to world events
(it has proven difficult to focus on... anything given a global pandemic,
social unrest, and wildfires further undermining any resemblance of
lifestyle normalcy in California). Another contributing factor was I was
waiting on a few 3rd party Rust crates to have new versions published to
crates.io (you can't release a crate to crates.io unless all your
dependencies are also published there).</p>
<p>Release delay and general life hardships aside, the 0.8 release is here
and it is full of notable improvements!</p>
<h2>Python 3.8 and 3.9 Support</h2>
<p><strong>PyOxidizer 0.8 now targets Python 3.8 by default and support for Python
3.9 is available</strong> by tweaking configuration files. Previously, we only
supported Python 3.7 and this release drops support for Python 3.7. I feel
a bit bad for dropping compatibility. But Python 3.8 introduced a
<a href="https://docs.python.org/3/c-api/init_config.html">new C API</a> for initializing
Python interpreters (thank you Victor Stinner!) and this makes PyOxidizer's
run-time code for interfacing with Python interpreters vastly simpler.
I decided that given the beta nature of PyOxidizer, it wasn't worth
maintaining complexity to continue to support Python 3.7. I'm optimistic
that I'll be able to support Python 3.8 as a baseline for a while.</p>
<h1>Better Default Packaging Settings</h1>
<p>PyOxidizer started as a science experiment of sorts to see if I could
achieve the elusive goal of producing a single file executable providing
a Python application. I was successful in proving this hypothesis. But the
cost to achieving this outcome was rather high in terms of end-user
experience: in order to produce single file executables, you had to break
a lot of assumptions about how Python typically works and this in turn broke
a lot of Python code and packages in the wild.</p>
<p>In other words, <strong>PyOxidizer's opinionated defaults of producing a single file
executable were externalizing hardship on end-users and preventing them from
using PyOxidizer.</strong></p>
<p>PyOxidizer 0.8 contains a handful of changes to defaults that should hopefully
lessen the friction.</p>
<p>On Windows, the default Python distribution now has a more traditional
build configuration (using <code>.pyd</code> extension modules and a <code>pythonXY.dll</code>
file). <strong>This means that PyOxidizer can consume pre-built extension modules
without having to recompile them from source.</strong> If you publish a Windows
binary wheel on PyPI, in many cases it will <em>just work</em> with PyOxidizer
0.8! (There are some notable exceptions to this, such as <em>numpy</em>, which is
doing wonky things with the location of shared libraries in wheels - but
I aim to fix this soon.)</p>
<p>Also on Windows, we no longer attempt to embed Python extension modules
(<code>.pyd</code> files) and their shared library dependencies in the produced
binary and load them from memory by default. This is because PyOxidizer's
from-memory library loader didn't work in all cases. For example, some
OpenSSL functionality used by the <code>_ssl</code> module in the standard library
didn't work, preventing Python from establishing TLS connections. The old
mode enabling you to produce a single file executable on Windows is still
available. But you have to opt in to it (at the likely cost of more
packaging and compatibility pain).</p>
<h2>Starlark Configuration Overhaul</h2>
<p>PyOxidizer 0.8 contains a <strong>ton</strong> of changes to its Starlark configuration
files. There are so many changes that you may find it easier to port to
PyOxidizer 0.8 by creating a new configuration file rather than attempting
to port an existing one.</p>
<p>I apologize for this churn and recognize it will be disruptive. However,
this churn needed to happen for various reasons.</p>
<p>Much of the old Starlark configuration semantics was rooted in the days
when configuration files were static TOML files. Now that configuration
files provide the power of a (Python-inspired) programming language, we
are free to expose much more flexibility. But that flexibility requires
refactoring things so the experience feels more <em>native</em>.</p>
<p>Many changes to Starlark were rooted in necessity. For example,
the methods for invoking <code>setup.py</code> or <code>pip install</code> used to live on a
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config_type_python_distribution.html">Python distribution type</a>
and have been moved to a
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config_type_python_executable.html">type representing executables</a>.
This is because the binary we are targeting influences how
packaging actions behave. For example, if the binary only supports
loading resources from memory (as opposed to standalone files), we need
to know that when invoking the packaging tool so we can produce files
(notably Python extension modules) compatible with the destination.</p>
<p>A major change to Starlark in 0.8 is around resource location handling.
Before, you could define a static string denoting the <em>resources policy</em>
for where things should be placed. And there were 10+ methods for
adding different resource types (source, bytecode, extensions, package
data) to different load locations (memory, filesystem). This mechanism
is vastly simplified and more powerful in PyOxidizer 0.8!</p>
<p>In PyOxidizer 0.8, there is a single
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config_type_python_executable.html#pythonexecutable-add-python-resource">add_python_resource()</a>
method for adding a resource to a binary and the Starlark objects you add
can denote where they should be added by
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config_resource_add_attributes.html">defining attributes on those objects</a>.</p>
<p>Furthermore, you can
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/packaging_resources.html#using-callbacks-to-influence-resource-attributes">define a Starlark function</a>
that is called when resource objects are created to apply custom packaging
<em>rules</em> using custom Starlark code defined in your PyOxidizer config file.
So rather than having everyone try to abide by a few pre-canned <em>policies</em> for
packaging resources, you can define a proper function in your config file
that can be as complex as you want/need it to be! I feel this is vastly simpler
and more powerful than implementing a custom DSL in static configuration files
(like TOML, JSON, YAML, etc).</p>
<p>While the ability to implement your own arbitrarily complex packaging
policies is useful, there is a new
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config_type_python_packaging_policy.html">PythonPackagingPolicy</a>
Starlark type with enough flexibility to suit most needs.</p>
<h2>Shipping <code>oxidized_importer</code></h2>
<p>During the development of PyOxidizer 0.8, I broke out the custom
Rust-based Python <em>meta-path importer</em> used by PyOxidizer's run-time code
into a standalone Python package. This sub-project is called
<code>oxidized_importer</code> and I previously
<a href="/blog/2020/05/10/using-rust-to-power-python-importing-with-oxidized_importer/">blogged about it</a>.</p>
<p>PyOxidizer 0.8 ships <code>oxidized_importer</code> and all of its useful APIs
available to Python. Read more in the
<a href="https://pyoxidizer.readthedocs.io/v0.8.0/latest/oxidized_importer.html">official docs</a>.
The new Python APIs should make debugging issues with PyOxidizer-packaged
applications vastly simpler: I found them invaluable when tracking down
user-reported bugs!</p>
<h2>Tons of New Tests and Refactored Code</h2>
<p>PyOxidizer was my first non-toy Rust project. And the quality of the Rust
code I produced in early versions of PyOxidizer clearly showed it. And when I
was in the rapid-prototyping phase of PyOxidizer, I eschewed writing tests
in favor of short-term progress.</p>
<p>PyOxidizer 0.8 pays down a ton of technical debt in the code base. Lots of
Rust code has been refactored and is using somewhat reasonable practices.
I'm not yet a Rust guru. But I'm at the point where I cringe when I look at
some of the early code I wrote, which is a good sign. I do have to say that
Rust has been a dream to work with during this transition. Despite being a
low-level language, my early <em>misuse</em> of Rust did not result in crashes like
you would see in languages like C/C++. And Rust's seemingly omniscient compiler
and IDE tools facilitating refactoring have ensured that code changes aren't
accompanied by subtle random bugs that would occur in dynamic programming
languages. I really need to write a dedicated post espousing the virtues of
Rust...</p>
<p>There are a <strong>ton</strong> of new tests in PyOxidizer 0.8 and I now feel somewhat
confident that the <code>main</code> branch of PyOxidizer should be considered
<em>production-ready</em> at any time assuming the tests pass. This will hopefully
lead to more rapid releases in the future.</p>
<p>There are now tests for the <code>pyembed</code> Rust crate, which provides the
run-time code for PyOxidizer-built binaries. We even have
<a href="https://github.com/indygreg/PyOxidizer/tree/main/pyembed/src/test">Python-based unit tests</a>
for validating the Python-exposed APIs behave as expected. These tests have
been invaluable for ensuring that the run-time code works as expected. So now
when someone files a bug I can easily write a test to capture it and keep
the code working as intended through various refactors.</p>
<p>The packaging-time Rust code has also gained its fair share of tests.
We now have fairly comprehensive test coverage around how resources
are added/packaged. Python extension modules have proved to be highly
nuanced in how they are handled. Tremendously helping testing of extension
modules is that we're able to run tests for platform non-native extensions!
While not yet exposed/supported by Starlark configuration files, <strong>I've taught
PyOxidizer's core Rust code to be cross-compiling aware</strong> so that we can
e.g. test Windows or macOS behavior from Linux. Before, I'd have to test
Windows wheel handling on Windows. But after writing a wheel parser in Rust
and teaching PyOxidizer to use a different Python distribution for the
host architecture from the target architecture, I'm now able to write
tests for platform-specific functionality that run on any platform that
PyOxidizer can run on. This <em>may</em> eventually lead to proper cross-compiling
support (at least in some configuration). Time will tell. But the foundation
is definitely there!</p>
<h2>New Rust Crates</h2>
<p>As part of the aforementioned refactoring of PyOxidizer's Rust code, I've
been extracting some useful/generic functionality built as part of
developing PyOxidizer to their own Rust crates.</p>
<p>As part of this release, I'm publishing the initial 0.1 release of the
<a href="https://crates.io/crates/python-packaging">python-packaging</a> crate
(<a href="https://docs.rs/python-packaging/0.1.0/python_packaging/">docs</a>). This crate
provides pure Rust code for various Python <em>packaging</em> related functionality.
This includes:</p>
<ul>
<li>Rust types representing Python resource types (source modules, bytecode
  modules, extension modules, package resources, etc).</li>
<li>Scanning the filesystem for Python resource files .</li>
<li>Configuring an embedded Python interpreter.</li>
<li>Parsing <code>PKG-INFO</code> and related files.</li>
<li>Parsing wheel files.</li>
<li>Collecting Python resources and serializing them to a data structure.</li>
</ul>
<p>The crate is somewhat PyOxidizer centric. But if others are interested
in improving its utility, I'll happily accept pull requests!</p>
<p>PyOxidizer's crates footprint now includes:</p>
<ul>
<li><a href="https://crates.io/crates/python-packed-resources">python-packed-resources</a></li>
<li><a href="https://crates.io/crates/python-packaging">python-packaging</a></li>
<li><a href="https://crates.io/crates/pyembed">pyembed</a></li>
<li><a href="https://crates.io/crates/pyoxidizer">pyoxidizer</a></li>
</ul>
<h2>Major Documentation Updates</h2>
<p>I strongly believe that software should be documented thoroughly and I strive
for PyOxidizer's documentation to be useful and comprehensive.</p>
<p>There have been a lot of changes to PyOxidizer's documentation since the
0.7 release.</p>
<p>All <a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/config.html">configuration file documentation</a>
has been consolidated.</p>
<p>Likewise, I've attempted to consolidate a lot of the <em>paved road</em> documentation
for how to use PyOxidizer in the
<a href="https://pyoxidizer.readthedocs.io/en/v0.8.0/packaging.html">Packaging User Guide</a>
section of the docs.</p>
<p>I'll be honest, since I have so much of PyOxidizer's workings internalized,
it can be difficult for me to empathize with PyOxidizer's users. So if you
have difficult with the <em>readability</em> of the documentation, please
<a href="https://github.com/indygreg/PyOxidizer/issues/new">file an issue</a> and report
what is confusing so the documentation can be improved!</p>
<h2>Mercurial Shipping With PyOxidizer 0.8</h2>
<p>PyOxidizer is arguably an epic yak shave of mine to help the
<a href="https://www.mercurial-scm.org/">Mercurial version control tool</a> transition
to Python 3 and Rust.</p>
<p>I'm pleased to report that Mercurial is
<a href="https://www.mercurial-scm.org/pipermail/mercurial/2020-October/052395.html">now shipping</a>
PyOxidizer-built distributions on Windows as of the 5.2.2 release a few days
ago! If a complex Python application like Mercurial can be
<a href="https://www.mercurial-scm.org/repo/hg/file/0627cd03b1e9/rust/hgcli/pyoxidizer.bzl">configured</a>
to work with PyOxidizer, chances are your Python application will work as
well.</p>
<h2>Whats Next</h2>
<p>I view PyOxidizer 0.8 as a pivotal release where PyOxidizer is turning the
corner from a prototyping science experiment to something more generally
usable. The investments in test coverage and refactoring of the Rust
internals are paving the way towards future features and bug fixes.</p>
<p>In upcoming releases, I'd like to close remaining known compatibility
gaps with popular Python packages (such as <em>numpy</em> and other packages in
the <em>scientific/data</em> space). I have a general idea of what work needs to
be done and I've been laying the ground work via various refactorings to
execute here.</p>
<p><strong>I want a general theme of future releases to be eliminating reasons why
people can't use PyOxidizer.</strong> PyOxidizer's historical origin was as a
science experiment to see if single file Python applications were possible.
It is clear that achieving this is fundamentally incompatible with
compatibility with tons of Python packages in the wild. I'd like to find a
way where PyOxidizer can achieve 99% package compatibility by default
so new users don't get discouraged when using PyOxidizer. And for the
subset of users who want single file executables, they can spend the
magnitude of additional effort to achieve that.</p>
<p>At some point, I also want to make a pivot towards focusing on producing
distributable artifacts (Debian/RPM packages, MSI installers, macOS DMG
files, etc). I'm slightly bummed that I haven't made much progress here.
But I have a vision in my mind of where I want to go (I'll be making
a standalone Rust crate + Starlark dialect to facilitate producing
distributable artifacts for <em>any</em> application) and I'm anticipating
starting this work in the next few months. In the mean time, PyOxidizer
0.8 should be able to give people a directory tree that they can coerce
into distributable artifacts using existing packaging tooling. That's not as
turnkey as I would like it to be. But the technical problems around
building a distributable Python application binary still needs some work
and I view that as the most pressing need for the Python ecosystem. So
I'll continue to focus there so there is a solid foundation to build upon.</p>
<p>In conclusion, I hope you enjoy the new release! Please report any issues
or feedback in the
<a href="https://github.com/indygreg/PyOxidizer/issues/new">GitHub issue tracker</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Rust to Power Python Importing With oxidized_importer</title>
      <link>http://gregoryszorc.com/blog/2020/05/10/using-rust-to-power-python-importing-with-oxidized_importer</link>
      <pubDate>Sun, 10 May 2020 13:15:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2020/05/10/using-rust-to-power-python-importing-with-oxidized_importer</guid>
      <description>Using Rust to Power Python Importing With oxidized_importer</description>
      <content:encoded><![CDATA[<p>I'm pleased to announce the availability of the <code>oxidized_importer</code>
Python package, a standalone version of the custom Python module importer
used by <a href="https://github.com/indygreg/PyOxidizer">PyOxidizer</a>.
<code>oxidized_importer</code> - a Python extension module implemented in Rust - enables
Python applications to start and run quicker by providing an alternate,
more efficient mechanism for loading Python resources (such as source
and bytecode modules).</p>
<p>Installation instructions and detailed usage information are available
<a href="https://pyoxidizer.readthedocs.io/en/oxidized_importer-0.1/oxidized_importer.html">in the official documentation</a>.
The rest of this post hopefully answers the questions of <em>why are you doing
this</em> and <em>why should I care</em>.</p>
<p>In a traditional Python process, Python's module importer inspects the
filesystem at run-time to find and load resources like Python source and
bytecode modules. It is highly dynamic in nature and relies on the filesystem
as a point-in-time source of truth for resource availability.</p>
<p><code>oxidized_importer</code> takes a different approach to resource loading that is
more static in nature and more suitable to application environments (where
Python resources aren't changing). Instead of dynamically probing the
filesystem for available resources, resources are instead <em>indexed</em> ahead
of time. When Python goes to resolve a resource (say it is looking to
<code>import</code> a module), <code>oxidized_importer</code> simply needs to perform a lookup
in an in-memory data structure to locate said resource. This means
<code>oxidized_importer</code> only has marginal reliance on the filesystem, <strong>which
can make it much faster than Python's traditional importer</strong>. (Performance
benefits of binaries built with PyOxidizer have already been
<a href="https://pyoxidizer.readthedocs.io/en/oxidized_importer-0.1/packaging_performance.html">clearly demonstrated</a>.)</p>
<p>The <code>oxidized_importer</code> Python extension module exposes parts of
PyOxidizer's packaging and run-time functionality to Python code, <strong>without
requiring the full use of PyOxidizer for application packaging</strong>.
Specifically, <code>oxidized_importer</code> allows you to:</p>
<ul>
<li>Install a custom, high-performance module importer
  (<a href="https://pyoxidizer.readthedocs.io/en/oxidized_importer-0.1/oxidized_importer_oxidized_finder.html">OxidizedFinder</a>)
  to service Python <code>import</code> statements and resource loading (potentially
  from memory, using zero-copy).</li>
<li><a href="https://pyoxidizer.readthedocs.io/en/oxidized_importer-0.1/oxidized_importer_resource_scanning.html">Scan the filesystem for Python resources</a>
  (source modules, bytecode files, package resources, distribution metadata,
  etc) and turn them into Python objects, which can be loaded into
  <code>OxidizedFinder</code> instances.</li>
<li>Serialize Python resource data into an efficient binary data structure
  for loading into an <code>OxidizedFinder</code> instance. This facilitates
  producing a standalone <em>resources blob</em> that can be distributed with
  a Python application which contains all the Python modules, bytecode,
  etc required to power that application. See the docs on
  <a href="https://pyoxidizer.readthedocs.io/en/oxidized_importer-0.1/oxidized_importer_freezing_applications.html">freezing an application with oxidized_importer</a>.</li>
</ul>
<p><code>oxidized_importer</code> can be thought of as PyOxidizer-lite: it provides just
enough functionality to allow Python application maintainers to leverage some
of the technical advancements of PyOxidizer (such as in-memory module imports)
without using PyOxidizer for application packaging. <strong><code>oxidized_importer</code> can
work with the Python distribution already installed on your system. You just
<code>pip install</code> it like any other Python package.</strong></p>
<p>By releasing <code>oxidized_importer</code> as a standalone Python package, my hope is
to allow more people to leverage some of the technical achievements and
performance benefits coming out of PyOxidizer. I also hope that having more
users of PyOxidizer's underlying code will help uncover bugs and conformance
issues, raising the quality and viability of the projects.</p>
<p>I would also like to use <code>oxidized_importer</code> as an opportunity to advance the
discourse around Python's resource loading mechanism. Filesystem I/O can be
extremely slow, especially in mobile and embedded environments. Dynamically
probing the filesystem to service module imports can therefore be slow. (The
Python standard library has the <code>zipimport</code> module for importing Python resources
from a zip file. But in my opinion, we can do much better.) <strong>I would like to
see Python move towards leveraging immutable, serialized data structures for
loading resources as efficiently as possible.</strong> After all, Python resources
like the Python standard library are likely not changing between Python process
invocations. The performance zealot in me cringes thinking of all the overhead
that Python's filesystem probing approach incurs - all of the excessive <code>stat()</code>
and other filesystem I/O calls that must be performed to answer questions about
state that is easily indexed and often doesn't change. <code>oxidized_importer</code>
represents my vision for what a high-performance Python resource loader should
look like. I hope it can be successful in steering Python towards a better
approach for resource loading.</p>
<p>I plan to release <code>oxidized_importer</code> independently from <code>PyOxidizer</code>. While
the projects will continue to be developed in the same
<a href="https://github.com/indygreg/PyOxidizer">repository</a> and will leverage the
same underlying Rust code, I view them as somewhat independent and serving
different audiences.</p>
<p>While <code>oxidized_importer</code> evolved from facilitating PyOxidizer's run-time use
cases, I'm not opposed to taking it in new directions. For example, I would
entertain implementing Python's dynamic filesystem probing logic in
<code>oxidized_importer</code>, allowing it to serve as a functional stand-in for the
official importer shipped with the Python standard library. I have little
doubt an importer implemented in 100% Rust would outperform the official
importer, which is implemented in Python. There's all kinds of possibilities
here, such as using a background thread to index <code>sys.path</code> outside the
constraints of the GIL. But I don't want to get ahead of myself...</p>
<p>If you are a Python application maintainer and want to make your Python
processes execute a bit faster by leveraging a pre-built index of available
Python resources and/or taking advantage of in-memory module importing,
I highly encourage you to take a look at <code>oxidized_importer</code>!</p>]]></content:encoded>
    </item>
    <item>
      <title>PyOxidizer 0.7</title>
      <link>http://gregoryszorc.com/blog/2020/04/09/pyoxidizer-0.7</link>
      <pubDate>Thu, 09 Apr 2020 21:00:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2020/04/09/pyoxidizer-0.7</guid>
      <description>PyOxidizer 0.7</description>
      <content:encoded><![CDATA[<p>I am very pleased to announce the 0.7 release of
<a href="https://pyoxidizer.readthedocs.io/en/stable/">PyOxidizer</a>, a modern
Python application packaging tool.</p>
<p>There are a host of notable new features in this release. You can
read all about them in the project
<a href="https://pyoxidizer.readthedocs.io/en/stable/history.html">history</a>.</p>
<p>I want to use this blog post to call out the more meaningful ones.</p>
<p>I started PyOxidizer as a science experiment of sorts: I sat out to
prove the hypothesis that it was possible to produce high performance
single file executables embedding Python and all of its resources
(Python modules, non-module resource files, compiled extensions, etc).
PyOxidizer has achieved this on Windows, Linux, and macOS since its
very earliest releases. Hypothesis confirmed!</p>
<p>In order to actually achieve single file executables, you have to
fundamentally change aspects of Python's behavior. Some of these
changes invalidate deeply rooted assumptions about how Python works,
such as the existence of <code>__file__</code> in modules. As you can imagine,
these broken assumptions translated to numerous compatibility issues
and PyOxidizer didn't work with many popular Python packages.</p>
<p>With the science experiment phase of PyOxidizer out of the way, I
have been making a concerted effort to broaden the user base of
PyOxidizer. While single file executables can be an amazing property,
it isn't critical for many use cases and the issues it was causing
were preventing people from exploring PyOxidizer.</p>
<p>This brings us to what I think are the major new features in
PyOxidizer 0.7.</p>
<h2>Better Support for Loading Extension Modules</h2>
<p>Earlier versions of PyOxidizer insisted that you compile Python
(C) extension modules from source and statically link them into
a produced binary. This requirement prevented the use of pre-built
extension modules (commonly found in Python binary wheels available
on PyPI) with PyOxidizer, forcing people to compile them locally.
While this often <em>just worked</em> for many extension modules, it
frequently failed on complex extension modules and it frequently
failed on Windows.</p>
<p>PyOxidizer now supports loading compiled extension modules from
standalone files (typically <code>.so</code> or <code>.pyd</code> files, which are actually
shared libraries). There are still some sharp edges and known
deficiencies. But in many cases, if you tell PyOxidizer to run
<code>pip install</code> and package the result, pre-built wheels can be
installed and PyOxidizer will pick up the standalone files.</p>
<p>On Windows, PyOxidizer even supports embedding the shared library
data into the produced <code>.exe</code> and loading the <code>.pyd</code>/DLL directly
from memory.</p>
<h2>Loading Resources from the Filesystem</h2>
<p>Binaries built with PyOxidizer contain a blob holding an index
of available Python resources along with their data.</p>
<p>Earlier versions of PyOxidizer only allowed you to define resources
as <em>in-memory</em>. If the resource was defined in this blob, it was
imported from memory. Otherwise it wasn't known to PyOxidizer.
You could still install files next to the produced binary and
tell PyOxidizer to enable Python's default filesystem-based
importer. But PyOxidizer didn't explicitly know about these
files on the filesystem.</p>
<p>In PyOxidizer 0.7, the blob index of Python resources is able to
express different <em>locations</em> for that resource. Currently, a
resource can have its data made available <em>in-memory</em> or
<em>filesystem-relative</em>. <em>in-memory</em> works as before: the raw
data is embedded next to the next in memory and loaded from
there (using 0-copy). <em>filesystem-relative</em> encodes a filesystem
path to the resource. During packaging, PyOxidizer will place
the resource next to the executable (using a typical Python
file layout scheme) and store the relative path to that resource
in the resources index.</p>
<p>The <em>filesystem-relative</em> resource indexing feature has a few
implications for PyOxidizer.</p>
<p>First, it is more standard. When PyOxidizer loads a Python
module from the filesystem, it sets <code>__file__</code>, <code>__path__</code>,
etc and the module semantics should behave as if the file
were imported by Python's standard importer. This means that
if a package is having issues with <em>in-memory</em> importing, you
can simply fall back to <em>filesystem-relative</em> to get standard
Python behavior and everything should <em>just work</em>.</p>
<p>Second, PyOxidizer's filesystem resource loading is faster
than Python's! When Python's standard importer goes to
<code>import</code> a module, it needs to <code>stat()</code> various paths to
first locate the file. It then performs some sanity checking
and other minor actions before actually importing the module.
All of this has overhead. Since the goal of PyOxidizer is
to produce standalone applications and applications should
be immutable, PyOxidizer can avoid most of this overhead.
PyOxidizer simply tries to <code>open()</code> and <code>read()</code> the relative
path baked into the resource index at build time. If that
works, the resource is loaded. Else there is a failure.
The code path in PyOxidizer to locate a Python resource
is effectively a lookup in a Rust <code>HashMap&lt;&amp;str, T&gt;</code>.</p>
<p>I thought it would be interesting to isolate the performance
benefits of this new feature. I ran Mercurial's test harness
with different variants of <code>hg</code> on Linux on my Ryzen 3950X.</p>
<ul>
<li><em>traditional</em> - A <code>hg</code> script with a <code>#!/path/to/python3.7</code> shebang.</li>
<li><em>oxidized</em> - A <code>hg</code> executable built with PyOxidizer, without
  PyOxidizer's custom module importer.</li>
<li><em>filesystem</em> - A <code>hg</code> executable built with PyOxidizer using the
  new filesystem-relative resource index.</li>
<li><em>in-memory</em> - A <code>hg</code> executable built with PyOxidizer with all
  resources loaded from memory (how PyOxidizer has traditionally worked).</li>
</ul>
<p>The results are quite clear:</p>
<table border="1">
  <thead>
    <tr>
      <th>Variant</th><th>CPU Time (s)</th><th>Delta (s)</th><th>% Orig</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>traditional</td><td style="text-align: right">11,287</td><td style="text-align: right">-552</td><td style="text-align: right">100</td></tr>
    <tr><td>oxidized</td><td style="text-align: right">10,735</td><td style="text-align: right">-552</td><td style="text-align: right">95.1</td></tr>
    <tr><td>filesystem</td><td style="text-align: right">10,186</td><td style="text-align: right">-1,101</td><td style="text-align: right">90.2</td></tr>
    <tr><td>in-memory</td><td style="text-align: right">9,883</td><td style="text-align: right">-1,404</td><td style="text-align: right">87.6</td></tr>
  </tbody>
</table>

<p>We see a nice win just from using a native executable built
with PyOxidizer (<em>traditional</em> to <em>oxidized</em>).</p>
<p>Then from <em>oxidized</em> to <em>filesystem</em> we see another jump of
~5%. This difference is attributed to using PyOxidizer's
Rust-powered importer with an index of resources available
on the filesystem. In other words, all that work that Python's
standard importer is doing to discover files and then operate
on them is non-trivial!</p>
<p>Finally, the smaller jump from <em>filesystem</em> to <em>in-memory</em>
isolates the benefits of importing resource data from
memory instead of involving filesystem I/O. (Filesystems
are generally slow.) While I haven't measured explicitly,
I hypothesize that macOS and Windows will see a bigger
jump between these two variants, as the filesystem
performance on these platforms generally isn't as good
as it is on Linux.</p>
<h2>PyOxidizer's Future</h2>
<p>With PyOxidizer now supporting a couple of much-needed
features to support a broader set of users, I'm hoping that
future releases of PyOxidizer continue to broaden the utility
of PyOxidizer.</p>
<p>The over-arching goal of PyOxidizer is to solve large aspects
of the Python application packaging and distribution problem.
So far a lot of focus has been spent on the former. PyOxidizer
in its current form can materialize files on the filesystem
that you can copy or package up manually and distribute. But
I want these processes to be part of PyOxidizer: I want it to
be possible for PyOxidizer to emit a Windows MSI installer, a
macOS dmg, a Debian package, etc for a Python application.</p>
<p>In order to support the aforementioned marquee features
of this PyOxidizer release, I had to pay down a lot of
technical debt in the code base left over from the science
experiment phase of PyOxidizer's inception.</p>
<p>In the short term, I plan to continue shoring up the code base
and rounding out support for features requested in the
issue tracker on GitHub. The next release of PyOxidizer will
also <a href="https://github.com/indygreg/PyOxidizer/issues/234">likely require</a>
Python 3.8, as this will improve run-time control over the
embedded Python interpreter and enable PyOxidizer to better
support package metadata (<code>importlib.metadata</code>), enabling
support for features like <em>entry points</em>.</p>
<p>I've also been thinking about extracting PyOxidizer's custom
module importer to be usable as a standalone Python extension
module. I think there's some value in publishing a
<code>pyoxidizer_importer</code> package on PyPI that you can easily
add to your installed packages to speed up Python's
standard filesystem importer by a few percent. If nothing else,
this may drum up interest in the larger Python community for
standardizing a format for serializing Python resources in a
single file. Perhaps we can get other Python packaging tools
producing the same
<a href="https://crates.io/crates/python-packed-resources">packed resources data</a>
blob that PyOxidizer uses so we can all standardize on a
more efficient mechanism for loading Python modules. Time
will tell.</p>
<p>Enjoy the new release. File issues at
<a href="https://github.com/indygreg/PyOxidizer">https://github.com/indygreg/PyOxidizer</a>
as you encounter them.</p>]]></content:encoded>
    </item>
    <item>
      <title>C Extension Support in PyOxidizer</title>
      <link>http://gregoryszorc.com/blog/2019/06/30/c-extension-support-in-pyoxidizer</link>
      <pubDate>Sun, 30 Jun 2019 16:40:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2019/06/30/c-extension-support-in-pyoxidizer</guid>
      <description>C Extension Support in PyOxidizer</description>
      <content:encoded><![CDATA[<p>The <a href="/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer/">initial release</a>
of PyOxidizer generated a bit of excitement across the Internet! The post was
commented on heavily in various forums and my phone was constantly buzzing from
all the Twitter activity. There has been a steady stream of
<a href="https://github.com/indygreg/PyOxidizer/issues">GitHub Issues</a> for the project,
which I consider a good sign. So thank you everybody for the support and
encouragement! And especially thank you to everyone who filed an issue or
submitted a pull request!</p>
<p>While I don't usually read the comments, I was looking at various forums
posting about PyOxidizer to see what reactions were like. A common negative
theme was the lack of C extension support in PyOxidizer. People seemed
dismissive of PyOxidizer because it didn't support C extensions. Despite the
documentation stating that the feature was planned and that I had an idea for
how to implement it, people seemed pessimistic. Perhaps I didn't adequately
communicate that making C extensions work is actually a subset of the
already-solved <em>single file executable</em> problem and therefore was already
a <em>solved problem</em> at the technical level (only the integration with the
Python and PyOxidizer <em>build systems</em> was missing). So in my mind C
extension support was only a matter of time and the only open question was
how many hacks would be needed to make it work, not <em>whether</em> it would work.</p>
<p>Well, I'm pleased to report that <strong>the just-released version 0.2 of PyOxidizer
supports C extensions on Windows, macOS, and Linux</strong>. If you install a Python
package through a <code>pip-install-simple</code>, <code>pip-requirements-file</code>, or
<code>setup-py-install</code> packaging rule, C extensions will be compiled in a special
way that enables them to be embedded in the same binary containing Python
itself. I've tested it with the <code>zope.interface</code>, <code>zstandard</code>, and
<code>mercurial</code> packages and it seems to work (although Mercurial has other
issues that prevent it from being packaged as a PyOxidizer application - but
the C extensions do compile).</p>
<p>There are some
<a href="https://pyoxidizer.readthedocs.io/en/latest/status.html#native-extension-modules">limitations</a>
to the support, however. I'm pretty confident the limitations can be eliminated
given enough time. Given how many people were hung up on the lack of C extensions
and were seemingly writing off PyOxidizer thinking it was snake oil or something,
I wanted to deliver basic C extension support to curtail this line of criticism.
Perfect is the enemy of good and hopefully basic C extension support is good
enough to ease concerns about PyOxidizer's viability.</p>
<p>Also in PyOxidizer 0.2 are some minor new features, like the <code>--pip-install</code> and
<code>--python-code</code> flags to <code>pyoxidizer init</code>. These allow you to generate a
<code>pyoxidizer.toml</code> file pre-configured to install some packages from pip and run
custom Python code. So now applications can be created and built with a one-liner
without having to edit a <code>pyoxidizer.toml</code> file!</p>
<p>The full release notes <a href="https://pyoxidizer.readthedocs.io/en/latest/history.html">are available</a>.
As always, please keep
<a href="https://github.com/indygreg/PyOxidizer/issues">filing issues</a>. I'm particularly
interested in hearing about packages whose C extensions don't work properly.</p>]]></content:encoded>
    </item>
    <item>
      <title>Building Standalone Python Applications with PyOxidizer</title>
      <link>http://gregoryszorc.com/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer</link>
      <pubDate>Mon, 24 Jun 2019 09:00:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <category><![CDATA[Rust]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2019/06/24/building-standalone-python-applications-with-pyoxidizer</guid>
      <description>Building Standalone Python Applications with PyOxidizer</description>
      <content:encoded><![CDATA[<p>Python application distribution is generally considered an unsolved
problem. At their PyCon 2019 keynote talk, Russel Keith-Magee
<a href="https://youtu.be/ftP5BQh1-YM?t=2033">identified code distribution</a> as
a potential <em>black swan</em> - an existential threat for longevity - for
Python. In their words, <em>Python hasn't ever had a consistent story for
how I give my code to someone else, especially if that someone else
isn't a developer and just wants to use my application.</em> I completely
agree. And I want to add my opinion that unless your target user is a
Python developer, they shouldn't need to know anything about Python
packaging, Python itself, or even the existence of Python in order to
use your application. (And you can replace <em>Python</em> in the previous
sentence with any programming language or software technology: most
end-users don't care about the technical implementation, they just
want to get stuff done.)</p>
<p>Today, I'm excited to announce the first release of PyOxidizer
(<a href="https://github.com/indygreg/PyOxidizer">project</a>,
<a href="https://pyoxidizer.readthedocs.io/en/latest/">documentation</a>), an open
source utility that aims to solve the Python application distribution
problem! (The installation instructions are in the docs.)</p>
<h2>Standalone Single File, No Dependencies Executable Python Applications</h2>
<p><strong>PyOxidizer's marquee feature is that it can produce a single file
executable containing a fully-featured Python interpreter, its
extensions, standard library, and your application's modules and
resources.</strong> In other words, you can have a single <code>.exe</code> providing
your application. And unlike other tools in this space which tend to
be operating system specific, PyOxidizer works across platforms
(currently Windows, macOS, and Linux - the most popular platforms for
Python today). Executables built with PyOxidizer have minimal
dependencies on the host environment nor do they do anything
complicated at run-time. I believe PyOxidizer is the only open
source tool to have all these attributes.</p>
<p><strong>On Linux, it is possible to build a fully statically linked executable.</strong>
You can drop this executable into a chroot or container where it is the
only file and it will <em>just work</em>. On macOS and Windows, the only
library dependencies are on always-present or extremely common
libraries. More details are
<a href="https://pyoxidizer.readthedocs.io/en/latest/distributing.html">in the docs</a>.</p>
<p>At execution time, binaries built with PyOxidizer do not do anything
special to run the Python interpreter. (Other tools in this space do
things like create a temporary directory or SquashFS filesystem and
extract Python to it.) <strong>PyOxidizer loads everything from memory and there
is no explicit I/O being performed. When you <code>import</code> a Python module,
the bytecode for that module is being loaded from a memory address in
the executable using zero-copy.</strong> This makes PyOxidizer executables
<a href="https://pyoxidizer.readthedocs.io/en/latest/overview.html#faster-python-programs">faster</a>
to start and <code>import</code> - faster than a <code>python</code> executable itself!</p>
<h2>Current Release and Future Roadmap</h2>
<p>Today's release of PyOxidizer is just the first release milestone in
what I envision is a long and successful project history. While my
over-arching goal with PyOxidizer is to <em>solve</em> vast swaths of the
Python application distribution problem, I want to be clear that this
first release comes nowhere close to doing so. I toiled with what
features <em>must</em> be in the initial release. I ultimately decided that
PyOxidizer's current functionality is extremely valuable to <em>some</em>
audiences and that the project has matured to the point where more
eyeballs and users would substantially help its development. (I could
definitely use some help prioritizing which features to work on and
for that I need users and user feedback.)</p>
<p>In today's release, PyOxidizer is good at producing executables
embedding Python. It doesn't yet venture too far into the <em>distribution</em>
part of the problem (I want it to be trivial to produce MSI installers,
DMG images, deb/rpm packages, etc). But on Linux, this is already a huge
step forward because PyOxidizer makes it easy (hopefully!) to produce
binaries that should <em>just work</em> on other machines. (Anyone who has
attempted to distribute Linux applications will tell you how painful this
problem can be.)</p>
<p>Despite its limitations, I believe today's release of PyOxidizer to
be a viable tool for some applications. And I believe PyOxidizer can
start to replace existing tools in this space. (See the
<a href="https://pyoxidizer.readthedocs.io/en/latest/comparisons.html">Comparisons to Other Tools</a>
document for how PyOxidizer compares to other Python packaging and
distribution tools.)</p>
<p>Using today's release of PyOxidizer, larger user-facing applications
using Python (like Dropbox, <a href="https://kodi.tv/">Kodi</a>,
<a href="https://picard.musicbrainz.org/">MusicBrainz Picard</a>, etc) could use
PyOxidizer to produce self-contained executables. This would likely cut
down on installer size, decrease install/update time (fewer files means
faster operations), and hopefully make packaging simpler for application
maintainers. Maintainers of Python utilities could produce self-contained
executables, making their utilities faster to start and easier to
package and distribute.</p>
<h2>New Possibilities and Reliability for Python</h2>
<p>By enabling support for self-contained, single file Python applications,
PyOxidizer opens exciting new doors for Python. Because Python has
historically required an explicit, separate runtime not part of the
executable, Python was not viable (or was a hinderance) in many domains.
For example, if you wanted to use Python to <em>bootstrap</em> a fresh server
or empty container environment, you had a chicken-and-egg problem because
you needed to install Python before you could use it.</p>
<p>Let's take <a href="https://www.ansible.com/">Ansible</a> for example. One of Ansible's
features is that it remotes into a machine and runs things. The way
it does this is it dynamically generates Python scripts locally, uploads
them to the remote machine, and tells the remote to execute them. Those
Python scripts require the existence of a Python interpreter on the
remote machine. This means you need to install Python on a machine before
you can control it with Ansible. Furthermore, because the remote's Python
isn't under Ansible's control, you can assume very little about its behavior
and capabilities, making interaction a bit brittle.</p>
<p>Using PyOxidizer, projects like Ansible could produce a self-contained
executable containing a Python interpreter. They could transfer that
single binary to the remote machine and execute it, instantly giving the
remote machine access to a fully-featured and modern Python interpreter.
From there, the sky is the limit. In Ansible's case, the executable could
contain the full Ansible runtime, along with any 3rd party Python
packages they wanted to leverage. This would allow execution to occur
(possibly mostly independently) on the remote machine. This architecture
is simpler, scales better, would likely result in faster operations, and
would probably improve the quality of life for everyone involved, from
application developers to its end users.</p>
<p><strong>Self-contained Python applications built with PyOxidizer essentially
solve the <em>Python interpreter bootstrapping and reliability</em> problems.</strong>
By providing a Python interpreter and a known set of Python modules, you
provide a highly deterministic and reliable execution environment for your
application. You don't need to fret about which version of Python
is installed: you <em>know</em> which version of Python you are using.
You don't need to worry about which Python packages are installed:
you control explicitly which packages are available. You don't need to
worry about whether you are running in a virtualenv, what <code>sys.path</code>
is set to, whether <code>.pth</code> files come into play, whether various
<code>PYTHON*</code> environment variables can mess up your application, whether
some Linux distribution packaged Python differently, what to put in your
script's <em>shebang</em>, etc: executables built with PyOxidizer behave as
you have instructed them to because they are <em>compiled</em> that way.</p>
<p>All of the concerns in the previous paragraph contribute to a larger
problem in the eyes of application maintainers that can be summarized as
<em>Python isn't reliable</em>. And because <em>Python isn't reliable</em>, many
people reach the conclusion that <em>Python shouldn't be used</em> (this is the
<em>black swan</em> that was referred to earlier). With PyOxidizer, the Python
environment is isolated and highly deterministic making the
reliability problem largely go away. This makes Python a more viable
technology choice. And it enables application maintainers to aggressively
adopt modern Python versions, utilize third party packages fearlessly,
and spend far less time chasing an extremely long tail of issues related
to Python environment variance. Succinctly, application developers can
focus on building great applications instead of toiling with Python
environment problems.</p>
<h2>Project Status</h2>
<p>PyOxidizer is still in its relative infancy. While it is far from
feature complete, I'm mentally committed to working on the remaining
major functionality. The <a href="https://pyoxidizer.readthedocs.io/en/latest/status.html">Status</a>
document lists major missing functionality, lesser missing functionality,
and potential future value-add functionality.</p>
<p>I want PyOxidizer to provide a Python application packaging and
distribution experience that <em>just works</em> with minimal cognitive effort
from Python application maintainers. I have spent a lot of effort
documenting PyOxidizer. I care passionately about user experience and want
everything about PyOxidizer to be simple and frustration free. I
know things aren't there yet. The problems that PyOxidizer is attempting
to solve are hard (that's a reason nobody has solved them well yet). I
know there's details floating around in my head that haven't been
added to the documentation yet. I know there's missing features and
bugs in PyOxidizer. I know there are
<a href="https://pyoxidizer.readthedocs.io/en/latest/packaging_pitfalls.html">Packaging Pitfalls</a>
yet to be discovered.</p>
<p>This is where you come in.</p>
<p><strong>I need your help to make PyOxidizer great.</strong> I encourage Python
application maintainers reading this to head over to
<a href="https://pyoxidizer.readthedocs.io/en/latest/getting_started.html">Getting Started</a>
and the
<a href="https://pyoxidizer.readthedocs.io/en/latest/packaging.html">Packaging User Guide</a>
and try to package your applications with PyOxidizer. If things don't
work, let me know by <a href="https://github.com/indygreg/PyOxidizer/issues">filing an issue</a>.
If you are confused by lack of or unclear documentation, file an issue.
If something frustrates you, file an issue. If you want to suggest I
work on a certain feature or fix a bug, file an issue! Tweet to
<a href="https://twitter.com/indygreg">@indygreg</a> to engage with me there. Join
the <a href="https://groups.google.com/forum/#!forum/pyoxidizer-users">pyoxidizer-users mailing list</a>.
While I feel PyOxidizer is usable today (that's why I'm announcing it),
<strong>I need your feedback to help guide future prioritization.</strong></p>
<p>Finally, I know PyOxidizer has significant implications for some
companies and projects that use Python. While I'm not looking to
enrich myself or make my livelihood from PyOxidizer, if PyOxidizer is
useful to you and you'd like to send money my way as appreciation, you
can do so <a href="https://www.patreon.com/indygreg">on Patreon</a> or
<a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=gregory%2eszorc%40gmail%2ecom&amp;lc=US&amp;item_name=PyOxidizer&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted">PayPal</a>.
If not, that's totally fine: I wouldn't be making PyOxidizer open source
if I didn't want to share it with the world for free! And I am
financially well off as well. I just feel like there should be
more financial contribution to open source because it would improve
the health of the ecosystem and I can help achieve that end by
advocating for it and giving myself.</p>
<h2>Leveraging Rust</h2>
<p>The <em>oxidize</em> part of PyOxidizer comes from Rust (See the
<a href="https://en.wikipedia.org/wiki/Rust">Wikipedia Rust article</a> - for the
chemical not the programming language - to understand where <em>oxidize</em>
comes from.) The build time packaging and building functionality is
implemented in Rust. And the binary that embeds and controls the
Python interpreter in built applications is Rust code. Rationale for
these decisions is
<a href="https://pyoxidizer.readthedocs.io/en/latest/faq.html#why-rust">explained in the FAQ</a>.</p>
<p>This is my first non-toy project using Rust and I have to say that
Rust is... incredible! I may have to author a dedicated blog post
extolling the virtues of Rust. In short, Rust is now my go-to language
for systems level projects. Unless you need the target platform
versatility, I don't think C or C++ are defensibles choices in 2019 given
their security deficiencies. Languages like Go, Java, and various JVM
or CLR languages are acceptable if you can tolerate having a garbage
collector and/or a larger runtime. But what makes Rust superior in my
mind is the ability for the compiler to prevent large classes of
software bugs (especially those that turn into CVEs) and inefficiencies that
have plagued our industry for decades. <strong>Rust is the first programming
language I've used where I feel like the language itself, the compiler,
the tools around it (cargo, rustfmt, clippy, rustup, etc), and the
community surrounding it all actually care about and assist me with
writing high quality software. Nothing else I've used comes even close.</strong></p>
<p>What I've been most surprised about Rust is how high level it feels
for a systems level language that isn't garbage collected. When you
program lower-level languages like C or C++, compared to a higher level
language like Python, you have to type a lot more and be more explicit
in nearly everything you do. While Rust is certainly not as expressive
or compact as say Python, it is far, far closer to Python than I was
expecting it to be. Yes, you do have to type more and think more about
your code to appease the Rust compiler's constraints. But the return
on that investment is the compiler preventing entire classes of bugs
and C/C++ levels of performance. When I started PyOxidizer, the build
time logic was implemented in Python and only the run-time pieces were
in Rust. <strong>After learning a bit more Rust and realizing the obvious
code quality benefits, I ditched Python and adopted Rust for the build
time logic.</strong> And as the code base has grown and gone through various
refactorings, I am so glad I did so! The Rust compiler has caught
dozens of would-be bugs in Python. Granted, many of these can be
attributed to having strong typing and compile time type checking and
Rust is little different than say Java on this front. But a significant
number of prevented bugs covered invariants in the code because of the
way Rust's type system often intersects with control flow. e.g. <code>match</code>
arms must be exhaustive, so you can't have unhandled values/types and
unchecked <code>Result</code> instances result ina compiler warning. And clippy
has been just fantastic helping to guide me towards writing more
<em>acceptable</em> code following community accepted best practices.</p>
<p><strong>Even though PyOxidizer is implemented in Rust, most end-users shouldn't
have to care</strong> (beyond having to install a Rust compiler and build
PyOxidizer from source). The existence of Rust should be abstracted
away from Python packagers. I did this on purpose because I believe that
users of an application shouldn't have to care about the technical
implementation of that application. It is a bit unfortunate that I
force users to install Rust before using PyOxidizer, but in my defense
the target audience is technically savvy developers, bootstrapping Rust
is easy, and PyOxidizer is young, so I think it is acceptble for now.
If people get hung up on it, I can provide pre-compiled <code>pyoxidizer</code>
executables.</p>
<p>But if you do know Rust, PyOxidizer being implemented in Rust opens
up some exciting possibilities!</p>
<p><strong>One exciting possibility with PyOxidizer is the ability to add Rust
code to your Python application.</strong> PyOxidizer works by generating a
default Rust application (<code>main.rs</code>) that simply instantiates and runs
an embedded Python interpreter then exits. It essentially does what
<code>python</code> or a Python script would do. The key takeaway here is your
<em>Python application</em> is technically a <em>Rust application</em> (in the same
way that <code>python</code> is technically a <em>C application</em>). And being a
Rust application means you can add Rust code to that application. You
can modify the autogenerated <code>main.rs</code> to do things before, during, and
after the embedded Python interpreter runs. It's a regular Rust program
and can do anything that Rust programs can do!</p>
<p>Another possibility - and variant of above - is embedding Python
in existing Rust projects. PyOxidizer's mechanism for embedding a
Python interpreter is implemented as a standalone Rust crate. <strong>One
can add the pyembed crate to an existing Rust project and a little of
build system magic later, your Rust project can now embed and run
a Python interpreter!</strong></p>
<p>There's a lot of potential for hybrid Rust + Python programs. And
I am <strong>very</strong> excited about the possibilities.</p>
<p><strong>If you are a Rust programmer, PyOxidizer allows you to easily embed
Python in your Rust application. If you are a Python programmer,
PyOxidizer allows your to easily leverage Rust in your Python
application.</strong> In short, the package ecosystem of the other becomes
available to you. And if you aren't familiar with Rust, there are some
potentially crazy possibilities. For example,
<a href="https://github.com/jwilm/alacritty">Alacritty</a> is a GPU accelerated
terminal emulator written in Rust and
<a href="https://github.com/servo/servo">Servo</a> is an entire web browser
engine written in Rust. With PyOxidizer, you could integrate a
terminal emulator or browser engine as part of your Python
application if you really wanted to. And, yes, Rust's packaging
tools are so good that stuff like this tends to <em>just work</em>. As
a concrete example, the <code>pyoxidizer</code> CLI tool contains <code>libgit2</code>
for performing in-process interactions with Git repositories. Adding
this required a single line change to a <code>Cargo.toml</code> file and it
<em>just worked</em> on Linux, macOS, and Windows. Stuff like this often
takes hours to days to integrate in C/C++. It is quite ridiculous
how easy it is to add (complex) components to Rust projects!</p>
<p>For years, Python projects have implemented extensions in C to
realize performance wins. If your Python application is a Rust
executable, then implementing this functionality in Rust (rather
than C) seems rationale. So we may see <em>oxidized</em> Python
applications have their performance critical pieces slowly be
rewritten in Rust. (Honestly, the Rust crates to interface between
Rust and the CPython API still leave a bit to be desired, so the
experience of writing this Rust code still isn't great. But things
will certainly improve over time.)</p>
<p>This type of <em>inside-out</em> split language work has been practiced
in Python for years. What PyOxidizer brings to the table is the
ability to more easily port code <em>outside-in</em>. For example, you
could implement performance-criticial, early application logic such
as config file parsing and command line argument parsing in Rust.
You could then have Rust service some application functionality
without Python. Why would you want this? Performance is a valid
reason. Starting a Python interpreter, importing modules, and running
code can consume several dozen or even hundreds of milliseconds. If
you are writing performance sensitive applications, the existence
of <em>any</em> Python can add enough latency that people no longer perceive
the interaction as instananeous. This added latency can make Python
totally inappropriate for some contexts, such as for programs that run
as part of populating your shell's prompt. Writing such code in Rust
instead of Python dramatically increases the probability that the
code is fast and likely delivers stronger correctness guarantees
courtesy of Rust's compile time validation as well!</p>
<p>An extreme practice of <em>outside-in</em> porting of Python to Rust would
be to incrementally rewrite an entire Python application in Rust.
Rust's ergonomics are exceptional and I do think we'll see people
choose Rust where they previously would have chosen Python. I've
done this myself with PyOxidizer and feel it is a very defensible
decision to reach! I feel a bit conflicted releasing a tool which
may undermine Python's popularity by encouraging use of Rust over
Python. But at the end of the day, PyOxidizer increases the utility
of both Python and Rust by giving each more readily accessible
access to the other and PyOxidizer improves the overall utility of
Python by improving the application distribution story. I have no
doubt PyOxidizer is a net benefit for the Python ecosystem, even if
it does help usher in more people choosing Rust over Python. If
I have an ulterior motive in developing PyOxidizer, it is to enable
Mercurial's official distribution to be a Rust executable and
for some functionality (like <code>hg status</code>) to be runnable without
Python (for performance reasons).</p>
<p>Another possible use of PyOxidizer is as a library. All the build time
functionality of PyOxidizer exists in a Rust crate. So, you can add
the <code>pyoxidizer</code> crate to your own Rust project and use its code to
do things like build a library containing Python, compile Python
source modules to bytecode, or walk a directory tree and find Python
resources within. The code is still heavily geared towards PyOxidizer
and there's no promise of API stability. But this potential for library
usage exists and if others want to experiment with building custom
Python binaries not using the <code>pyoxidizer</code> CLI tool, using PyOxidizer
as a library might save you a lot of time.</p>
<h2>Standalone Python Distributions</h2>
<p>One of the most time consuming parts of building PyOxidizer was
figuring out how to build self-contained Python distributions.
Typically, a Python build consists of a library, shared libraries for
various extension modules, shared libraries required by the prior
items, and a hodgepodge of other files, such as .py files implementing
the Python standard library. The
<a href="https://github.com/indygreg/python-build-standalone">python-build-standalone</a>
project was created to automate creating special builds of Python
which are self-contained and distributable. This requires doing
dirty things with build systems. But I don't want to inflict the
details on you here. What I do think is worth mentioning is how
those Python distributions are distributed. The output of the
build is a tarball containing the Python installation, build artifacts
that can be used to link a custom libpython, and a <code>PYTHON.json</code>
file describing the contents of the distribution. PyOxidizer reads
the <code>PYTHON.json</code> file and learns how it should interact with that
distribution. <strong>If you produce a Python distribution conforming to the
format that <code>python-build-standalone</code> defines, you can use that
Python with PyOxidizer.</strong></p>
<p>While I have no urgency to do so at this time, I could see a future
where this Python distribution format is standardized. Then maintainers
of various Python distributions (CPython, PyPy, etc) would independently
produce their own distributable artifacts conforming to this standard,
in turn allowing machine consumers of Python distributions (such as
PyOxidizer) to easily consume different Python distributions and do
interesting things with them. You could even imagine these Python
distribution archives being readily available as packages in your
system's package manager and their locations exposed via the
<code>sysconfig</code> Python module, making it easy for tools (like PyOxidizer)
to find and use them.</p>
<p>Over time, I could see PyOxidizer's functionality rolling up into
official packaging tools like <code>pip</code>, which would know how to consume
the distribution archives and produce an executable containing a
Python interpreter, required Python modules, etc.</p>
<p>Getting PyOxidizer's functionality rolled into official Python
packaging tools is likely years away (if it ever happens). But I think
standardizing a format describing a Python distribution and (optionally)
contains build artifacts that can be used to <em>repackage</em> it is a
prerequisite and would be a good place to start this journey. I would
certainly love for Python distributions (like CPython) to be in charge of
producing official <em>repackagable</em> distributions because this is not
something I want to be in the business of doing long term (I'm
lazy, less equipped to make the correct decisions, and there are
various trust and security concerns). And while I'm here, I am
definitely interested in upstreaming some of the
<code>python-build-standalone</code> functionality into the existing CPython
build system because coercing CPython's build system to produce
distributable binaries is currently a major pain and I'd love to enable
others to do this. I just haven't had time nor do I know if the patches
would be well received. If a CPython maintainer wants to get in
touch, I'd love to have a conversation!</p>
<h2>Conclusion</h2>
<p>I started hacking on PyOxidizer in November 2018. After months
of chipping away at it, I think I finally have a useful utility
for some audiences. There's still a lot of missing features and
some rough edges. But the core functionality is there and I'm
convinced that PyOxidizer or its underlying technology could be
an integral part of solving Python's application distribution
<em>black swan</em> problem. I'm particularly proud of the hacks I
concocted to coerce Python into importing module bytecode from
memory using zero-copy. Those are documented in
<a href="/blog/2018/12/18/distributing-standalone-python-applications/">this blog post</a>
and in the
<a href="https://github.com/indygreg/PyOxidizer/blob/master/pyoxidizer/src/pyembed/lib.rs">pyembed crate docs</a>.</p>
<p>So what are you waiting for? Head on over to the
<a href="https://pyoxidizer.readthedocs.io/en/latest/index.html">documentation</a>,
install PyOxidizer, and let me know how it goes by
<a href="https://github.com/indygreg/PyOxidizer/issues">filing issues</a>!</p>
<p>I hope you enjoy <em>oxidizing</em> your Python applications!</p>]]></content:encoded>
    </item>
    <item>
      <title>PyOxidizer Support for Windows</title>
      <link>http://gregoryszorc.com/blog/2019/01/06/pyoxidizer-support-for-windows</link>
      <pubDate>Sun, 06 Jan 2019 10:00:00 PST</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <category><![CDATA[Rust]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2019/01/06/pyoxidizer-support-for-windows</guid>
      <description>PyOxidizer Support for Windows</description>
      <content:encoded><![CDATA[<p>A few weeks ago I
<a href="/blog/2018/12/18/distributing-standalone-python-applications">introduced PyOxidizer</a>,
a project that aims to make it easier to produce completely self-contained
executables embedding a Python interpreter (using Rust). A few days later I
<a href="/blog/2018/12/28/faster-in-memory-python-module-importing/">observed some PyOxidizer performance benefits</a>.</p>
<p>After a few more hacking sessions, I'm very pleased to report that
PyOxidizer is now working on Windows!</p>
<p>I am able to produce a standalone Windows <code>.exe</code> containing a fully
featured CPython interpreter, all its library dependencies (OpenSSL, SQLite,
liblzma, etc), and a copy of the Python standard library (both source and
bytecode data). The binary weighs in at around 25 MB. (It could be smaller
if we didn't embed <code>.py</code> source files or stripped some dependencies.)
The only DLL dependencies of the exe are <code>vcruntime140.dll</code> and various
system DLLs that are always present on Windows.</p>
<p>Like I did for Linux and macOS, I produced a Python script that performs
~500 <code>import</code> statements for the near entirety of the Python standard library.
I then ran this script with both the official 64-bit Python distribution
and an executable produced with PyOxidizer:</p>
<pre><code># Official CPython 3.7.2 Windows distribution.
$ time python.exe &lt; import_stdlib.py
real    0m0.475s

# PyOxidizer with non-PGO CPython 3.7.2
$ time target/release/pyapp.exe &lt; import_stdlib.py
real    0m0.347s
</code></pre>
<p>Compared to the official CPython distribution, a PyOxidizer executable
can import almost the entirety of the Python standard library ~125ms
faster - or ~73% of original. In terms of the percentage of speedup,
the gains are similar to Linux and macOS. However, there is substantial
new process overhead on Windows compared to POSIX architectures. On the
same machine, a <em>hello world</em> Python process will execute in ~10ms on Linux
and ~40ms on Windows. If we remove the startup overhead, importing
the Python standard library runs at ~70% of its original time, making
the relative speedup on par with that seen on macOS + APFS.</p>
<p>Windows support is a major milestone for PyOxidizer. And it was the
hardest platform to make work. CPython's build system on Windows uses
Visual Studio project files. And coercing the build system to produce
static libraries was a real pain. Lots of CPython's build tooling assumes
Python is built in a very specific manner and multiple changes I made
completely break those assumptions. On top of that, it's very easy to
encounter problems with symbol name mismatch due to the use of
<code>__declspec(dllexport)</code> and <code>__declspec(dllimport)</code>. I spent
several hours going down a rabbit hole learning how Rust generates symbols
on Windows for <code>extern {}</code> items. Unfortunately, we currently have
to use a Rust Nightly feature (the <code>static-nobundle</code> linkage kind)
to get things to work. But I <em>think</em> there are options to remove that
requirement.</p>
<p>Up to this point, my work on PyOxidizer has focused on prototyping the
concept. With Windows out of the way and PyOxidizer working on Linux,
macOS, and Windows, I have achieved confidence that my vision of a
single executable embedding a full-featured Python interpreter is
technically viable on major desktop platforms! (BSD people, I care
about you too. The solution for Linux should be portable to BSD.)
This means I can start focusing on features, usability, and optimization.
In other words, I can start building a tool that others will want to use.</p>
<p>As always, you can follow my work on this blog and by following
the <a href="https://github.com/indygreg/python-build-standalone">python-build-standalone</a>
and <a href="https://github.com/indygreg/PyOxidizer">PyOxidizer</a> projects on
GitHub.</p>]]></content:encoded>
    </item>
    <item>
      <title>Faster In-Memory Python Module Importing</title>
      <link>http://gregoryszorc.com/blog/2018/12/28/faster-in-memory-python-module-importing</link>
      <pubDate>Fri, 28 Dec 2018 12:40:00 PST</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <category><![CDATA[Rust]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/12/28/faster-in-memory-python-module-importing</guid>
      <description>Faster In-Memory Python Module Importing</description>
      <content:encoded><![CDATA[<p>I <a href="/blog/2018/12/18/distributing-standalone-python-applications/">recently blogged about</a>
distributing standalone Python applications. In that post, I announced
<a href="https://github.com/indygreg/PyOxidizer">PyOxidizer</a> - a tool which
leverages Rust to produce standalone executables embedding Python. One of the
features of PyOxidizer is the ability to import Python modules embedded
within the binary using zero-copy.</p>
<p>I also recently blogged about
<a href="/blog/2018/10/29/global-kernel-locks-in-apfs/">global kernel locks in APFS</a>,
which make filesystem operations slower on macOS. This was the latest wrinkle in
a long battle against Python's slow startup times, which I've posted about
on the official python-dev mailing list
<a href="https://mail.python.org/pipermail/python-dev/2014-May/134528.html">over</a>
<a href="https://mail.python.org/pipermail/python-dev/2018-May/153296.html">the</a>
<a href="https://mail.python.org/pipermail/python-dev/2018-October/155466.html">years</a>.</p>
<p>Since I announced PyOxidizer a few days ago, I've had some productive holiday
hacking sessions!</p>
<p>One of the reached milestones is PyOxidizer now supports macOS.</p>
<p>With that milestone reached, I thought it would be interesting to compare
the performance of a PyOxidizer executable versus a standard CPython build.</p>
<p>I produced a <a href="https://gist.github.com/indygreg/be1c229fa41ced5c76d912f7073f9de6">Python script</a>
that imports almost the entirety of the Python standard library - at least the
modules implemented in Python. That's 508 <code>import</code> statements. I then
executed this script using a typical <code>python3.7</code> binary (with the standard
library on the filesystem) and PyOxidizer-produced standalone executables
with a module importer that loads Python modules from memory using zero copy.</p>
<pre><code># Homebrew installed CPython 3.7.2

# Cold disk cache.
$ sudo purge
$ time /usr/local/bin/python3.7 &lt; import_stdlib.py
real   0m0.694s
user   0m0.354s
sys    0m0.121s

# Hot disk cache.
$ time /usr/local/bin/python3.7 &lt; import_stdlib.py
real   0m0.319s
user   0m0.263s
sys    0m0.050s

# PyOxidizer with non-PGO/non-LTO CPython 3.7.2
$ time target/release/pyapp &lt; import_stdlib.py
real   0m0.223s
user   0m0.201s
sys    0m0.017s

# PyOxidizer with PGO/non-LTO CPython 3.7.2
$ time target/release/pyapp &lt; import_stdlib.py
real   0m0.234s
user   0m0.210s
sys    0m0.019

# PyOxidizer with PTO+LTO CPython 3.7.2
$ sudo purge
$ time target/release/pyapp &lt; import_stdlib.py
real   0m0.442s
user   0m0.252s
sys    0m0.059s

$ time target/release/pyall &lt; import_stdlib.py
real   0m0.221s
user   0m0.197s
sys    0m0.020s
</code></pre>
<p>First, the PyOxidizer times are all relatively similar regardless of whether
PGO or LTO is used to build CPython. That's not too surprising, as I'm
exercising a very limited subset of CPython (and I suspect the benefits
of PGO/LTO aren't as pronounced due to the nature of the CPython API).</p>
<p>But the bigger result is the obvious speedup with PyOxidizer and its
in-memory importing: <strong>PyOxidizer can import almost the entirety of the
Python standard library ~100ms faster - or ~70% of original - than a
typical standalone CPython install</strong> with a hot disk cache! This comes
out to ~0.19ms per <code>import</code> statement. If we run <code>purge</code> to clear out
the disk cache, the performance delta increases to 252ms, or ~64% of
original. All these numbers are on a 2018 6-core 2.9 GHz i9 MacBook Pro,
which has a pretty decent SSD.</p>
<p>And on Linux on an i7-6700K running in a Hyper-V VM:</p>
<pre><code># pyenv installed CPython 3.7.2

# Cold disk cache.
$ time ~/.pyenv/versions/3.7.2/bin/python &lt; import_stdlib.py
real   0m0.405s
user   0m0.165s
sys    0m0.065s

# Hot disk cache.
$ time ~/.pyenv/versions/3.7.2/bin/python &lt; import_stdlib.py
real   0m0.193s
user   0m0.161s
sys    0m0.032s

# PyOxidizer with PGO CPython 3.7.2

# Cold disk cache.
$ time target/release/pyapp &lt; import_stdlib.py
real   0m0.227s
user   0m0.145s
sys    0m0.016s

# Hot disk cache.
$ time target/release/pyapp &lt; import_stdlib.py
real   0m0.152s
user   0m0.136s
sys    0m0.016s
</code></pre>
<p>On a hot disk cache, the run-time improvement of PyOxidizer is ~41ms, or
~78% of original. This comes out to ~0.08ms per <code>import</code> statement. When
flushing caches by writing <code>3</code> to <code>/proc/sys/vm/drop_caches</code>, the delta
increases to ~178ms, or ~56% of original.</p>
<p>Using <code>dtruss -c</code> to execute the binaries, the breakdown in system calls
occurring &gt;10 times is clear:</p>
<pre><code># CPython standalone
fstatfs64                                      16
read_nocancel                                  19
ioctl                                          20
getentropy                                     22
pread                                          26
fcntl                                          27
sigaction                                      32
getdirentries64                                34
fcntl_nocancel                                106
mmap                                          114
close_nocancel                                129
open_nocancel                                 130
lseek                                         148
open                                          168
close                                         170
read                                          282
fstat64                                       403
stat64                                        833

# PyOxidizer
lseek                                          10
read                                           12
read_nocancel                                  14
fstat64                                        16
ioctl                                          22
munmap                                         31
stat64                                         33
sysctl                                         33
sigaction                                      36
mmap                                          122
madvise                                       193
getentropy                                    315
</code></pre>
<p>PyOxidizer avoids hundreds of <code>open()</code>, <code>close()</code>, <code>read()</code>,
<code>fstat64()</code>, and <code>stat64()</code> calls. And by avoiding these calls,
PyOxidizer not only avoids the userland-kernel overhead intrinsic to them,
but also any additional overhead that APFS is imposing via its global
lock(s).</p>
<p>(Why the PyOxidizer binary is making hundreds of calls to <code>getentropy()</code>
I'm not sure. It's definitely coming from Python as a side-effect of a
module import and it is something I'd like to fix, if possible.)</p>
<p>With this experiment, we finally have the ability to better isolate the
impact of filesystem overhead on Python module importing and preliminary
results indicate that the overhead is not insignificant - at least on the
tested systems (I'll get data for Windows when PyOxidizer supports it).
While the test is somewhat contrived (I don't think many applications import
the entirety of the Python standard library), some Python applications do
import hundreds of modules. And as I've
<a href="https://mail.python.org/pipermail/python-dev/2018-May/153296.html">written before</a>,
milliseconds matter. This is especially true if you are invoking Python
processes hundreds or thousands of times in a build system, when running
a test suite, for scripting, etc. Cumulatively you can be importing tens
of thousands of modules. So I think shaving even fractions of a
millisecond from module importing is important.</p>
<p>It's worth noting that in addition to the system call overhead, CPython's
path-based importer runs
<a href="https://github.com/python/cpython/blob/804a5d94b6b7f8cb8546112aee2bc3af362f28f5/Lib/importlib/_bootstrap_external.py">substantially more</a>
Python code
<a href="https://github.com/indygreg/PyOxidizer/blob/c50e63338abd08ebac86746a33d750756d622edc/pyrepackager/src/memoryimporter.py">than PyOxidizer</a>
and this likely contributes several milliseconds of overhead as well. Because
PyOxidizer applications are static, the importer can remain simple (finding a
module in PyOxidizer is essentially a Rust <code>HashMap&lt;String, Vec&lt;u8&gt;</code> lookup).
While it might be useful to isolate the filesystem overhead from Python code
overhead, the thing that end-users care about is overall execution time: they
don't care where that overhead is coming from. So I think it is fair to compare
PyOxidizer - with its intrinsically simpler import model - with what Python
typically does (scan <code>sys.path</code> entries and looking for modules on the
filesystem).</p>
<p>Another difference is that PyOxidizer is almost completely statically linked.
By contrast, a typical CPython install has compiled extension modules as
standalone shared libraries and these shared libraries often link against
other shared libraries (such as libssl). From <code>dtruss</code> timing information,
I don't believe this difference contributes to significant overhead, however.</p>
<p>Finally, I haven't yet optimized PyOxidizer. I still have a few tricks up
my sleeve that can likely shave off more overhead from Python startup. But
so far the results are looking <em>very</em> promising. I dare say they are looking
promising enough that Python distributions themselves might want to look
into the area more thoroughly and consider distribution defaults that rely
less on the every-Python-module-is-a-separate-file model.</p>
<p>Stay tuned for more <a href="https://github.com/indygreg/PyOxidizer">PyOxidizer</a>
updates in the near future!</p>
<p><em>(I updated this post a day after initial publication to add measurements
for Linux.)</em></p>]]></content:encoded>
    </item>
    <item>
      <title>Distributing Standalone Python Applications</title>
      <link>http://gregoryszorc.com/blog/2018/12/18/distributing-standalone-python-applications</link>
      <pubDate>Tue, 18 Dec 2018 15:35:00 PST</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[PyOxidizer]]></category>
      <category><![CDATA[Rust]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/12/18/distributing-standalone-python-applications</guid>
      <description>Distributing Standalone Python Applications</description>
      <content:encoded><![CDATA[<h2>The Problem</h2>
<p>Packaging and application distribution is a hard problem on multiple
dimensions. For Python, large aspects of this problem space are more or
less solved if you are distributing open source Python libraries and your
target audience is developers (<em>use pip and PyPI</em>). But if you are distributing
Python <em>applications</em> - standalone executables that use Python - your
world can be much more complicated.</p>
<p>One of the primary reasons why distributing Python applications is difficult
is because of the complex and often sensitive relationship between a Python
application and the environment it runs in.</p>
<p>For starters we have the Python interpreter itself. If your application doesn't
distribute the Python interpreter, you are at the whims of the Python
interpreter provided by the host machine. You may want to target Python 3.7
only. But because Python 3.5 or 3.6 is the most recent version installed by
many Linux distros, you are forced to support older Python versions and all
their quirks and lack of features.</p>
<p>Going down the rabbit hole, even the presence of a supposedly compatible
version of the Python interpreter isn't a guarantee for success! For example,
the Python interpreter could have a built-in extension that links against
an old version of a library. Just last week I was encountering weird SQlite
bugs in Firefox's automation because Python was using an old version of
SQLite with known bugs. Installing a modern SQLite fixed the problems. Or
the interpreter could have modifications or extra installed packages
interfering with the operation of your application. There are never-ending
corner cases. And I can tell you from my experience with having to support
the Firefox build system (which uses Python heavily) that you will encounter
these corner cases given a broad enough user base.</p>
<p>And even if the Python interpreter on the target machine is fully compatible,
getting your code to run on that interpreter could be difficult! Several
Python applications leverage compiled extensions linking against Python's
C API. Distributing the precompiled form of the extension can be challenging,
especially when your code needs to link against 3rd party libraries, which
may conflict with something on the target system. And, the precompiled
extensions need to be built in a very delicate manner to ensure they can
run on as many target machines as possible. But not distributing pre-built
binaries requires the end-user be able to compile Python extensions. Not
every user has such an environment and forcing this requirement on them is
not user friendly.</p>
<p><strong>From an application developer's point of view, distributing a copy of the
Python interpreter along with your application is the only reliable way of
guaranteeing a more uniform end-user experience.</strong> Yes, you will still
have variability because every machine is different. But you've eliminated
the the Python interpreter from the set of unknowns and that is a huge win.
(Unfortunately, distributing a Python interpreter comes with a host of other
problems such as size bloat, security/patching concerns, poking the OS
packaging bears, etc. But those problems are for another post.)</p>
<h2>Existing Solutions</h2>
<p>There are tons of existing tools for <em>solving</em> the Python application
distribution problem.</p>
<p>The approach that tools like <a href="https://shiv.readthedocs.io/en/latest/">Shiv</a>
and <a href="https://github.com/pantsbuild/pex">PEX</a> take is to leverage Python's
built-in support for <em>running</em> zip files. Essentially, if there is a zip
file containing a <code>__main__.py</code> file and you execute <code>python file.zip</code>
(or have a zip file with a <code>#!/usr/bin/env python</code> shebang), Python
can load modules in that zip file and execute an application within. Pretty
cool!</p>
<p>This approach works great if your execution environment supports shebangs
(Windows doesn't) and the Python interpreter is suitable. But if you need
to support Windows or don't have control over the execution environment
and can't guarantee the Python interpreter is <em>good</em>, this approach isn't
suitable.</p>
<p>As stated above, we want to distribute the Python interpreter with our
application to minimize variability. Let's talk about tools that do that.</p>
<p><a href="https://github.com/facebookincubator/xar/">XAR</a> is a pretty cool offering
from Facebook. XAR files are executables that contain
<a href="https://en.wikipedia.org/wiki/SquashFS">SquashFS</a> filesystems. Upon running
the executable, SquashFS filesystems are created. For Python applications,
the XAR contains a copy of the Python interpreter and all your Python modules.
At run-time, these files are <em>extracted</em> to SquashFS filesystems and the
Python interpreter is executed. If you squint hard enough, it is kind of
like a pre-packaged, executable virtualenv which also contains the Python
interpreter.</p>
<p>XARs are pretty cool (and aren't limited to Python). However, because XARs
rely on SquashFS, they have a run-time requirement on the target machine.
This is great if you only need to support Linux and macOS and your target
machines support FUSE and SquashFS. But if you need to support Windows or
a general user population without SquashFS support, XARs won't help you.</p>
<p>Zip files and XARs are great for enterprises that have tightly controlled
environments. But for a general end-user population, we need something
more robust against variance among target machines.</p>
<p>There are a handful of tools for packaging Python applications along with
the Python interpreter in more resilient manners.</p>
<p><a href="http://nuitka.net/pages/overview.html">Nuitka</a> <em>converts</em> Python source
to C code then compiles and links that C code against libpython. You can
perform a static link and compile everything down to a single executable.
If you do the compiling properly, that executable should <em>just work</em> on
pretty much every target machine. That's pretty cool and is exactly the
kind of solution application distributors are looking for: you can't get
much simpler than a self-contained executable! While I'd love to vouch
for Nuitka and recommend using it, I haven't used it so can't. And I'll
be honest, the prospect of compiling Python source to C code kind of
terrifies me. That effectively makes Nuitka a new Python implementation
and I'm not sure I can (yet) place the level of trust in Nuitka that I
have for e.g. CPython and PyPy.</p>
<p>And that leads us to our final category of tools:
<a href="https://docs.python-guide.org/shipping/freezing/">freezing your code</a>. There
are a handful of tools like <a href="https://www.pyinstaller.org/">PyInstaller</a>
which automate the process of building your Python application (often via
standard <code>setup.py</code> mechanisms), assembling all the requisite bits of
the Python interpreter, and producing an artifact that can be distributed
to end users. There are even tools that produce Windows installers, RPMs,
DEBs, etc that you can sign and distribute.</p>
<p>These <em>freezing</em> tools are arguably the state of the art for Python
application distribution to general user populations. On first glance
it seems like all the needed tools are available here. But there are
cracks below the surface.</p>
<h2>Issues with Freezing</h2>
<p>A common problem with freezing is it often relies on the Python interpreter
used to build the frozen application. For example, when building a frozen
application on Linux, it will bundle the system's Python interpreter with
the frozen application. And that interpreter may link against libraries
or libc symbol versions not available on all target machines. So, the
build environment has to be <em>just right</em> in order for the binaries to
run on as many target systems as possible. This isn't an insurmountable
problem. But it adds overhead and complexity to application maintainers.</p>
<p>Another limitation is how these frozen applications handle importing
Python modules.</p>
<p>Multiple tools take the approach of embedding an archive (usually a zip file)
in the executable containing the Python <em>standard library</em> bits not part of
libpython. This includes C extensions (compiled to <code>.so</code> or <code>.pyd</code> files)
and Python source (<code>.py</code>) or bytecode (<code>.pyc</code>) files. There is typically
a step - either at application start time or at module import time - where a
file is extracted to the filesystem such that Python's filesystem-based
importer can load it from there.</p>
<p>For example, PyInstaller <a href="https://pyinstaller.readthedocs.io/en/stable/operating-mode.html#how-the-one-file-program-works">extracts the standard library to a temporary directory
at application start time</a>
(at least when running in single file mode). This can add significant overhead
to the startup time of applications - more than enough to blow through people's
ability to perceive something as <em>instantaneous</em>. This is acceptable for
long-running applications. But for applications (like CLI tools or support
tools for build systems), the overhead can be a non-starter. And, the mere
fact that you are doing filesystem write I/O establishes a requirement that
the application have write access to the filesystem and that write I/O can
perform reasonably well lest application performance suffer. These can be
difficult pills to swallow!</p>
<p>Another limitation is that these tools often assume the executable being
produced is only a Python application. Sometimes Python is <em>part of</em> a
larger application. It would be useful to produce a library that can
easily be embedded within a larger application.</p>
<h2>Improving the State of the Art</h2>
<p>Existing Python application distribution mechanisms don't tick all the
requirements boxes for me. We have tools that are suitable for internal
distribution in well-defined <em>enterprise</em> environments. And we have tools
that target general user populations, albeit with a burden on application
maintainers and often come with a performance hit and/or limited flexibility.</p>
<p>I want something that allows me to produce a standalone, single file executable
containing a Python interpreter, the Python standard library (or a subset of
it), and all the custom code and resources my application needs. That
executable should not require any additional library dependencies beyond what is
already available on most target machines (e.g. libc). That executable should
not require any special filesystem providers (e.g. FUSE/SquashFS) nor should
it require filesystem write access nor perform filesystem write I/O at run-time.
I should be able to embed a Python interpreter within a larger application,
without the overhead of starting the Python interpreter if it isn't needed.</p>
<p>No existing solution ticks all of these boxes.</p>
<p>So I set out to build one.</p>
<p>One problem is producing a Python interpreter that is portable and
fully-featured. You can't punt on this problem because if the core Python
interpreter isn't produced in just the right way, your application will
depend on libraries or symbol versions not available in all environments.</p>
<p>I've created the <a href="https://github.com/indygreg/python-build-standalone">python-build-standalone</a>
project for automating the process of building Python interpreters suitable
for use with standalone, distributable Python applications. The project
produces (and has available for download) binary artifacts including a
pre-compiled Python interpreter and object files used for compiling that
interpreter. The Python interpreter is compiled with PGO/LTO using a modern
Clang, helping to ensure that Python code runs as fast as it can. All of
Python's dependencies are compiled from source with the modern toolchain and
everything is aggressively statically linked to avoid external dependencies.
The toolchain and pre-built distribution are available for downstream
consumers to compile Python extensions with/against.</p>
<p>It's worth noting that use of a modern Clang toolchain is likely sufficiently
different from what you use today. When producing <em>manylinux</em> wheels, it is
recommended to use the <a href="https://github.com/pypa/manylinux">pypa/manylinux</a>
Docker images. These Docker images are based on CentOS 5 (for maximum libc
and other system library compatibility). While they do install a custom
toolchain, Python and any extensions compiled in that environment are compiled
with GCC 4.8.2 (as of this writing). That's a GCC from 2013. A lot has
changed in compilers since 2013 and building Python and extensions with a
compiler released in 2018 should result in various benefits (faster code,
better warnings, etc).</p>
<p>If producing custom CPython builds for standalone distribution interests
you, you should take a look at how I coerced CPython to statically link
all extensions. Spoiler: it involves producing a custom-tailored
<code>Modules/Setup.local</code> file that bypasses <code>setup.py</code>, along with some
<code>Makefile</code> hacks. Because the build environment is deterministic and isolated
in a container, we can get away with some ugly hacks.</p>
<p>A statically linked <code>libpython</code> from which you can produce a standalone
binary embedding Python is only the first layer in the onion. The next layer
is how to handle the Python standard library.</p>
<p><code>libpython</code> only contains the code needed to run the core bits of the Python
interpreter. If we attempt to run a statically linked <code>python</code> executable
without the standard library in the filesystem, things fail pretty fast:</p>
<pre><code>$ rm -rf lib
$ bin/python
Could not find platform independent libraries &lt;prefix&gt;
Could not find platform dependent libraries &lt;exec_prefix&gt;
Consider setting $PYTHONHOME to &lt;prefix&gt;[:&lt;exec_prefix&gt;]
Fatal Python error: initfsencoding: Unable to get the locale encoding
ModuleNotFoundError: No module named 'encodings'

Current thread 0x00007fe9a3432740 (most recent call first):
Aborted (core dumped)
</code></pre>
<p>I'll spare you the details for the moment, but initializing the CPython
interpreter (via <code>Py_Initialize()</code> <em>requires</em> that parts of the Python
standard library be available). This means that in order to fulfill our dream
of a single file executable, we will need custom code that teaches the
embedded Python interpreter to load the standard library from within the
binary... somehow.</p>
<p>As far as I know, efficient embedded standard library handling without run-time
requirements does not exist in the current Python packaging/distribution
ecosystem. So, I had to devise something new.</p>
<p>Enter <a href="https://github.com/indygreg/pyoxidizer">PyOxidizer</a>. PyOxidizer is
a collection of Rust crates that facilitate building an embeddable Python
library, which can easily be added to an executable. We need <em>native</em> code
to interface with the Python C APIs in order to influence Python interpreter
startup. It is 2018 and Rust is a better C/C++, so I chose Rust for this
<em>driver</em> functionality instead of C. Plus, Rust's integrated build system
makes it easier to automate the integration of the custom Python interpreter
files into binaries.</p>
<p>The role of PyOxidizer is to take the pre-built Python interpreter files from
<a href="https://github.com/indygreg/python-build-standalone">python-build-standalone</a>,
combine those files with any other Python files needed to run an application,
and marry them to a Rust crate. This Rust crate can trivially be turned into
a self-contained executable containing a Python application. Or, it can be
combined with another Rust project. Or it can be emitted as a library and
integrated with a non-Rust application. There's a lot of flexibility by design.</p>
<p>The mechanism I used for embedding the Python standard library into a single
file executable without incurring explicit filesystem access at run-time is
(I believe) new, novel, and somewhat crazy. Let me explain how it works.</p>
<p>First, there are no <code>.so</code>/<code>.pyd</code> shared library compiled Python extensions
to worry about. This is because all compiled extensions are statically linked
into the Python interpreter. To the interpreter, they exist as
<a href="https://docs.python.org/3.7/library/importlib.html#importlib.machinery.BuiltinImporter">built-in modules</a>.
Typically, a CPython build will have some modules like <code>_abc</code>, <code>_io</code>, and
<code>sys</code> provided by <em>built-in modules</em>. Modules like <code>_json</code> exist as standalone
shared libraries that are loaded on demand. <code>python-build-standalone</code>'s
modifications to CPython's build system converts all these would-be standalone
shared libraries into <em>built-in modules</em>. (Because we distribute the object
files that compose the eventual <code>libpython</code>, it is possible to filter out
unwanted modules to cut down on binary size if you don't want to ship a
fully-featured Python interpreter.) Because there are no standalone shared
libraries providing Python modules, we don't have the problem of needing to
load a shared library to load a module, which would undermine our goal of
<em>no filesystem access to import modules</em>. And that's a good thing, too,
because <code>dlopen()</code> requires a path: you can't load a shared library from
a memory address. (Fun fact: there are hacks like
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=11767">dlopen_with_offset()</a>
that provide an API to load a library from memory, but they require a custom
libc. Google uses this approach for their internal single-file Python
application solution.)</p>
<p>From the <code>python-build-standalone</code> artifacts, PyOxidizer collects all files
belonging to the Python standard library (notably <code>.py</code> and <code>.pyc</code> files).
It also collects other source, bytecode, and resource files needed to run
a custom application.</p>
<p>The relevant files are assembled and serialized into data structures which
contain the names of the resources and their raw content. These data structures
are made available to Rust as <code>&amp;'static [u8]</code> variables (essentially a
<code>static void*</code> if you don't speak Rust).</p>
<p>Using the <a href="https://github.com/dgrunwald/rust-cpython">rust-cpython</a> crate,
PyOxidizer defines a custom Python extension module implemented purely in Rust.
When loaded, the module parses the data structures containing available
Python resource names and data into <code>HashMap&lt;&amp;str, &amp;[u8]&gt;</code> instances. In other
words, it builds a native mapping from resource name to a pointer to its raw
data. The Rust-implemented module exports to Python an API for accessing that
data. From the Python side, you do the equivalent of <code>MODULES.get_code('foo')</code>
to request the bytecode for a named Python module. When called, the Rust code
will perform the lookup and return a <code>memoryview</code> instance pointing to the
raw data. (The use of <code>&amp;[u8]</code> and <code>memoryview</code> means that embedded resource
data is loaded from its static, read-only memory location instead of copied
into a data structure managed by Python. This zero copy approach translates to
less overhead for importing modules. Although, the memory needs to be paged
in by the operating system. So on slow filesystems, reducing I/O and e.g.
compressing module data might be a worthwhile optimization. This can be a
future feature.) </p>
<p>Making data embedded within a binary available to a Python module is relatively
easy. I'm definitely not the first person to come up with this idea. What is
hard - and what I <em>might</em> be the first person to actually do - is how you make
the Python module importing mechanism load <em>all</em> standard library modules via
such a mechanism.</p>
<p>With a custom extension module built-in to the binary exposing module data,
it should <em>just</em> be a matter of registering a custom
<a href="https://docs.python.org/3.7/library/sys.html#sys.meta_path">sys.meta_path</a>
importer that knows how to load modules from that custom location. This
problem turns out to be quite hard!</p>
<p>The initialization of a CPython interpreter is - as I've learned - a bit
complex. A CPython interpreter must be initialized via <code>Py_Initialize()</code>
before any Python code can run. That means in order to modify <code>sys.meta_path</code>,
<code>Py_Initialize()</code> must finish.</p>
<p>A lot of activity occurs under the hood during initialization. Applications
embedding Python have very little control over what happens during
<code>Py_Initialize()</code>. You can change some superficial things like what
filesystem paths to use to bootstrap <code>sys.path</code> and what encodings to use
for stdio descriptors. But you can't really influence the core actions that are
being performed. And there's no mechanism to directly influence
<code>sys.meta_path</code> before an <code>import</code> is performed. (Perhaps there should be?)</p>
<p>During <code>Py_Initialize()</code>, the interpreter needs to configure the encodings
for the filesystem and the stdio descriptors. Encodings are loaded from
Python modules provided by the standard library. So, during the course of
<code>Py_Initialize()</code>, the interpreter needs to import some modules originally
backed by <code>.py</code> files. This creates a dilemma: if <code>Py_Initialize()</code>
needs to <code>import</code> modules in the standard library, the standard library
is backed by memory and isn't available to known importing mechanisms, and
there's no opportunity to configure a custom <code>sys.meta_path</code> importer
before <code>Py_Initialize()</code> runs, how do you teach the interpreter about
your custom module importer and the location of the standard library modules
needed by <code>Py_Initialize()</code>?</p>
<p>This is an extremely gnarly problem and it took me some hours and many false
leads to come up with a solution.</p>
<p>My first attempt involved the esoteric
<a href="https://docs.python.org/3/c-api/import.html#c.PyImport_FrozenModules">frozen modules</a>
feature. (This work predated the use of a custom data structure and module
containing modules data.) The Python interpreter has a
<code>const struct _frozen* PyImport_FrozenModules</code> data structure defining an
array of <em>frozen</em> modules. A <em>frozen</em> module is defined by its module
name and precompiled bytecode data (roughly equivalent to <code>.pyc</code> file
content). Partway through <code>Py_Initialize()</code>, the Python interpreter is able
to import modules. And one of the built-in importers that is automatically
registered knows how to load modules if they are in <code>PyImport_FrozenModules</code>!</p>
<p>I attempted to audit Python interpreter startup and find all modules
that were imported during <code>Py_Initialize()</code>. I then defined a custom
<code>PyImport_FrozenModules</code> containing these modules. In theory, the import
of these modules during <code>Py_Initialize()</code> would be handled by the
<a href="https://docs.python.org/3.7/library/importlib.html#importlib.machinery.FrozenImporter">FrozenImporter</a>
and everything would <em>just work</em>: if I were able to get <code>Py_Initialize()</code> to
complete, I'd be able to register a custom <code>sys.meta_path</code> importer
immediately afterwards and we'd be set.</p>
<p>Things did not go as planned.</p>
<p><code>FrozenImporter</code> doesn't fully conform to the
<a href="https://www.python.org/dev/peps/pep-0451/">PEP 451</a> requirements for
setting specific attributes on modules. Without these attributes, the
<code>from . import aliases</code> statement in <code>encodings/__init__.py</code> fails
because the importer is unable to resolve the relative module name. Derp.
One would think CPython's built-in importers would comply with PEP 451
and that all of Python's standard library could be imported as frozen modules.
But this is not the case! I was able to hack around this particular failure
by using an absolute import. But I hit another failure and did not want to
excavate that rabbit hole. Once I realized that <code>FrozenImporter</code> was lacking
mandated module attributes, I concluded that attempting to use <em>frozen modules</em>
as a general import-from-memory mechanism was not viable. Furthermore, the
C code backing <code>FrozenImporter</code> walks the <code>PyImport_FrozenModules</code> array and
does a string compare on the module name to find matches. While I didn't
benchmark, I was concerned that un-indexed scanning at import time would
add considerable overhead when hundreds of modules were in play. (The C code
backing <code>BuiltinImporter</code> uses the same approach and I do worry CPython's
imports of built-in extension modules is causing measurable overhead.)</p>
<p>With <em>frozen modules</em> off the table, I needed to find another way to inject
a custom module importer that was usable during <code>Py_Initialize()</code>. Because
we control the source Python interpreter, modifications to the source code
or even link-time modifications or run-time hacks like trampolines weren't
off the table. But I <strong>really</strong> wanted things to work out of the box because
I don't want to be in the business of maintaining patches to Python
interpreters.</p>
<p>My foray into <em>frozen modules</em> enlightened me to the craziness that is
the bootstrapping of Python's importing mechanism.</p>
<p>I remember hearing that the Python module importing mechanism used to be
written in C and was rewritten in Python. And I knew that the
<a href="https://docs.python.org/3.7/library/importlib.html">importlib</a> package
defined interfaces allowing you to implement your own importers, which
could be registered on
<a href="https://docs.python.org/3.7/library/sys.html#sys.meta_path">sys.meta_path</a>.
But I didn't know how all of this worked at the interpreter level.</p>
<p>The internal <a href="https://github.com/python/cpython/blob/08c2ba0717089662132af69bf5948d82277a8a69/Python/pylifecycle.c#L178">initimport()</a>
C function is responsible for initializing the module importing mechanism. It
does the equivalent of <code>import _frozen_importlib</code>, but using the
<a href="https://docs.python.org/3/c-api/import.html#c.PyImport_ImportFrozenModuleObject">PyImport_ImportFrozenModule()</a>
API. It then manipulates some symbols and calls <code>_frozen_importlib.install()</code>
with references to the <code>sys</code> and <code>imp</code> built-in modules. Later (in
<code>initexternalimport()</code>), a <code>_frozen_importlib_external</code> module is imported
and has code within it executed.</p>
<p>I was initially very confused by this because - while there are references
to <code>_frozen_importlib</code> and <code>_frozen_importlib_external</code> all over the
CPython code base, I couldn't figure out where the code for those modules
actually lived! Some sleuthing of the build directory eventually revealed
that the files <a href="https://github.com/python/cpython/blob/08c2ba0717089662132af69bf5948d82277a8a69/Lib/importlib/_bootstrap.py">Lib/importlib/_bootstrap.py</a>
and <a href="https://github.com/python/cpython/blob/08c2ba0717089662132af69bf5948d82277a8a69/Lib/importlib/_bootstrap_external.py">Lib/importlib/_bootstrap_external.py</a>
were <em>frozen</em> to the module names <code>_frozen_importlib</code> and
<code>_frozen_importlib_external</code>, respectively.</p>
<p>Essentially what is happening is the bulk of Python's import <em>machinery</em> is
implemented in Python (rather than C). But there's a chicken-and-egg
problem where you can't run just any Python code (including any <code>import</code>
statement) until the interpreter is partially or fully initialized.</p>
<p>When building CPython, the Python source code for <code>importlib._bootstrap</code>
and <code>importlib._bootstrap_external</code> are compiled to bytecode. This
bytecode is emitted to <code>.h</code> files, where it is exposed as a
<code>static char *</code>. This bytecode is eventually referenced by the
default <code>PyImport_FrozenModules</code> array, allowing the modules to be
imported via the frozen importer's C API, which bypasses the higher-level
importing mechanism, allowing it to work before the full importing
mechanism is initialized.</p>
<p><code>initimport()</code> and <code>initexternalimport()</code> both call Python functions in
the frozen modules. And we can clearly look at the source of the
corresponding modules and see the Python code do things like
<a href="https://github.com/python/cpython/blob/08c2ba0717089662132af69bf5948d82277a8a69/Lib/importlib/_bootstrap.py#L1158">register the default importers on <code>sys.meta_path</code></a>.</p>
<p>Whew, that was a long journey into the bowels of CPython's internals. How
does all this help with single file Python executables?</p>
<p>Well, the predicament that led us down this rabbit hole was there was no
way to register a custom module importer before <code>Py_Initialize()</code>
completes and before an <code>import</code> is attempted during said <code>Py_Initialize()</code>.</p>
<p>It took me a while, but I finally realized the frozen
<code>importlib._bootstrap_external</code> module provided the window I needed!
<code>importlib._bootstrap_external</code>/<code>_frozen_importlib_external</code> is <em>always</em>
executed during <code>Py_Initialize()</code>. So if you can modify this module's code,
you can run arbitrary code during <code>Py_Initialize()</code> and influence Python
interpreter configuration. And since <code>_frozen_importlib_external</code> is a frozen
module and the <code>PyImport_FrozenModules</code> array is writable and can be modified
before <code>Py_Initialize()</code> is called, all one needs to do is replace the
<code>_frozen_importlib</code> / <code>_frozen_importlib_external</code> bytecode in
<code>PyImport_FrozenModules</code> and you can run arbitrary code during Python
interpreter startup, before <code>Py_Initialize()</code> completes and before any
standard library imports are performed!</p>
<p>My solution to this problem is to concatenate some custom Python code to
<code>importlib/_bootstrap_external.py</code>. This custom code defines a
<code>sys.meta_path</code> importer that knows how to use our Rust-backed built-in
extension module to find and load module data. It redefines the <code>_install()</code>
function so that this custom importer is registered on <code>sys.meta_path</code>
when the function is called during <code>Py_Initialize()</code>. The <em>new</em> Python
source is compiled to bytecode and the <code>PyImport_FrozenModules</code> array is
modified at run-time to point to the modified <code>_frozen_importlib_external</code>
implementation. When <code>Py_Initialize()</code> executes its first standard library
import, module data is provided by the custom <code>sys.meta_path</code> importer,
which grabs it from a Rust extension module, which reads it from a
read-only data structure in the executable binary, which is converted
to a Python <code>memoryview</code> instance and sent back to Python for processing.</p>
<p>There's a bit of <em>magic</em> happening behind the scenes to make all of this
work. PyOxidizer attempts to hide as much of the gory details as possible.
From the perspective of an application maintainer, you just need to define
a minimal config file and it handles most of the low-level details. And there's
even a higher-level Rust API for configuring the embedded Python interpreter,
should you need it.</p>
<p><code>python-build-standalone</code> and <code>PyOxidizer</code> are still in their infancy.
They are very much alpha quality. I consider them technology previews more
than usable software at this point. But I think enough is there to demonstrate
the viability of using Rust as the build system and run-time glue to build
and distribute standalone applications embedding Python.</p>
<p>Time will tell if my utopian vision of zero-copy, no explicit filesystem
I/O for Python module imports will pan out. Others who have ventured into
this space have warned me that lots of Python modules rely on <code>__file__</code>
to derive paths to other resources, which are later <code>stat()</code>d and
<code>open()</code>d. <code>__file__</code> for in-memory modules doesn't exactly make sense
and can't be operated on like normal paths/files. I'm not sure what the
inevitable struggles to support these modules will lead to. Maybe we'll have
to extract things to temporary directories like other standalone Python
applications. Maybe <code>PyOxidizer</code> will take off and people will start using
the <a href="https://docs.python.org/3.7/library/importlib.html#importlib.abc.ResourceReader">ResourceReader</a>
API, which is apparently the proper way to do these things these days.
(Caveat: <code>PyOxidizer</code> doesn't yet implement this API but support is planned.)
Time will tell. I'm not opposed to gross hacks or writing more code as
needed.</p>
<p>Producing highly distributable and performant Python applications has been far
too difficult for far too long. My primary goal for PyOxidizer is to lower these
barriers. By leveraging Rust, I also hope to bring Python and Rust closer
together. I want to enable applications and libraries to effortlessly harness
the powers of both of these fantastic programming languages.</p>
<p>Again, <code>PyOxidizer</code> is still in its infancy. I anticipate a significant amount
of hacking over the holidays and hope to share updates in the weeks ahead. Until
then, please leave comments, watch the <a href="https://github.com/indygreg/PyOxidizer">project on GitHub</a>,
file issues for bugs and feature requests, etc and we'll see where things lead.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
