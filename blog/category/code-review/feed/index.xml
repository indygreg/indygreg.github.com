<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Gregory Szorc's Digital Home</title>
    <link>http://gregoryszorc.com/blog</link>
    <description>Rambling on</description>
    <pubDate>Mon, 10 Jan 2022 05:16:43 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Important Changes to MozReview</title>
      <link>http://gregoryszorc.com/blog/2015/05/29/important-changes-to-mozreview</link>
      <pubDate>Fri, 29 May 2015 16:20:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/29/important-changes-to-mozreview</guid>
      <description>Important Changes to MozReview</description>
      <content:encoded><![CDATA[<p>This was a busy week for MozReview! There are a number of changes people
need to be aware of.</p>
<h2>Support for Specifying Reviewers via Commit Messages</h2>
<p>MozReview will now parse <strong>r?gps</strong> syntax out of commit messages to
set reviewers for pushed commits.</p>
<p><a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/review-requests.html#specifying-reviewers-in-commit-messages">Read the docs</a>
for more information, including why we are preferring <strong>r?</strong> to <strong>r=</strong>.</p>
<p>Since it landed, a number of workflow concerns have been reported.
See the bug tree for
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1142251">bug 1142251</a>
before filing a bug to help avoid duplicates.</p>
<p>Thank Dan Minor for the feature!</p>
<h2>Review Attachment/Flag Per Commit</h2>
<p>Since the beginning of MozReview, there was one Bugzilla attachment /
review flag per commit series. This has changed to one attachment /
review flag per commit.</p>
<p>Before, you needed to grant <em>Ship It</em> on the parent/root review request
in order to r+ the MozReview review request. Now, you grant <em>Ship It</em>
on individual commits and these turn into individual r+ on Bugzilla.
To reinforce that reviewing the parent/root review request doesn't do
anything meaningful any more, the <em>Ship It</em> button and checkbox have been
removed from the parent/root review request.</p>
<p>The new model more closely maps to how code review in Bugzilla has
worked at Mozilla for ages. And, it is a superior workflow for
future workflows we're trying to enable.</p>
<p>We tried to run a one-time migration script to convert existing
parent/root attachments/review flags to per-commit attachments/flags.
However, there were issues. We will attempt again sometime next week.
In the interim, <strong>in-flight review requests may enter an inconsistent
state if they are updated</strong>. If a new push is performed, the old
parent/root attachment/review flag may linger and per-commit
attachments/flags will be created. This could be confusing. The
workaround is to manually clear the r? flag from the parent/root
attachment or wait for the migration script to run in a few days.</p>
<p>Mark Côté put in a lot of hard work to make this change happen.</p>
<h2>r? Flags Cleared After Review</h2>
<p>Before, submitting a review without granting <em>Ship It</em> wouldn't do
anything to the r? flag: the r? flag would linger.</p>
<p>Now, submitting review without granting <em>Ship It</em> will clear the r?
flag. We think the new default is better for the majority of users.
However, we recognize it isn't always wanted. There is a bug open to
provide a checkbox to keep the r? flag present.</p>
<h2>Metadata Added to Changesets</h2>
<p>If you update to the tip of the version-control-tools repository
(you should do this every week or so to stay fresh - use <em>mach
mercurial-setup</em> to do this automatically), metadata will automatically
be added to commits when working with MozReview-enabled repositories.</p>
<p>Specifically, we insert a hidden, unique, random ID into every changeset.
This ID can be used to map commits to each other. We don't use this ID
yet. But we have plans.</p>
<p>A side-effect of this change is that you can no longer push to MozReview
if you have uncommitted local changes. If this is annoying, use <em>hg
shelve</em> and <em>hg unshelve</em> to create and undo temporary commits. If this
is too annoying, complain by filing a bug and we can look into doing
this automatically as part of pushing.</p>
<h2>What's Next?</h2>
<p>We're actively working on more workflow enhancements to make MozReview
an even more compelling experience.</p>
<p>I'm building a web service to query file metadata from moz.build files.
This will allow MozReview to automatically file bugs in proper
components based on what files changed. Once code reviewer metadata
is added to moz.build files, it will enable us to assign reviewers
automatically as well. The end goal here is to lower the number of steps
needed to turn changed code into a landing. This will be useful when we
turn GitHub pull requests into MozReview review requests (random GitHub
contributors shouldn't need to know who to flag for review, nor should
they be required to file a bug if they write some code). Oh year, we're
working on integrating GitHub pull requests.</p>
<p>Another area of focus is better commit tracking and partially landed
series. I have preliminary patches for automatically adding review URL
annotations to commit messages. This will enable people to easily go
from commit (message) to MozReview, without having to jump through
Bugzilla. This also enables better commit tracking. If you e.g.
perform complicated history rewriting, the review URL annotation will
enable the MozReview server to better map previously-submitted commits
to existing review requests. Partially landed series will enable
commits to land as soon as they are reviewed, without having to wait
on the entire series. It's my strong belief that if a commit is granted
review, it should land as soon as possible. This helps prevent bit rot
of ready-to-land commits. Landings also make people feel better because
you feel like you've accomplished something. Positive feedback loops are
good.</p>
<p>Major work is also being done to overhaul the web UI. The commit series
view (which is currently populated via XHR) will soon be generated on
the server and served as part of the page. This should make pages load a
bit faster. And, things should be prettier as well.</p>
<p>And, of course, work is being invested into Autoland. Support for
submitting pushes to Try landed a few weeks ago. Having Autoland
actually land reviewed commits is on the radar.</p>
<p>Exciting times are ahead. Please continue to provide feedback. If you
see something, <a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/hacking-mozreview.html#filing-bugs">say something</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Commit Part Numbers and MozReview</title>
      <link>http://gregoryszorc.com/blog/2015/01/27/commit-part-numbers-and-mozreview</link>
      <pubDate>Tue, 27 Jan 2015 20:17:00 PST</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/01/27/commit-part-numbers-and-mozreview</guid>
      <description>Commit Part Numbers and MozReview</description>
      <content:encoded><![CDATA[<p>It is common for commit messages in Firefox to contains strings like
<em>Part 1</em>, <em>Part 2</em>, etc. See
<a href="https://hg.mozilla.org/projects/build-system/pushloghtml?changeset=5cb8bcab09cc">this push</a>
for <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=784841">bug 784841</a>
for an extreme multi-part example.</p>
<p>When code review is conducted in Bugzilla, these identifiers are
necessary because Bugzilla orders attachments/patches in the order they
were updated or their patch title (I'm not actually sure!). If part
numbers were omitted, it could be very confusing trying to figure out
which order patches should be applied in.</p>
<p>However, when code review is conducted in
<a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html">MozReview</a>,
<strong>there is no need for explicit part numbers to convey ordering</strong> because
the ordering of commits is implicitly defined by the repository history
that you pushed to MozReview!</p>
<p>I argue that if you are using MozReview, you should stop writing <em>Part
N</em> in your commit messages, as it provides little to no benefit.</p>
<p>I, for one, welcome this new world order: I've previously wasted a lot
of time rewriting commit messages to reflect new part ordering after
doing history rewriting. With MozReview, that overhead is gone and I
barely pay a penalty for rewriting history, something that often
produces a more reviewable series of commits and makes reviewing
and landing a complex patch series significantly easier.</p>]]></content:encoded>
    </item>
    <item>
      <title>Automatic Python Static Analysis on MozReview</title>
      <link>http://gregoryszorc.com/blog/2015/01/24/automatic-python-static-analysis-on-mozreview</link>
      <pubDate>Sat, 24 Jan 2015 23:30:00 PST</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/01/24/automatic-python-static-analysis-on-mozreview</guid>
      <description>Automatic Python Static Analysis on MozReview</description>
      <content:encoded><![CDATA[<p>A bunch of us were in Toronto last week hacking on MozReview.</p>
<p>One of the cool things we did was deploy a bot for performing Python
static analysis. If you submit some .py files to MozReview, the bot
should leave a review. If it finds violations (it uses
<a href="https://flake8.readthedocs.org/">flake8</a> internally), it will open
an issue for each violation. It also leaves a comment that should
hopefully give enough detail on how to fix the problem.</p>
<p>While we haven't done much in the way of performance optimizations,
the bot typically submits results less than 10 seconds after the review
is posted! So, a human should never be reviewing Python that the bot
hasn't seen. This means you can stop thinking about style nits and start
thinking about what the code does.</p>
<p>This bot should be considered an alpha feature. The code for the bot
isn't even checked in yet. We're running the bot against production
to get a feel for how it behaves. If things don't go well, we'll turn
it off until the problems are fixed.</p>
<p>We'd like to eventually deploy C++, JavaScript, etc bots. Python won out
because it was the easiest to integrate (it has sane and efficient
tooling that is compatible with Mozilla's code bases - most existing
JavaScript tools won't work with Gecko-flavored JavaScript, sadly).</p>
<p>I'd also like to eventually make it easier to locally run the same
static analysis we run in MozReview. Addressing problems locally before
pushing is a no-brainer since it avoids needless context switching from
other people and is thus better for productivity. This will come in
time.</p>
<p>Report issues in #mozreview or in the Developer Services :: MozReview
Bugzilla component.</p>]]></content:encoded>
    </item>
    <item>
      <title>Bugzilla and the Future of Firefox Development</title>
      <link>http://gregoryszorc.com/blog/2015/01/16/bugzilla-and-the-future-of-firefox-development</link>
      <pubDate>Fri, 16 Jan 2015 10:50:00 PST</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Bugzilla]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/01/16/bugzilla-and-the-future-of-firefox-development</guid>
      <description>Bugzilla and the Future of Firefox Development</description>
      <content:encoded><![CDATA[<p><a href="https://bugzilla.mozilla.org">Bugzilla</a> has played a major role in the
Firefox development process for over 15 years. <strong>With upcoming changes
to how code changes to Firefox are submitted and reviewed, I think it is
time to revisit the central role of Bugzilla and bugs in the Firefox
development process.</strong> I know this is a contentious thing to say. Please,
gather your breath, and calmly read on as I explain why I believe this.</p>
<p>The current Firefox change process defaults to requiring a Bugzilla bug
for everything. It is rare (and from my experience frowned upon) when a
commit to Firefox doesn't reference a bug number. We've essentially made
Bugzilla and a bug prerequisites for changing anything in the Firefox
version control repository. For the remainder of this post, I'm going to
say that we <em>require</em> a bug for any change, even though that statement
isn't technically accurate. Also, when I say <em>Bugzilla</em>, I mean
<em>bugzilla.mozilla.org</em>, not the generic project.</p>
<p>Before I go on, let's boil the Firefox change process down to basics.</p>
<p>At the heart of any change to the Firefox source repository is a diff.
The diff (a representation of the differences between a set of files)
is the smallest piece of data necessary to represent a change to the
Firefox code. I argue that anything more than the vanilla diff is
overhead and could contribute to
<a href="/blog/2015/01/09/firefox-contribution-process-debt/">process debt</a>.
Now, there is some essential overhead. Version control tools supplement
diffs with metadata, such as the author, commit message, and date. Mozilla
has also instituted a near-mandatory code review policy, where changes
need to be signed off by a set of trusted individuals. I view both of
these additions to the vanilla diff as essential for Firefox development
and non-negotiable. Therefore, the bare minimum requirements for changing
Firefox code are a diff plus metadata (a commit/patch) and (almost
always) a review/sign-off. That's it. Notably absent from this list is a
Bugzilla bug. <strong>I argue that a bug is not strictly required to
change Firefox.</strong> Instead, we've instituted a near-universal policy
that we should have bugs. We've <strong>chosen</strong> to add overhead and process
debt - interaction with Bugzilla - to our Firefox change process.</p>
<p>Now, this choice to require all changes be associated with bugs has its
merits. Bugs provide excellent anchor points for historical context and
for additional information after the change has been committed and is
forever set in stone in the repository (commits are immutable in
Mercurial and Git and you can't easily attach metadata to the commit
after the fact). Bugs are great to track relationships between different
problems or units of work. Bugs can even be used to track progress
towards a large feature. Bugzilla components also provide a decent
mechanism to follow related activity. There's also a lot of tooling and
familiar process standing on top of the Bugzilla <em>platform</em>. There's a
lot to love here and I don't want diminish the importance of all these
things.</p>
<p><strong>When I look to the future, I see a world where the current, central
role of Bugzilla and bugs as part of the Firefox change process begin to
wane.</strong> I see a world where the benefits to maintaining our current
Bugzilla-centric workflow start to erode and the cost of maintaining
it becomes higher and harder to justify. You actually don't have to look
too far into the future: that world is already here and I've already
started to feel the pains of it.</p>
<p>A few days ago, I blogged about
<a href="/blog/2015/01/10/code-first-and-the-rise-of-the-dvcs-and-github/">GitHub and its code first approach to change</a>.
That post was spun off from an early draft of this post (as were the
posts about <a href="/blog/2015/01/09/firefox-contribution-process-debt/">Firefox contribution debt</a>
and <a href="/blog/2015/01/12/utilizing-github-for-firefox-development/">utilizing GitHub for Firefox development</a>).
I wanted to introduce the concept of <em>code first</em> because it is
central to my justification for changing how we do things. In summary,
<strong>code first capitalizes on the fact that any change to software
involves code and therefore puts code front and center in the change
process.</strong> (In hindsight, I probably should have used the term <em>code
centric</em>, because that's how I want people to think about things.) So
how does <em>code first</em> relate to Bugzilla and Firefox development?</p>
<p>Historically, code review has occurred in Bugzilla: upload a patch to
Bugzilla, ask for review, and someone will look at it. And, since
practically every change to Firefox requires review, you need a bug in
Bugzilla to contain that review. Thus, <strong>one way to view a bug is as a
vehicle for code review</strong>. Not every bug is <em>just</em> a code review, of
course. But a good number of them are.</p>
<p>The only constant is change. And <strong>the way Mozilla conducts code review
for changes to Firefox (and other projects) is changing</strong>. We now have
<a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html">MozReview</a>,
a code review tool that is <em>not Bugzilla</em>. If we start accepting GitHub
pull requests, we <em>may</em> perform reviews exclusively on GitHub, another
tool that is <em>not Bugzilla</em>.</p>
<p>(Before I go on, I want to quickly point out that MozReview is nowhere
close to its final form. Parts of MozReview are pretty bad right now.
The maintainers all know this and we have plans to fix it. We'll be in
Toronto all of next week working on it. If you don't think you'll ever
use it because parts are bad today, I ask you to withhold judgement for
a few more months.)</p>
<p>In case you were wondering, the question on whether Bugzilla should
always be used for code review for Firefox has been answered and that
answer is <em>no</em>. People, including maintainers of Bugzilla, realized
that better-than-Splinter/Bugzilla code review tools exist and that
continuing to invest time to develop Bugzilla/Splinter into a
best-in-class code review tool would be better spent <em>integrating</em>
Bugzilla with an existing tool. This is why we now have a
<a href="https://www.reviewboard.org/">Review Board</a> based code review tool -
MozReview - integrated with Bugzilla. If you care about code quality and
more powerful workflows, you should be rejoicing at this because
<a href="/blog/2014/10/27/implications-of-using-bugzilla-for-firefox-patch-development/">the implementation of code review in Bugzilla does not maximize optimal outcomes</a>.</p>
<p>The world we're moving to is one where code review occurs outside of
Bugzilla. This raises an important question: <strong>if Bugzilla was being used
primarily as a vehicle for code review, what benefit and/or role should
Bugzilla play when code review is conducted outside of Bugzilla?</strong></p>
<p><strong>I posit that there are a class of bugs that won't need to exist
going forward because bugs will provide little to no value.</strong> Put
another way, I believe that a growing number of commits to the Firefox
repository won't reference bugs.</p>
<p>Come with me on a journey to the future.</p>
<p>MozReview is purposefully being designed in a code and repository
centric way. To initiate the formal process for considering a change to
code, you push to a Mercurial (or Git!) repository. This could be
directly to Mozilla's review repository. If I have my way, this could
even be kicked off by submitting a pull request on GitHub or Bitbucket.
No Bugzilla attachment uploading here: our systems talk in terms of
repositories and commits. Again, this is by design: we don't want
submitting code to Mozilla to be any harder than <em>hg push</em> or <em>git
push</em> so as to not introduce <em>process debt</em>. If you have code, you'll be
able to send it to us.</p>
<p>In the near future, MozReview will stop cross-posting detailed review
updates to Bugzilla. Instead, we'll use Review Board's e-mail feature
to send its flavor of emails. These will have rich HTML content (or
plain text if you insist) and will provide a better experience
than Bugzilla ever will. We'll adopt the model of tools like
Phabricator and GitHub and only post summaries or links of activity,
not full content, to bugs. You may be familiar with the concept as
applied to the web: it's called hyperlinking.</p>
<p>Work is being invested into Autoland. Autoland is an automated landing
queue that pushes/lands commits semi-automatically once they are ready
(have review, pass automation, etc). Think of Autoland as a bot that
does all the labor intensive and menial actions around pushing that
you do now. I believe Autoland will eventually handle near 100% of
pushes to the Firefox repository. And, if I have my way, Autoland will
result in the abolishment of <em>integration branches</em> and merge commits in
the Firefox repository. Good riddance.</p>
<p>MozReview and Autoland will be highly integrated. MozReview will be the
primary user interface for interacting with Autoland. (Some of this
should be in place by the end of the quarter.)</p>
<p>In this world, MozReview and its underlying version control repositories
essentially become a <em>database</em> of all submitted, pending, and discarded
commits to Firefox. The metaphorical <em>primary keys</em> of this <em>database</em>
are not bug numbers: they are code/commits. (Code first!) Some of the
flags stored in this <em>database</em> tell Autoland what it should do. And the
MozReview user interface (and API) provide a mechanism into controlling
those flags.</p>
<p>Landing a change in Firefox will be initiated by a simple action such as
clicking a checkbox in MozReview. (That could even be the <em>Grant Review</em>
checkbox.) Commits cleared for landing will be picked up by
Autoland and eventually automatically pushed to the Firefox repository
(assuming the build and test automation is happy, of course). Once
Autoland takes control, humans are just passengers. We won't be bothered
with menial tasks like updating the commit message to reflect a review
was performed: this will happen automatically inside MozReview or
Autoland. (Although, there's a chance we may adopt some PGP-based
signing to more strongly convey review for some code changes in order to
facilitate stronger auditing and trust guarantees. Stay tuned.)
Likewise, if a commit becomes associated with a bug, we can add that
metadata to the commit before it is landed, no human involvement
necessary beyond specifying the link in the MozReview web UI (or API).
Autoland/MozReview will close review requests and/or bugs automatically.
(Are you excited about performing less work yet?)</p>
<p>When commits are added to MozReview, <strong>MozReview will read metadata from
the repository they came from to automatically determine an appropriate
reviewer</strong>. (We <a href="https://groups.google.com/d/msg/mozilla.dev.platform/iXr70VgapWk/GkTCcKRjNi8J">plan</a>
to leverage moz.build files for this in the case of Firefox.) This
should eliminate a lot of <em>process debt</em> around choosing a reviewer.
<strong>Similar metadata will also be used to determine what Bugzilla component
a change is related to, static analysis rules to use to critique the
phsyical structure of the change, and even automation jobs that should
be executed given the set of files that changed.</strong> The use of this
metadata will erode significant <em>process debt</em> around the change
contribution workflow.</p>
<p>As commits are pushed into MozReview/Autoland, the systems will be
intelligent about automatically tracking dependencies and facilitating
complex development workflows that people run into on a daily basis.</p>
<p>If I create a commit on top of someone else's commit that hasn't been
checked in yet, MozReview will detect the dependency between
my changes and the parent ones. This is an advantage of being code
first: by interfacing with repositories rather than patch files, you
have an explicit dependency graph embedded in the repository commit DAG
that can be used to aid machines in their activities.</p>
<p>It will also be possible to partially land a series of commits. If I get
review on the first 5 of 10 commits but things stall on commit 6, I can ask
Autoland to land the already-reviewed commits so they don't get bit
rotted and so you have partial progress (psychological studies show that
a partial reward for work results in greater happiness through a sense
of accomplishment).</p>
<p>Since initiating actions in MozReview is light weight (just <em>hg push</em>),
itch scratching is encouraged. I don't know about you, but in the course
of working on the Firefox code base, I frequently find myself wanting to
make small, 15-30s changes to fix something really minor. In today's world,
the overhead for these small changes is often high. I need to upload a
separate patch to Bugzilla. Sometimes I even need to create a new bug to
hold that patch. If that patch depends on other work I did, I need to
set up bug dependencies then worry about landing everything in the right
order. All of a sudden, the overhead isn't worth it and my positive
intentions go unacted on. Multiplied by hundreds of developers over
many years, and you can imagine the effect on software quality. With
MozReview, the overhead for itch scratching like this is minor. Just
make a small commit, push, and the system will sort everything out.
(These small commits are where I think a <em>bugless</em> process really
shines.)</p>
<p>This future world revolves around code and commits and operations on
them. While <em>MozReview</em> has <em>review</em> in its name, it's more than a
review tool: it's a <em>database</em> and interface to code and its state.</p>
<p><strong>In this code first world, Bugzilla performs an ancillary role.</strong>
Bugzilla is still there. Bugs are still there. MozReview review requests
and commits <em>link</em> to bugs. But it is the code, not bugs, that are king.
If you want to do anything with code, you interact with the code
tools. And Bugzilla is not one of them.</p>
<p>Another way of looking at this is that nearly everything involving code
or commits becomes excised from Bugzilla. This would relegate Bugzilla
to, well, an issue/bug tracker. And - ta da - that's something it excels
at since that's what it was originally designed to do! MozReview will
provide an adequate platform to discuss code (a platform that Bugzilla
provides today since it hosts code review). So if <em>not Bugzilla</em>
tools are handling everything related to code, do you really need a bug
any more?</p>
<p>This is the future we're trying to build with MozReview and Autoland.
And this is why I think bugs and Bugzilla will play a less central role
in the development process of Firefox in the future.</p>
<p>Yes, there are many consequences and concerns about making this shift.
You would be rational to be skeptical and doubt that this is the right
thing to do. I have another post in the works that attempts to outline
some common conerns and propose solutions to many of them. Before writing
a long comment pointing out every way in which this will fail to work,
I encourage you to wait for that post to be published. Stay tuned.</p>]]></content:encoded>
    </item>
    <item>
      <title>The Mozlandia Tree Outage and Code Review</title>
      <link>http://gregoryszorc.com/blog/2014/12/04/the-mozlandia-tree-outage-and-code-review</link>
      <pubDate>Thu, 04 Dec 2014 08:40:00 PST</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2014/12/04/the-mozlandia-tree-outage-and-code-review</guid>
      <description>The Mozlandia Tree Outage and Code Review</description>
      <content:encoded><![CDATA[<p>You may have noticed the Firefox trees
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1107156">were closed</a>
for the better part of yesterday.</p>
<p>Long story short, a file containing URLs for Firefox installers was
updated to reference https://ftp.mozilla.org/ from
http://download-installer.cdn.mozilla.net/. The original, latter
host is a CDN. The former is not. When thousands of clients started
hitting ftp.mozilla.org, it overwhelmed the servers and network,
causing timeouts and other badness.</p>
<p>The change in question was accidental. It went through code review.
From a code change standpoint, procedures were followed.</p>
<p>It is tempting to point fingers at the people involved. However, I
want us to consider placing blame elsewhere: on the code review
tool.</p>
<p>The diff being reviewed was to change the Firefox version number
from 32.0 to 32.0.3. If you were asked to review this
patch, I'm guessing your eyes would have glanced over everything in the
URL except the version number part. I'm pretty sure mine would have.</p>
<p>Let's take a look at what the reviewer saw in Bugzilla/Splinter (click
to see full size):</p>
<p><a href="/images/intraline-splinter.png">
<img src="/images/intraline-splinter.png" width="600" />
</a></p>
<p>And here is what the reviewer would have seen had the review been
conducted in MozReview:</p>
<p><a href="/images/intraline-reviewboard.png">
<img src="/images/intraline-reviewboard.png" width="600">
</a></p>
<p>Which tool makes the change of hostname more obvious? Bugzilla/Splinter
or MozReview?</p>
<p><strong>MozReview's support for intraline diffs more clearly draws attention to
the hostname change. I posit that had this patch been reviewed with
MozReview, the chances are greater we wouldn't have had a network
outage yesterday.</strong></p>
<p>And it isn't just intraline diffs that make Splinter/Bugzilla a
sub-optimal code review tool. I recently blogged about the
<a href="/blog/2014/10/27/implications-of-using-bugzilla-for-firefox-patch-development/">numerous ways that using Bugzilla for code revie results in harder
reviews and buggier
code</a>.
Every day we continue using Bugzilla/Splinter instead of investing in
better code review tools is a day severe bugs like this can and will
slip through the cracks.</p>
<p>If there is any silver lining to this outage, I hope it is that we need
to double down on our investment in developer tools, particularly code
review.</p>]]></content:encoded>
    </item>
    <item>
      <title>Soft Launch of MozReview</title>
      <link>http://gregoryszorc.com/blog/2014/10/30/soft-launch-of-mozreview</link>
      <pubDate>Thu, 30 Oct 2014 11:15:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2014/10/30/soft-launch-of-mozreview</guid>
      <description>Soft Launch of MozReview</description>
      <content:encoded><![CDATA[<p>We performed a soft launch of MozReview: Mozilla's new code review tool
yesterday!</p>
<p>What does that mean? How do I use it? What are the features?
How do I get in touch or contribute? These are all great questions.
The answers to those and more can all be found in the
<a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html">MozReview documentation</a>.
If they aren't, it's a bug in the documentation. File a bug or submit a
patch. Instructions to do that are in the documentation.</p>]]></content:encoded>
    </item>
    <item>
      <title>Implications of Using Bugzilla for Firefox Patch Development</title>
      <link>http://gregoryszorc.com/blog/2014/10/27/implications-of-using-bugzilla-for-firefox-patch-development</link>
      <pubDate>Mon, 27 Oct 2014 15:27:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Bugzilla]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2014/10/27/implications-of-using-bugzilla-for-firefox-patch-development</guid>
      <description>Implications of Using Bugzilla for Firefox Patch Development</description>
      <content:encoded><![CDATA[<p>Mozilla is very close to rolling out a new
<a href="http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview.html">code review tool based on Review Board</a>.
When I became involved in the project, I viewed it as an opportunity to
start from a clean slate and design the ideal code development workflow
for the average Firefox developer. When the design of the code review
experience was discussed, I would push for decisions that were
compatible with my utopian end state.</p>
<p>As part of formulating the ideal workflows and design of the new tool,
I needed to investigate why we do things the way we do, whether they are
optimal, and whether they are necessary. As part of that, I spent a lot
of time thinking about Bugzilla's role in shaping the code that goes into
Firefox. This post is a summary of my findings.</p>
<p>The primary goal of this post is to dissect the practices that Bugzilla
influences and to prepare the reader for the potential to reassemble the
pieces - to change the workflows - in the future, primarily around
Mozilla's new code review tool. By showing that Bugzilla has influenced
the popularization of what I consider non-optimal practices, it is my
hope that readers start to question the existing processes and open up
their mind to change.</p>
<p>Since the impetus for this post in the near deployment of Mozilla's new
code review tool, many of my points will focus on code review.</p>
<p>Before I go into my findings, I'd like to explicitly state that while
many of the things I'm about to say may come across as negativity
towards Bugzilla, my intentions are not to put down Bugzilla or the
people who maintain it. Yes, there are limitations in Bugzilla. But I
don't think it is correct to point fingers and blame Bugzilla or its
maintainers for these limitations. I think we got where we are following
years of very gradual shifts. I don't think you can blame Bugzilla for
the circumstances that led us here. Furthermore, Bugzilla maintainers
are quick to admit the faults and limitations of Bugzilla. And, they are
adamant about and instrumental in rolling out the new code review tool,
which shifts code review <em>out</em> of Bugzilla. Again, my intent is not to
put down Bugzilla. So please don't direct ire that way yourself.</p>
<p>So, let's drill down into some of the implications of using Bugzilla.</p>
<h2>Difficult to Separate Contexts</h2>
<p>The stream of changes on a bug in Bugzilla (including review comments)
is a flat, linear list of plain text comments. This works great when the
activity of a bug follows a nice, linear, singular topic flow. However,
real bug activity does not happen this way. All but the most trivial bugs
usually involve multiple points of discussion. You typically have
discussion about what the bug is. When a patch comes along, reviewer
feedback comes in both high-level and low-level forms. Each
item in each group is its own logical discussion thread. When patches
land, you typically have points of discussion tracking the state of this
patch. Has it been tested, does it need uplift, etc.</p>
<p>Bugzilla has things like keywords, flags, comment tags, and the
whiteboard to enable some isolation of these various contexts. However,
you still have a flat, linear list of plain text comments that contain
the meat of the activity. It can be extremely difficult to follow these
many interleaved logical threads.</p>
<p>In the context of code review, lumping all review comments into the same
linear list adds overhead and undermines the process of landing the
highest-quality patch possible.</p>
<p>Review feedback consists of both high-level and low-level comments.
High-level would be things like architecture discussions. Low-level
would be comments on the code itself. When these two classes of comments
are lumped together in the same text field, I believe it is easy to
lose track of the high-level comments and focus on the low-level. After
all, you may have a short paragraph of high-level feedback right next to
a mountain of low-level comments. Your eyes and brain tend to gravitate
towards the larger set of more concrete low-level comments because you
sub-consciously want to fix your problems and that large mass of text
represents more problems, easier problems to solve than the shorter and
often more abstract high-level summary. You want instant gratification
and the pile of low-level comments is just too tempting to pass up. We
have to train ourselves to temporarily ignore the low-level comments and
focus on the high-level feedback. This is very difficult for some people.
It is not an ideal disposition.
<a href="http://benjamin.smedbergs.us/blog/2014-10-22/how-i-do-code-reviews-at-mozilla/">Benjamin Smedberg's recent post on code
review</a>
indirectly talks about some of this by describing his rational
approach of tackling high-level first.</p>
<p>As review iterations occur, the bug devolves into a mix of comments
related to high and low-level comments. It thus becomes harder and
harder to track the current high-level state of the feedback, as they
must be picked out from the mountain of low-level comments. If you've
ever inherited someone else's half-finished bug, you know what I'm
talking about.</p>
<p>I believe that Bugzilla's threadless and contextless comment flow
disposes us towards focusing on low-level details instead of the
high-level. I believe that important high-level discussions aren't
occurring at the rate they need and that technical debt increases as a
result.</p>
<h2>Difficulty Tracking Individual Items of Feedback</h2>
<p>Code review feedback consists of multiple items of feedback. Each one is
related to the review at hand. But oftentimes each item can be
considered independent from others, relevant only to a single line or
section of code. Style feedback is one such example.</p>
<p>I find it helps to model code review as a tree. You start with one thing
you want to do. That's the root node. You split that thing into multiple
commits.  That's a new layer on your tree. Finally, each comment on those
commits and the comments on those comments represent new layers to the tree.
Code review thus consists of many related, but independent branches, all
flowing back to the same central concept or goal. There is a one to many
relationship at nearly every level of the tree.</p>
<p>Again, Bugzilla lumps all these individual items of feedback into a
linear series of flat text blobs. When you are commenting on code, you
do get some code context printed out. But everything is plain text.</p>
<p>The result of this is that tracking the progress on individual items of
feedback - individual branches in our conceptual tree - is difficult. Code
authors must pore through text comments and manually keep an inventory
of their progress towards addressing the comments. Some people copy the
review comment into another text box or text editor and delete items once
they've fixed them locally! And, when it comes time to review the new
patch version, reviewers must go through the same exercise in order to
verify that all their original points of feedback have been adequately
addressed! You've now redundantly duplicated the feedback tracking
mechanism among at least two people. That's wasteful in of itself.</p>
<p>Another consequence of this unstructured feedback tracking mechanism is
that points of feedback tend to get lost. On complex reviews, you may be
sorting through dozens of individual points of feedback. It is extremely
easy to lose track of something. This could have disastrous
consequences, such as the accidental creation of a 0day bug in Firefox.
OK, that's a worst case scenario. But I know from experience that review
comments can and do get lost. This results in new bugs being filed,
author and reviewer double checking to see if other comments were not
acted upon, and possibly severe bugs with user impacting behavior. In
other words, this unstructured tracking of review feedback tends to lessen
code quality and is thus a contributor to technical debt.</p>
<h2>Fewer, Larger Patches</h2>
<p>Bugzilla's user interface encourages the writing of fewer, larger
patches. (The opposite would be many, smaller patches - sometimes
referred to as <em>micro commits</em>.)</p>
<p>This result is achieved by a user interface that handles multiple
patches so poorly that it effectively discourages that approach, driving
people to create larger patches.</p>
<p>The stream of changes on a bug (including review comments) is
a flat, linear list of plain text comments. This works great when
the activity of a bug follows a nice, linear flow. However, reviewing
multiple patches doesn't work in a linear model. If you attach multiple
patches to a bug, the review comments and their replies for all the
patches will be interleaved in the same linear comment list. This
flies in the face of the reality that each patch/review is logically
its own thread that deserves to be followed on its own. The end result
is that it is extremely difficult to track what's going on in each
patch's review. Again, we have different contexts - different branches
of a tree - all living in the same flat list.</p>
<p>Because conducting review on separate patches is so painful, people are
effectively left with two choices: 1) write a single, monolithic patch
2) create a new bug. Both options suck.</p>
<p>Larger, monolithic patches are harder and slower to review. Larger
patches require much more cognitive load to review, as the reviewer
needs to capture the entire context in order to make a review
determination. This takes more time. The increased surface area of the
patch also increases the liklihood that the reviewer will find something
wrong and will require a re-review. The added complexity of a larger
patch also means the chances of a bug creeping in are higher, leading
to more bugs being filed and more reviews later. The more review cycles
the patch goes through, the greater the chances it will suffer from bit
rot and will need updating before it lands, possibly incurring yet more
rounds of review. And, since we measure progress in terms of code
landing, the delay to get a large patch through many rounds of review
makes us feel lethargic and demotivates us. <strong>Large patches have
intrinsic properties that lead to compounding problems and increased
development cost.</strong></p>
<p>As bad as large patches are, they are roughly in the same badness range
as the alternative: creating more bugs.</p>
<p>When you create a new bug to hold the context for the review of an
individual commit, you are doing a lot of things, very few of them
helpful. First, you must create a new bug. There's overhead to do
that. You need to type in a summary, set up the bug dependencies,
CC the proper people, update the commit message in your patch, upload
your patch/attachment to the new bug, mark the attachment on the old
bug obsolete, etc. This is arguably tolerable, especially with tools
that can automate the steps (although I don't believe there is a
single tool that does all of what I mentioned automatically). But the
badness of multiple bugs doesn't stop there.</p>
<p><strong>Creating multiple bugs fragments the knowledge and history of your
change and diminishes the purpose of a bug.</strong> You got in the situation
of creating multiple bugs because you were working on a <em>single logical
change</em>. It just so happened that you needed/wanted multiple
commits/patches/reviews to represent that singular change. That initial
change was likely tracked by a single bug. And now, because of
Bugzilla's poor user interface around mutliple patch reviews, you now
find yourself creating yet another bug. Now you have two bug
numbers - two identifiers that look identical, only
varying by their numeric value - referring to the same logical thing.
We've started with a single bug number referring to your logical
change and created what are effectively sub-issues, but allocated them
in the same namespace as <em>normal bugs</em>. We've diminished the importance
of the average bug. We've introduced confusion as to where one should go
to learn about this single, logical change. <em>Should I go to bug X or bug
Y?</em> Sure, you can likely go to one and ultimately find what you were
looking for. But that takes more effort.</p>
<p><strong>Creating separate bugs for separate reviews also makes refactoring
harder.</strong> If you are going the micro commit route, chances are you do
a lot of history rewriting. Commits are combined. Commits are split.
Commits are reordered. And if those commits are all mapping to
individual bugs, you potentially find yourself in a huge mess. Combining
commits might mean resolving bugs as duplicates of each other. Splitting
commits means creating yet another bug. And let's not forget about
managing bug dependencies. Do you set up your dependencies so you have a
linear, waterfall dependency corresponding to commit order? That
logically makes sense, but it is hard to keep in sync. Or, do you
just make all the <em>review bugs</em> depend on a single parent bug? If you do
that, how do you communicate the order of the patches to the reviewer?
Manually? That's yet more overhead. History rewriting - an operation
that modern version control tools like Git and Mercurial have enabled
to be a lightweight operation and users love because it doesn't
constrain them to pre-defined workflows - thus become much more costly.
The cost may even be so high that some people forego rewriting completely,
trading their effort for some poor reviewer who has to inherit a series of
patches that isn't organized as logically as it could be. Like larger
patches, this increases cognitive load required to perform reviews
and increases development costs.</p>
<p>As you can see, reviewing multiple, smaller patches with Bugzilla often
leads to a horrible user experience. So, we find ourselves writing
larger, monolithic patches and living with their numerous
deficiencies. At least with monolithic patches we have a predictable
outcome for how interaction with Bugzilla will play out!</p>
<p><strong>I have little doubt that large patches (whose existence is influenced
by the UI of Bugzilla) slows down the development velocity of Firefox.</strong></p>
<h2>Commit Message Formatting</h2>
<p>The heavy involvement of Bugzilla in our code development
lifecycle has influenced how we write commit messages. Let's start with
the obvious example. Here is our standard commit message format for
Firefox:</p>
<p>Bug 1234 - Fix some feature foo; r=gps</p>
<p>The bug is right there at the front of the commit message. That
prominent placement is effectively saying <strong>the bug number is the most
important detail about this commit - everything else is ancillary</strong>.</p>
<p>Now, I'm sure some of you are saying, <em>but Greg, the short description
of the change is obviously more important than the bug number</em>. You are
right. But we've allowed ourselves to make the bug and the content
therein more important than the commit.</p>
<p>Supporting my theory is the commit message content following the
first/summary line. That data is almost always - wait for it -
<strong>nothing: we generally don't write commit messages that contain more
than a single summary line</strong>. My repository forensics show that that
less than 20% of commit messages to Firefox in 2014 contain multiple
lines (this excludes merge and backout commits). (We are doing better
than 2013 - the rate was less than 15% then).</p>
<p>Our commit messages are basically saying, <em>here's a highly-abbreviated
summary of the change and a pointer (a bug number) to where you can
find out more</em>. And of course loading the bug typically reveals a mass of
interleaved comments on various topics, hardly the high-level summary
you were hoping was captured in the commit message.</p>
<p>Before I go on, in case you are on the fence as to the benefit of
detailed commit messages, please read Phabricator's recommendations on
<a href="https://secure.phabricator.com/book/phabflavor/article/recommendations_on_revision_control/">revision control</a>
and <a href="https://secure.phabricator.com/book/phabflavor/article/writing_reviewable_code/">writing reviewable code</a>.
I think both write-ups are terrific and are excellent templates that
apply to nearly everyone, especially a project as large and complex as
Firefox.</p>
<p>Anyway, there are many reasons why we don't capture a detailed, multi-line
commit message. For starters, you aren't immediately rewarded for doing
it: writing a good commit message doesn't really improve much in the short
term (unless someone <em>yells</em> at you for not doing it). This is a generic
problem applicable to all organizations and tools. This is a problem that
culture must ultimately rectify. But our tools shouldn't reinforce the
disposition towards laziness: they should reward best practices.</p>
<p>I don't believe Bugzilla and our interactions with it do an adequate job
rewarding good commit message writing. Chances are your mechanism for posting
reviews to Bugzilla or posting the publishing of a commit to Bugzilla
(pasting the URL in the simple case) brings up a text box for you to type
<em>review notes</em>, a patch description, or extra context for the landing. These
<em>should</em> be going in the commit message, as they are the type of high-level
context and summarizations of choices or actions that people crave when
discerning the history of a repository. But because that text box is there,
taunting you with its presence, we write content there instead of in the
commit message. Even where tools like bzexport exist to upload patches
to Bugzilla, potentially nipping this practice in the bug, it still engages
in frustrating behavior like reposting the same long commit message on
every patch upload, producing unwanted bug spam. Even a tool that is
pretty sensibly designed has an implementation detail that undermines a
good practice.</p>
<h2>Machine Processing of Patches is Difficult</h2>
<p>I have a challenge for you: identify all patches currently under
consideration for incorporation in the Firefox source tree, run static
analysis on them, and tell me if they meet our code style policies.</p>
<p>This should be a solved problem and deployed system at Mozilla. It
isn't. Part of the problem is because we're using Bugzilla for
conducting review and doing patch management. That may sound
counter-intuitive at first: Bugzilla is a centralized service - surely we
can poll it to discover patches and then do stuff with those patches.
We can. In theory. Things break down very quickly if you try this.</p>
<p>We are uploading patch files to Bugzilla. Patch files are
representations of commits that live outside a repository. In order to
get the full context - the result of the patch file - you need all the
content leading up to that patch file - the repository data. When a
naked patch file is uploaded to Bugzilla, you don't always have this
context.</p>
<p>For starters, you don't know with certainly which repository
the patch belongs to because that isn't part of the standard patch
format produced by Mercurial or Git. There are patches for various
repositories floating around in Bugzilla. So now you need a way to
identify which repository a patch belongs to. It is a solvable problem
(aggregate data for all repositories and match patches based on file
paths, referenced commits, etc), albeit one Mozilla has not yet solved
(but should).</p>
<p>Assuming you can identify the repository a patch belongs to, you need to
know the parent commit so you can apply this patch. Some patches list
their parent commits. Others do not. Even those that do may lie about
it. Patches in MQ don't update their parent field when they are <em>pushed</em>,
only after they are <em>refreshed</em>. You could be testing and uploading a
patch with a different parent commit than what's listed in the patch
file! Even if you do identify the parent commit, this commit could
belong to another patch under consideration that's also on Bugzilla! So
now you need to assemble a directed graph with all the patches known
from Bugzilla applied. Hopefully they all fit in nicely.</p>
<p>Of course, some patches don't have any metadata at all: they are just
naked diffs or are malformed commits produced by tools that e.g. attempt
to convert Git commits to Mercurial commits (Git users: you should be
using hg-git to produce proper Mercurial commits for Firefox patches).</p>
<p>Because Bugzilla is talking in terms of patch files, we often lose
much of the context needed to build nice tools, preventing numerous
potential workflow optimizations through automation. There are many
things machines could be doing for us (such as looking for coding style
violations). Instead, humans are doing this work and costing Mozilla a
lot of time and lost developer productivity in the process. (A human
costs ~$100/hr. A machine on EC2 is pennies per hour and should do the
job with lower latency. In other words, you can operate over 300
machines 24 hours a day for what you may an engineer to work an 8 hour
shift.)</p>
<h2>Conclusion</h2>
<p>I have outlined a few of the side-effects of using Bugzilla as part of
our day-to-day development, review, and landing of changes to Firefox.</p>
<p>There are several takeways.</p>
<p>First, one cannot argue the fact that Firefox development is bug(zilla)
centric. Nearly every important milestone in the lifecycle of a patch
involves Bugzilla in some way. This has its benefits and drawbacks. This
article has identified many of the drawbacks. But before you start
crying to expunge Bugzilla from the loop completely, consider the
benefits, such as a place anyone can go to to add metadata or comments
on something. That's huge. There is a larger discussion to be had here.
But I don't want to be inviting it quite yet.</p>
<p>A common thread between many of the points above is Bugzilla's
unstructured and generic handling of code and metadata attached to it
(patches, review comments, and landing information). Patches are
attachments, which can be anything under the sun. Review comments are
plain text comments with simple author, date, and tag metadata. Landings
are also communicated by plain text review comments (at least
initially - keywords and flags are used in some scenarios).</p>
<p>By being a generic tool, Bugzilla throws away a lot of the rich metadata
that we produce. That data is still technically there in many scenarios.
But it becomes extremely difficult if not practically impossible for
both humans and machines to access efficiently. We lose important
context and feedback by <em>normalizing all this data to Bugzilla</em>. This
data loss creates overhead and technical debt. It slows Mozilla down.</p>
<p>Fortunately, the solutions to these problems and shortcomings are
conceptually simple (and generally applicable): preserve rich context. In
the context of patch distribution, push commits to a repository and tell
someone to pull those commits. In the context of code review, create
sub-reviews for different commits and allow tracking and easy-to-follow
(likely threaded) discussions on found issues. Design workflow to be code
first, not tool or bug first. Optimize workflows to minimize people time.
Lean heavily on machines to do grunt work. Integrate issue tracking and
code review, but not too tightly (loosely coupled, highly cohesive). Let
different tools specialize in the handling of different forms of data:
let code review handle code review. Let Bugzilla handle issue tracking.
Let a landing tool handle tracking the state of landings. Use middleware
to make them appear as one logical service if they aren't designed to be
one from the start (such as is Mozilla's case with Bugzilla).</p>
<p>Another solution that's generally applicable is to refine and optimize
the whole process to land a finished commit. Your product is based on
software. So anything that adds overhead or loss of quality in the
process of developing that software is fundamentally a product problem
and should be treated as such. Any time and brain cycles lost to
development friction or bugs that arise from things like inadequate
code reviews tools degrade the quality of your product and take away
from the user experience. This should be plain to see. Attaching a
cost to this to convince the business-minded folks that it is worth
addressing is a harder matter. I find management with empathy and shared
understanding of what amazing tools can do helps a lot.</p>
<p>If I had to sum up the solution in one sentence, it would be: <em>invest in
tools and developer happiness.</em></p>
<p>I hope to soon publish a post on how Mozilla's new code review tool
addresses many of the workflow deficiencies present today. Stay tuned.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
