<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Gregory Szorc's Digital Home</title>
    <link>http://gregoryszorc.com/blog</link>
    <description>Rambling on</description>
    <pubDate>Fri, 17 Jul 2015 18:41:43 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Prompting to Run mach mercurial-setup</title>
      <link>http://gregoryszorc.com/blog/2015/07/17/prompting-to-run-mach-mercurial-setup</link>
      <pubDate>Fri, 17 Jul 2015 11:35:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/07/17/prompting-to-run-mach-mercurial-setup</guid>
      <description>Prompting to Run mach mercurial-setup</description>
      <content:encoded><![CDATA[<p>Earlier this week, I landed some changes to the Firefox development
environment that aggressively make <em>mach</em> prompt to run <em>mach
mercurial-setup</em>. Full details in
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1182677">bug 1182677</a>.</p>
<p>As expected, the change resulted in a fair amount of whining and
bemoaning among various Firefox developers. I wanted to take some time
to explain why we moved forward, even though we knew not everyone would
like the feature.</p>
<p>My official job title at Mozilla is <em>Developer Productivity Engineer</em>.
My job is to make you do your job better.</p>
<p>I've been an employee at Mozilla for four years and in that time I've
witnessed a surprising lack of understanding around version control
tools. (I don't think Mozilla is significantly different from most
other companies here.) I find that a significant number of people
are practicing sub-optimal version control workflows because they don't
know any better (common) or because they are unwilling to change from
learned habits.</p>
<p>Furthermore, Mercurial is a highly customizable tool. A lot of
Mozillians have spent a lot of time developing useful extensions to
Mercurial that enable Mozillians to use Mercurial more effectively and
to thus become more productive. The latest epic time-saving hack
is <a href="http://www.ncalexander.net/blog/2015/07/02/build-fennec-frontend-fast-with-mach-artifact/">Nick Alexander's work to make Fennec build 80% faster by
having deep integration with version control</a>.</p>
<p><em>mach mercurial-setup</em> is almost
<a href="/blog/2013/07/29/mercurial-setup-wizard-for-firefox-development/">two years old</a>.
Yet, when assisting my fellow Mozillians with Mercurial issues, my
"have you run mach mercurial-setup?" question is still often met with
blank stares followed by "wait, there's a mach mercurial-setup?!" What's
even more frustrating is people wrongly believing that Mercurial can't
do things like rebasing and then spreading misinformation about the
lackings of Mercurial. (Mercurial has many advanced features disabled
out of the box so new users don't footgun themselves.)</p>
<p>Just like Firefox would be irrelevant if it didn't have millions of users,
your awesome tool is mostly irrelevant if you are its only user. That's
why when I hear of someone say they created an amazing tool for
themselves or modified a third party tool without sending the improvements
upstream, my blood pressure rises a little. It rises because here this
person did something awesome and they or some limited subset of people
who happened to be following the person on Twitter or reading their blog
at that point in time managed to a) know about the tool b) take the
effort to install it. The uptake rate is insanely low and return on
investment for that tool is low. It results in duplication of effort.
I find this painfully frustrating because I want everyone to have easy
access to the best tools available. This requires that tools are well
advertised and easy to install and use.</p>
<p>The primary goal of <em>mach mercurial-setup</em> is to make it super easy for
anyone to have an optimal Mercurial experience. It was apparent to me that
despite <em>mach mercurial-setup</em> existing, numerous people didn't know it
existed or weren't using it. Your awesome tool isn't very awesome unless
people are using it. And a lot of the awesome tools people have built
around Mercurial at Mozilla weren't being utilized and lots of
productivity wins were thus being unrealized. Forcefully pushing <em>mach
mercurial-setup</em> onto people is thus an attempt to unlock unrealized
productivity wins and to make people happier about the state of their
tools.</p>
<p>I'm not thrilled that mach's prompting to run <em>mach mercurial-setup</em> is
as disruptive as it is. It's bad user experience. I know better. But,
(and this is explained somewhat in the bug), other solutions are more
complicated and have other gotchas. The current, invasive implementation
was the easiest to implement and has the biggest bang for the buck in
terms of adoption. We knew people would complain about it. But from
my perspective, it was do this or do nothing. And nothing hadn't been
very effective. So we did something.</p>
<p>There has been lots of feedback about the change this week. Most
surprising to me is the general sentiment of "I don't want something
automatically changing my hgrc file." I find this surprising because
<em>mach mercurial-setup</em> puts the user firmly in control by prompting
before doing anything, thus respecting user choice and avoiding gotchas
and unwanted changes. It's clear this property needs to be advertised a
bit more so people aren't scared to run <em>mach mercurial-setup</em> and don't
spread fear, uncertainty, and doubt about the tool to others. (I also
find it somewhat surprising people would think this in the first place:
I'd like to think we'd implicitly trust most Mozillians to implement
tools that respect user choice and don't do <em>malicious</em> things.)</p>
<p>Like all software, things can and will change. The user experience of
this new feature isn't terrific. We'll iterate on it. If you want to
help enact change, please
<a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=mach">file a bug in Core :: mach</a>
(for now) and we'll go from there.</p>
<p>Thank you for your patience and your understanding.</p>]]></content:encoded>
    </item>
    <item>
      <title>MozReview Statistics July 2015</title>
      <link>http://gregoryszorc.com/blog/2015/07/16/mozreview-statistics-july-2015</link>
      <pubDate>Thu, 16 Jul 2015 14:00:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/07/16/mozreview-statistics-july-2015</guid>
      <description>MozReview Statistics July 2015</description>
      <content:encoded><![CDATA[<p>As of today, ~15.6% of commits landing in Firefox in July have gone
through <a href="https://reviewboard.mozilla.org/">MozReview</a> or have been produced
on machines that have used MozReview. This is still a small percentage
of overall commits. But, signs are that the percentage is going up. Last
month, about half as many commits exhibited the same signature. It's
only July 16 and we've already passed the total from June.</p>
<p>What I find interesting is the differences between commits that have
gone through MozReview versus the rest. When you look at the diff
statistics (a quick proxy of change size), we find that MozReview
commits tend to be smaller. The median <em>adds</em> as reported by diff stat
(basically lines that were changed) is 12 for MozReview versus 17
elsewhere. The average is 58 for MozReview versus 100 elsewhere. For
number of files modified, MozReview averages 2.59 versus elsewhere's
2.71. (These numbers exclude some specific large commits that appeared to
be bulk imports of external projects and drove up the non-MozReview
figures.)</p>
<p>It's entirely possible the root cause behind the discrepancy is a
side-effect of the population of MozReview users: perhaps MozReview
users just write smaller commits. However, I'd like to think it's because
MozReview makes it easier to manage multiple commits and people are taking
advantage of that (this is an explicit design goal of MozReview). Whatever
the root cause, I'm glad diffs are smaller.
As I've <a href="/blog/2014/10/27/implications-of-using-bugzilla-for-firefox-patch-development/">written about before</a>,
smaller commits are easier to review and land, thus enabling projects to
move faster.</p>
<p>I have a quarterly goal to remove the requirement for a Mozilla LDAP
account to push to MozReview. That will allow first time contributors to
use MozReview. This will be a huge win, as we can do much more magic in
the MozReview world than we can from vanilla Bugzilla (automatic bug
filing, automatic reviewer assignment, etc). Unofficially, I'd like to
have more than 50% of Firefox commits go through MozReview by the end of
the year.</p>]]></content:encoded>
    </item>
    <item>
      <title>Cloning From S3</title>
      <link>http://gregoryszorc.com/blog/2015/07/08/cloning-from-s3</link>
      <pubDate>Wed, 08 Jul 2015 11:40:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/07/08/cloning-from-s3</guid>
      <description>Cloning From S3</description>
      <content:encoded><![CDATA[<p>A month ago, I <a href="/blog/2015/05/29/faster-cloning-from-hg.mozilla.org-with-server-provided-bundles/">blogged about faster cloning from hg.mozilla.org using
bundle files</a>.
But deploying the feature on the servers was only the tip of the
iceberg.</p>
<p>At the end of last week, Firefox release automation rolled out the
<em>bundleclone</em> extension to their Linux and OS X machines. Essentially,
clones are bootstrapped from Amazon S3 automatically once this extension
is installed.</p>
<p>In just a few days of deployment, we've already seen a drastic shift in
traffic. On UTC day 2015-07-07, S3 served 1,563,014,396,236 bytes of
repository data! The hg.mozilla.org servers themselves served a total of
1,976,057,201,583 bytes.</p>
<p>But we're not done. The <em>bundleclone</em> extension
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1181597">isn't yet deployed on Windows</a>. Nor is it always used on TaskCluster. In addition, there are
still some high-use repositories that don't have bundles being
generated. Yesterday, I crunched the data and
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1181373">enabled bundles on more repositories</a>. It's too early to have conclusive data, but this should
move an additional several hundred gigabytes of traffic to S3.</p>
<p>At Whistler, I said that reducing traffic on hg.mozilla.org by 90% is
within the realm of possibility. Between a partial rollout of S3
clone offload that is already serving 44% of traffic and a
<a href="https://selenic.com/pipermail/mercurial-devel/2015-July/071777.html">feature I'm working on in core Mercurial to enable auto sharing of repository data</a>,
I'd say we're well on track.</p>]]></content:encoded>
    </item>
    <item>
      <title>Publish When Pushing to MozReview</title>
      <link>http://gregoryszorc.com/blog/2015/07/07/publish-when-pushing-to-mozreview</link>
      <pubDate>Tue, 07 Jul 2015 14:55:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/07/07/publish-when-pushing-to-mozreview</guid>
      <description>Publish When Pushing to MozReview</description>
      <content:encoded><![CDATA[<p>A lot of people contributed some really great feedback about MozReview
at Whistler. One of the most frequent requests was for the ability to
publish submitted review requests without having to open a browser.
I'm pleased to report that as of yesterday, this feature is implemented!
If reviewers have been assigned to all your review requests, Mercurial
will now prompt you to publish the review requests during <em>hg push</em>.
It should <em>just work</em>.</p>
<p>As part of this change, we also introduced more advanced feature
negotiation into the handshake between client and server. This means
we now have a mechanism for detecting out-of-date client installations.
This will enable us to more aggressively drop backwards compatibility
(making server-side development easier) while simultaneously ensuring
that more people are running modern and hopefully better versions of the
client code. This should translate to moving faster and a better
experience for everyone.</p>]]></content:encoded>
    </item>
    <item>
      <title>Changeset Metadata on hg.mozilla.org</title>
      <link>http://gregoryszorc.com/blog/2015/06/04/changeset-metadata-on-hg.mozilla.org</link>
      <pubDate>Thu, 04 Jun 2015 13:55:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/06/04/changeset-metadata-on-hg.mozilla.org</guid>
      <description>Changeset Metadata on hg.mozilla.org</description>
      <content:encoded><![CDATA[<p>Just a few minutes ago, I deployed some updates to
<a href="https://hg.mozilla.org/">hg.mozilla.org</a> to display more
metadata on changeset pages. See
<a href="https://hg.mozilla.org/mozilla-central/rev/4b69a62d1905">4b69a62d1905</a>,
<a href="https://hg.mozilla.org/mozilla-central/rev/dc4023d54436">dc4023d54436</a>,
and <a href="https://hg.mozilla.org/mozilla-central/rev/b617a57d6bf1">b617a57d6bf1</a>
for examples of what's shown.</p>
<p>We currently display:</p>
<ul>
<li>More detailed pushlog info. (Before you had to load another page to
  see things like the date of the push.)</li>
<li>The list of reviewers, each being a link that searches for other
  changesets they've reviewed.</li>
<li>A concise list of bugs referenced in the commit message.</li>
<li>Links to changesets that were backed out by this changeset.</li>
<li>On changesets that were backed out, we <em>may</em> also display a message
  that the changeset was backed out.</li>
<li>For Firefox repos, we also display the application <em>milestone</em>. This
  is the Gecko/app version recorded in the <em>config/milestone.txt</em> file
  in that changeset. The value can be used to quickly answer the
  question <em>What versions of Firefox have this changeset.</em></li>
</ul>
<p>If you notice any issues or have requests for new features, please
<a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Developer%20Services&amp;component=Mercurial%3A%20hg.mozilla.org">file a bug</a>.</p>
<p>This work is built on top of a feature I added to Mercurial 3.4 to make
it easier to inject extra data into Mercurial's web templates. We just
deployed Mercurial 3.4.1 to hg.mozilla.org yesterday. It's worth noting
that this deployment happened in the middle of the day with no
user-perceived downtime. This is a far cry from where we were a year
ago, when any server change required a maintenance window. We've
invested a lot of work into a test suite for this service so we can
continuously deploy without fear of breaking things. Moving fast feels
so good.</p>]]></content:encoded>
    </item>
    <item>
      <title>Important Changes to MozReview</title>
      <link>http://gregoryszorc.com/blog/2015/05/29/important-changes-to-mozreview</link>
      <pubDate>Fri, 29 May 2015 16:20:00 PDT</pubDate>
      <category><![CDATA[MozReview]]></category>
      <category><![CDATA[Mozilla]]></category>
      <category><![CDATA[code review]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/29/important-changes-to-mozreview</guid>
      <description>Important Changes to MozReview</description>
      <content:encoded><![CDATA[<p>This was a busy week for MozReview! There are a number of changes people
need to be aware of.</p>
<h2>Support for Specifying Reviewers via Commit Messages</h2>
<p>MozReview will now parse <strong>r?gps</strong> syntax out of commit messages to
set reviewers for pushed commits.</p>
<p><a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/review-requests.html#specifying-reviewers-in-commit-messages">Read the docs</a>
for more information, including why we are preferring <strong>r?</strong> to <strong>r=</strong>.</p>
<p>Since it landed, a number of workflow concerns have been reported.
See the bug tree for
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1142251">bug 1142251</a>
before filing a bug to help avoid duplicates.</p>
<p>Thank Dan Minor for the feature!</p>
<h2>Review Attachment/Flag Per Commit</h2>
<p>Since the beginning of MozReview, there was one Bugzilla attachment /
review flag per commit series. This has changed to one attachment /
review flag per commit.</p>
<p>Before, you needed to grant <em>Ship It</em> on the parent/root review request
in order to r+ the MozReview review request. Now, you grant <em>Ship It</em>
on individual commits and these turn into individual r+ on Bugzilla.
To reinforce that reviewing the parent/root review request doesn't do
anything meaningful any more, the <em>Ship It</em> button and checkbox have been
removed from the parent/root review request.</p>
<p>The new model more closely maps to how code review in Bugzilla has
worked at Mozilla for ages. And, it is a superior workflow for
future workflows we're trying to enable.</p>
<p>We tried to run a one-time migration script to convert existing
parent/root attachments/review flags to per-commit attachments/flags.
However, there were issues. We will attempt again sometime next week.
In the interim, <strong>in-flight review requests may enter an inconsistent
state if they are updated</strong>. If a new push is performed, the old
parent/root attachment/review flag may linger and per-commit
attachments/flags will be created. This could be confusing. The
workaround is to manually clear the r? flag from the parent/root
attachment or wait for the migration script to run in a few days.</p>
<p>Mark Côté put in a lot of hard work to make this change happen.</p>
<h2>r? Flags Cleared After Review</h2>
<p>Before, submitting a review without granting <em>Ship It</em> wouldn't do
anything to the r? flag: the r? flag would linger.</p>
<p>Now, submitting review without granting <em>Ship It</em> will clear the r?
flag. We think the new default is better for the majority of users.
However, we recognize it isn't always wanted. There is a bug open to
provide a checkbox to keep the r? flag present.</p>
<h2>Metadata Added to Changesets</h2>
<p>If you update to the tip of the version-control-tools repository
(you should do this every week or so to stay fresh - use <em>mach
mercurial-setup</em> to do this automatically), metadata will automatically
be added to commits when working with MozReview-enabled repositories.</p>
<p>Specifically, we insert a hidden, unique, random ID into every changeset.
This ID can be used to map commits to each other. We don't use this ID
yet. But we have plans.</p>
<p>A side-effect of this change is that you can no longer push to MozReview
if you have uncommitted local changes. If this is annoying, use <em>hg
shelve</em> and <em>hg unshelve</em> to create and undo temporary commits. If this
is too annoying, complain by filing a bug and we can look into doing
this automatically as part of pushing.</p>
<h2>What's Next?</h2>
<p>We're actively working on more workflow enhancements to make MozReview
an even more compelling experience.</p>
<p>I'm building a web service to query file metadata from moz.build files.
This will allow MozReview to automatically file bugs in proper
components based on what files changed. Once code reviewer metadata
is added to moz.build files, it will enable us to assign reviewers
automatically as well. The end goal here is to lower the number of steps
needed to turn changed code into a landing. This will be useful when we
turn GitHub pull requests into MozReview review requests (random GitHub
contributors shouldn't need to know who to flag for review, nor should
they be required to file a bug if they write some code). Oh year, we're
working on integrating GitHub pull requests.</p>
<p>Another area of focus is better commit tracking and partially landed
series. I have preliminary patches for automatically adding review URL
annotations to commit messages. This will enable people to easily go
from commit (message) to MozReview, without having to jump through
Bugzilla. This also enables better commit tracking. If you e.g.
perform complicated history rewriting, the review URL annotation will
enable the MozReview server to better map previously-submitted commits
to existing review requests. Partially landed series will enable
commits to land as soon as they are reviewed, without having to wait
on the entire series. It's my strong belief that if a commit is granted
review, it should land as soon as possible. This helps prevent bit rot
of ready-to-land commits. Landings also make people feel better because
you feel like you've accomplished something. Positive feedback loops are
good.</p>
<p>Major work is also being done to overhaul the web UI. The commit series
view (which is currently populated via XHR) will soon be generated on
the server and served as part of the page. This should make pages load a
bit faster. And, things should be prettier as well.</p>
<p>And, of course, work is being invested into Autoland. Support for
submitting pushes to Try landed a few weeks ago. Having Autoland
actually land reviewed commits is on the radar.</p>
<p>Exciting times are ahead. Please continue to provide feedback. If you
see something, <a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/hacking-mozreview.html#filing-bugs">say something</a>.</p>]]></content:encoded>
    </item>
    <item>
      <title>Faster Cloning from hg.mozilla.org With Server Provided Bundles</title>
      <link>http://gregoryszorc.com/blog/2015/05/29/faster-cloning-from-hg.mozilla.org-with-server-provided-bundles</link>
      <pubDate>Fri, 29 May 2015 11:30:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/29/faster-cloning-from-hg.mozilla.org-with-server-provided-bundles</guid>
      <description>Faster Cloning from hg.mozilla.org With Server Provided Bundles</description>
      <content:encoded><![CDATA[<p>When you type <em>hg clone</em>, the Mercurial server will create a <em>bundle</em>
from repository content at the time of the request and stream it to
the client. (Git works essentially the same way.)</p>
<p>This approach usually <em>just works</em>. But there are some downsides,
particularly with large repositories.</p>
<p>Creating bundles for large repositories is not cheap. For
mozilla-central, Firefox's main repository, it takes ~280s of CPU time
on my 2014 MacBook Pro to generate a bundle. Every time a client runs a
<em>hg clone https://hg.mozilla.org/mozilla-central</em>, a server somewhere
is spinning a CPU core generating ~1.1 GB of data. What's more, if
another clone arrives at the same time, another process will perform
the exact same work! When we talk about multiple minutes of CPU time
per request, this extra work starts to add up.</p>
<p>Another problem with large repositories is interrupted downloads. If
you suffer a connectivity blip during your <em>clone</em> command, you'll
have to start from scratch. This potentially means re-transferring
hundreds of megabytes from the server. It also means the server has
to generate a new bundle, consuming even more CPU time. This is not
good for the user or the server.</p>
<p>There have been multiple outages of hg.mozilla.org as a result of
the service being flooded with clone requests to large repositories.
Dozens of clients (most of them in Firefox or Firefox OS
release automation) have cloned the same repository around the same
time and overwhelmed network bandwidth in the data center or CPU
cores on the Mercurial servers.</p>
<p>A common solution to this problem is to not use the <em>clone</em> command
to receive initial repository data from the server. Instead, a
static <em>bundle</em> file will be generated and made available to clients.
Clients will call <em>hg init</em> to create an empty repository then will
perform an <em>hg unbundle</em> to apply the contents of a pre-generated
bundle file. They will then run <em>hg pull</em> to fetch new data that
was created after the bundle was generated. (It's worth noting that
Git's <em>clone --reference</em> option is similar.)</p>
<p>This is a good technical solution. Firefox and Firefox OS release
automation have effectively implemented this. However, it is a lot of
work: you have to build your own bundle generation and hosting
infrastructure and you have to remember that every <em>hg clone</em> should
probably be using bundles instead. It is extra complexity and complexity
that must be undertaken by every client. If a client forgets, the
consequences can be disastrous (clone flooding leading to service
outage). Client-side opt-in is prone to lapses and doesn't scale.</p>
<p><strong>As of today, we've deployed a more scalable, server-based solution to
hg.mozilla.org.</strong></p>
<p>hg.mozilla.org is now itself generating bundles for a handful of
repositories, including mozilla-central, inbound, fx-team, and
mozharness. These bundles are being uploaded to Amazon S3. And
<strong>those bundles are being advertised by the server over Mercurial's
wire protocol</strong>.</p>
<p>When you install the <em>bundleclone</em> Mercurial extension, <em>hg clone</em> is
taught to look for bundles being advertised on the server. If a bundle
is available, the bundle is downloaded, applied, and then the client
does the equivalent of an <em>hg pull</em> to fetch all new data since when the
bundle was generated. If a bundle exists, it is used transparently: no
client side cooperation is needed beyond installing the <em>bundleclone</em>
extension. If a bundle doesn't exist, it simply falls back to
Mercurial's default behavior. <strong>This effectively shifts responsibility
for doing efficient clones from clients to server operators, which
means server operators don't need cooperation from clients to enact
important service changes.</strong> Before, if clients weren't using bundles,
we'd have to wait for clients to update their code. Now, we can see
a repository is being cloned heavily and start generating bundles for
it without having to wait for the client to deploy new code.</p>
<p>Furthermore, we've built primitive <em>content negotiation</em> into the
process. The server doesn't simply advertise one bundle file: it
advertises several bundle files. We offer gzip, bzip2, and <em>stream</em>
bundles. gzip is what Mercurial uses by default. It works OK. bzip2
bundles are smaller, but they take longer to process. <em>stream</em> bundles
are essentially tar archives of the <em>.hg/store</em> directory and are larger
than gzip bundles, but insanely fast because there is very little CPU
required to apply them. In addition, we advertise URLs for multiple S3
regions, currently us-west-2 (Oregon) and us-east-1 (Virginia). This
enables clients to prefer the bundle most appropriate for them.</p>
<p>A benefit of serving bundles from S3 is that Firefox and Firefox OS
release automation (the biggest consumers of hg.mozilla.org) live in
Amazon EC2. They are able to fetch from S3 over a gigabit network.
And, since we're transferring data within the same AWS region, there
are no data transfer costs. Previously, we were transferring ~1.1 GB
from a Mozilla data center to EC2 for each clone. This took up bandwidth
in Mozilla's network and cost Mozilla money to send data thousands of
miles away. And, we never came close to saturating a gigabit network (we
do with stream bundles). Wins everywhere!</p>
<p>The <a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/hgmo/bundleclone.html">full instructions</a>
detail how to use <em>bundleclone</em>. <strong>I recommend everyone at Mozilla
install the extension</strong> because there should be no downside to doing it.</p>
<p>Once <em>bundleclone</em> is deployed to Firefox and Firefox OS release
automation, we should hopefully never again see those machines bring
down hg.mozilla.org due to a flood of clone requests. We should also
see a drastic reduction in load to hg.mozilla.org. I'm optimistic
bandwidth will decrease by over 50%!</p>
<p>It's worth noting that the functionality from the <em>bundleclone</em> extension
is coming to vanilla Mercurial. The functionality (which was initially
added by Mozilla's Mike Hommey) is part of Mercurial's <em>bundle2</em> protocol,
which is available, but isn't enabled by default yet. <em>bundleclone</em> is thus
a temporary solution to bring us server stability and client
improvements until modern Mercurial versions are deployed everywhere
in a few months time.</p>
<p>Finally, I would like to credit Augie Fackler for the
<a href="http://thread.gmane.org/gmane.comp.version-control.mercurial.devel/54872/focus=54872">original idea</a>
for server-assisted bundle-based clones.</p>]]></content:encoded>
    </item>
    <item>
      <title>Firefox Mercurial Repository with CVS History</title>
      <link>http://gregoryszorc.com/blog/2015/05/18/firefox-mercurial-repository-with-cvs-history</link>
      <pubDate>Mon, 18 May 2015 08:40:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/18/firefox-mercurial-repository-with-cvs-history</guid>
      <description>Firefox Mercurial Repository with CVS History</description>
      <content:encoded><![CDATA[<p>When Firefox made the switch from CVS to Mercurial in March 2007, the
CVS history wasn't imported into Mercurial. There were good reasons for
this at the time. But it's a decision that continues to have
side-effects. I am surprised how often I hear of engineers wanting to
access blame and commit info from commits now more than 9 years old!</p>
<p>When individuals created a Git mirror of the Firefox repository a few
years ago, they correctly decided that importing CVS history would be
a good idea. They also correctly decided to combine the logically same
but physically separate <em>release</em> and <em>integration</em> repositories into a
unified Git repository. These are things we can't easily do to the
canonical Mercurial repository because it would break SHA-1 hashes,
breaking many systems, and it would require significant changes in
process, among other reasons.</p>
<p>While Firefox developers do have access to a single Firefox repository
with full CVS history (the Git mirror), they still aren't satisfied.</p>
<p>Running <em>git blame</em> (or <em>hg blame</em> for that matter) can be very
expensive. For this reason, the blame interface is disabled on many
web-based source viewers by default. On GitHub, some blame URLs for
the Firefox repository time out and cause GitHub to display an error
message. No matter how hard you try, you can't easily get blame results
(running a local Git HTTP/HTML interface is still difficult compared to
<em>hg serve</em>).</p>
<p>Another reason developers aren't satisfied with the Git mirror is that
Git's querying tools pale in comparison to Mercurial's. I've said it
before and I'll say it again: Mercurial's revision sets and templates
are incredibly useful features that enable advanced repository querying
and reporting. Git's offerings come nowhere close. (I <em>really</em> wish Git
would steal these awesome features from Mercurial.)</p>
<p>Anyway, enough people were complaining about the lack of a Mercurial
Firefox repository with full CVS history that I decided to create one.
If you point your browsers or Mercurial clients to
<a href="https://hg.mozilla.org/users/gszorc_mozilla.com/gecko-full">https://hg.mozilla.org/users/gszorc_mozilla.com/gecko-full</a>,
you'll be able to access it.</p>
<p>The process used for the conversion was the simplest possible: I used
hg-git to convert the Git mirror back to Mercurial.</p>
<p>Unlike the Git mirror, I didn't include all heads in this new
repository. Instead, there is only mozilla-central's head (the current
development tip). If I were doing this properly, I'd include all heads,
like
<a href="https://hg.mozilla.org/users/gszorc_mozilla.com/gecko-aggregate">gecko-aggregate</a>.</p>
<p>I'm well aware there are oddities in the Git mirror and they now
exist in this new repository as well. My goal for this conversion was to
deliver something: it wasn't a goal to deliver the most correct result
possible.</p>
<p>At this time, this repository should be considered an unstable science
experiment. <strong>By no means should you rely on this repository.</strong> But if
you find it useful, I'd appreciate hearing about it. If enough people
ask, we could probably make this more official.</p>]]></content:encoded>
    </item>
    <item>
      <title>Notes from Git Merge 2015</title>
      <link>http://gregoryszorc.com/blog/2015/05/12/notes-from-git-merge-2015</link>
      <pubDate>Tue, 12 May 2015 15:40:00 PDT</pubDate>
      <category><![CDATA[Git]]></category>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/12/notes-from-git-merge-2015</guid>
      <description>Notes from Git Merge 2015</description>
      <content:encoded><![CDATA[<p><a href="http://git-merge.com/">Git Merge 2015</a> was a Git user conference held
in Paris on April 8 and 9, 2015.</p>
<p>I'm kind of a version control geek. I'm also responsible for a large
part of Mozilla's version control hosting. So, when the videos were
made public, you can bet I took interest.</p>
<p>This post contains my notes from a few of the Git Merge talks. I try
to separate content/facts from my opinions by isolating my opinions
(within parenthesis).</p>
<h2>Git at Google</h2>
<p><a href="http://git-merge.com/videos/git-at-google-dave-borowitz.html">Git at Google: Making Big Projects (and everyone else) Happy</a>
is from a Googler (Dave Borowitz) who works on JGit for the Git
infrastructure team at Google.</p>
<p>"Everybody in this room is going to feel some kind of pain working with
Git at scale at some time in their career."</p>
<p>First Git usage at Google in 2008 for Android. 2011 googlesource.com
launches.</p>
<p>24,000 total Git repos at Google. 77.1M requests/day. 30-40 TB/day. 2-3
Gbps.</p>
<p>Largest repo is 210GB (not public it appears).</p>
<p>800 repos in AOSP. Google maintains internal fork of all Android repos
(so they can throw stuff over the wall). Fresh AOSP tree is 17 GiB. Lots
of contracts dictating access.</p>
<p>Chrome repos include Chromium, Blink, Chromium OS. Performed giant
Subversion migration. Developers of Chrome very set in their ways. Had
many workflows integrated with Subversion web interface. Subversion
blame was fast, Git blame slow. Built caching backend for Git blame to
make developers happy.</p>
<p>Chromium 2.9 GiB, 3.6M objects, 390k commits. Blink 5.3 GiB, 3.1M
objects, 177k commits. They merged them into a monorepo. Mention of
Facebook's monorepo talk and Mercurial scaling efforts for a repo larger
then Chromium/Blink monorepo. Benefits to developers for doing atomic
refactorings, etc.</p>
<p>"Being big is hard."</p>
<p>AOSP: 1 Gbps -&gt; 2 minutes for 17 GiB. 20 Mbps -&gt; 3 hours. Flaky internet
combined with non-resumable clone results in badness. Delta resolution
can take a while. Checkout of hundreds of thousands of files can be
slow, especially on Windows.</p>
<p>"As tool developers... it's hard to tell people don't check in large
binaries, do things this way, ... when all they are trying to do is
get their job done." (I couldn't agree more: tools should ideally not
impose sub-optimal workflows.)</p>
<p>They prefer scaling pain to supporting multiple tools. (I think this
meant don't use multiple VCSs if you can just make one scale.)</p>
<p>Shallow clone beneficial. But some commands don't work. log not very
useful.</p>
<p>Narrow clones mentioned. Apparently talked about elsewhere at Git Merge
not captured on video. Non-trivial problem for Git. "We have no idea
when this is going to happen."</p>
<p>Split repos until narrow clone is available. Google wrote repo to manage
multiple repos. They view repo and multiple repos as stop-gap until
narrow clone is implemented.</p>
<p>git submodule needs some love. Git commands don't handle submodules
or multiple repos very well. They'd like to see repo features
incorporated into git submodule.</p>
<p>Transition to server operation.</p>
<p>Pre-2.0, counting objects was hard. For Linux kernel, 60s 100% CPU time
per clone to count objects. "Linux isn't even that big."</p>
<p>Traditionally Git is single homed. Load from users. Load from
automation.</p>
<p>Told anecdote about how Google's automation once recloned the repo after
a failed Git command. Accidentally made a change one day that caused a
command to persistently fail. DoS against server. (We've had this at
Mozilla.)</p>
<p>Garbage collection on server is CPU intensive and necessary. Takes cores
away from clients.</p>
<p>Reachability bitmaps implemented in JGit, ported to Git 2.0. Counting
objects for Linux clones went from 60s CPU to ~100ms.</p>
<p>Google puts static, pre-generated bundles on a CDN. Client downloads
bundle then does incremental fetch. Massive reduction in server load.
Bundle files better for users. Resumable.</p>
<p>They have ideas for integrating bundles into git fetch, but it's
"a little way's off." (This feature is partially implemented in
Mercurial 3.4 and we have plans for using it at Mozilla.) It's feature
in repo today.</p>
<p>Shared filesystem would be really nice to spread CPU load. NFS "works."
Performance problems with high throughput repositories.</p>
<p>Master-mirror replication can help. Problems with replication lag.
Consistency is hard.</p>
<p>Google uses a distributed Git store using Bigtable and GFS built on
JGit. Git-aware load balancer. Completely separate pool of garbage
collection workers. They do replication to multiple datacenters before
pushes. 6 datacenters across world. Some of their stuff is open source.
A lot isn't.</p>
<p>Humans have difficulty managing hundreds of repositories. "How do you as
a human know what you need to modify?" Monorepos have this problem too.
Inherent with lots of content. (Seemed to imply it is worse with
multiple repos than with a monorepo.)</p>
<p>Porting changes between forks is hard. e.g. cherry picking between
internal and external Android repos.</p>
<p>ACLs are a mess.</p>
<p>Google built Gerrit code review. It does ACLs, auto rebasing, release
branch management. It's a swiss army knife. (This aligns with my
vision for MozReview and code-centric development.)</p>
<h2>Scaling Git at Twitter</h2>
<p>Wilhelm Bierbaum from Twitter talks about
<a href="http://git-merge.com/videos/scaling-git-at-twitter-wilhelm-bierbaum.html">Scaling Git at Twitter</a>.</p>
<p>"We've decided it's really important to make Twitter a good place to work for
developers. Source control is one of those points where we were
lacking. We had some performance problems with Git in the past."</p>
<p>Twitter runs a monorepo. Used to be 3 repos. "Working with a single
repository is the way they prefer to develop software when developing
hundreds of services." They also have a single build system. They have
a geo diverse workforce.</p>
<p>They use normal canonical implementation of Git + some optimizations.</p>
<p>Benefits of a monorepo:</p>
<p>Visibility. Easier for people to find code in one repo. Code search tools
tailored towards single repos.</p>
<p>Single toolchain. single set of tools to build, test, and deploy. When
improvements to tools made, everyone benefits because one toolchain.</p>
<p>Easy to share code (particularly generated code like IDL). When operating
many small services, services developed together. Code duplication is
minimized. Twitter relies on IDL heavily.</p>
<p>Simpler to predict the impact of your changes. Easier to look at single
code base then to understand how multiple code bases interact. Easy to
make a change and see what breaks rather than submit changes to N repos
and do testing in N repos.</p>
<p>Makes refactoring less arduous.</p>
<p>Surfaces architecture issues earlier.</p>
<p>Breaking changes easier to coordinate</p>
<p>Drawbacks of monorepos:</p>
<p>Large disk footprint for full history.</p>
<p>Tuning filesystem only goes so far.</p>
<p>Forces some organizations to adopt sparse checkouts and shallow clones.</p>
<p>Submodules aren't good enough to use. <em>add</em> and <em>commit</em> don't recognize
submodule boundaries very well and aren't very usable.</p>
<p>"To us, using a tool such as repo that is in effect a secondary version
control tool on top of Git does not feel right and doesn't lead to a
fluid experience."</p>
<p>Twitter has centralized use of Git. Don't really benefit from
distributed version control system. Feature branches. Goal is to live as
close to master as possible. Long-running branches discouraged. Fewer
conflicts to resolve.</p>
<p>They have project-level ownership system. But any developer can change
anything.</p>
<p>They have lots of read-only replicas. Highly available writable server.</p>
<p>They use reference repos heavily so object exchange overhead is
manageable.</p>
<p>Scaling issues with many refs. Partially due to how refs are stored on
disk. File locking limits in OS. Commands like status, add, and commit
can be slow, even with repo garbage collected and packed. Locking issues
with garbage collection.</p>
<p>Incorporated file alteration monitor to make status faster. Reference to
Facebook's work on watchman and its Mercurial integration. Significant
impact on OS X. "Pretty much all our developers use OS X." (I assume
they are using Watchman with Git - I've seen patches for this on the Git
mailing list but they haven't been merged into core yet.)</p>
<p>They implemented a custom index format. Adopted faster hashing
algorithm that uses native instructions.</p>
<p>Discovery with many refs didn't scale. 13 MB of raw data for refs
exchange at Twitter. (!!) Experimenting with clients sending a bloom
filter of refs. Hacked it together via HTTP header.</p>
<p>Fetch protocol is expensive. Lots of random I/O. Can take minutes
to do incremental fetches. Bitmap indices help, but aren't good enough
for them. Since they have central and well-defined environment, they
changed fetch protocol to work like a journal: send all changed data since
client's last fetch. Server work is essentially a sendfile system call.
git push appends push packs to a log-structured journal. On fetch,
clients "replay" the transactions from the journal. Similar to MySQL
binary log replication. (This is very similar to some of the Mercurial
replication work I'm doing at Mozilla. Yay technical validation.)
(Append only files are also how Mercurial's storage model works by
default.)</p>
<p>Log-structured data exchange means server side is cheap. They can insert
HTTP caches to handle Range header aware requests.</p>
<p>Without this hack, they can't scale their servers.</p>
<p>Initial clone is seeded by BitTorrent.</p>
<p>It sounds like everyone's unmerged feature branches are on the one
central repo and get transferred everywhere by default. Their journal
fetch can selectively fetch refs so this isn't a huge problem.</p>
<p>They'd like to experiment with sparse repos. But they haven't gotten to
that yet. They'd like a better storage abstraction in Git to enable
necessary future scalability. They want a network-aware storage backend.
Local objects not necessary if the network has them.</p>
<p>They are running a custom Git distribution/fork on clients. But they
don't want to maintain forever. Prefer to send upstream.</p>]]></content:encoded>
    </item>
    <item>
      <title>Dropping Explicit Support for Mercurial 3.0</title>
      <link>http://gregoryszorc.com/blog/2015/05/07/dropping-explicit-support-for-mercurial-3.0</link>
      <pubDate>Thu, 07 May 2015 16:05:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2015/05/07/dropping-explicit-support-for-mercurial-3.0</guid>
      <description>Dropping Explicit Support for Mercurial 3.0</description>
      <content:encoded><![CDATA[<p>As of a few minutes ago, we explicitly dropped support for Mercurial 3.0
for all the Mercurial code in the
<a href="https://hg.mozilla.org/hgcustom/version-control-tools">version-control-tools</a>
repository. File issues in
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1162304">bug 1162304</a>.</p>
<p>Code may still work against Mercurial 3.0. But it isn't supported and
could break hard at any time.</p>
<p>Supporting multiple versions of <em>any</em> software carries
with it some cost. The people writing tooling around Mercurial are busy.
It is a waste of our time to bend over backwards to support old versions
of software that <strong>all</strong> users should have upgraded from months ago.
Still using older Mercurial versions means you aren't getting the best
performance and may encounter bugs that have since been fixed.</p>
<p>See the <a href="https://mozilla-version-control-tools.readthedocs.org/en/latest/hgmozilla/installing.html">Mozilla tailored Mercurial installation instructions</a>
for info on how to upgrade to the latest/greatest Mercurial version.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
