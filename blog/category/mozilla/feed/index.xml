<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Gregory Szorc's Digital Home</title>
    <link>http://gregoryszorc.com/blog</link>
    <description>Rambling on</description>
    <pubDate>Tue, 14 Jan 2020 02:20:34 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Seeking Employment</title>
      <link>http://gregoryszorc.com/blog/2019/01/07/seeking-employment</link>
      <pubDate>Mon, 07 Jan 2019 15:25:00 PST</pubDate>
      <category><![CDATA[Personal]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2019/01/07/seeking-employment</guid>
      <description>Seeking Employment</description>
      <content:encoded><![CDATA[<p>After almost seven and a half years as an employee of Mozilla Corporation,
I'm moving on. I have already worked my final day as an employee.</p>
<p>This post is the first time that I've publicly acknowledged my departure.
To any Mozillians reading this, I regret that I did not send out a
farewell email before I left. But the circumstances of my departure weren't
conducive to doing so. I've been drafting a proper farewell blog post. But
it has been very challenging to compose. Furthermore, each passing day
brings with it new insights into my time at Mozilla and a new wrinkle to
integrate into the reflective story I want to tell in that post. I vow to
eventually publish a proper goodbye that serves as the bookend to my
employment at Mozilla. Until then, just let me say that I'm already missing
working with many of you. I've connected with several people since I left
and still owe responses or messages to many more. If you want to get in
touch, my contact info is in my <a href="/resume.pdf">résumé</a>.</p>
<p>I left Mozilla without new employment lined up. That leads me to the
subject line of this post: I'm seeking employment. The remainder of this
post is thus tailored to potential employers.</p>
<p>My <a href="/resume.pdf">résumé</a> has been updated. But that two page summary
only scratches the surface of my experience and set of skills. The
<a href="/work.html">Body of Work</a> page of my website is a more detailed record
of the work I've done. But even it is not complete!</p>
<p>Perusing through my posts on this blog will reveal even more about the
work I've done and how I go about it. My résumé links to a few posts
that I think are great examples of the level of understanding and detail
that I'm capable of harnessing.</p>
<p>As far as the kind of work I want to do or the type of company I want
to work for, I'm trying to keep an open mind. But I do have some biases.</p>
<p>I prefer established companies to early start-ups for various reasons.
Dan Luu's <a href="https://danluu.com/startup-tradeoffs/">Big companies v. startups</a>
is aligned pretty well with my thinking.</p>
<p>One of the reasons I worked for Mozilla was because of my personal
alignment with the
<a href="https://www.mozilla.org/en-US/about/manifesto/">Mozilla Manifesto</a>. So
I gravitate towards employers that share those principles and am
somewhat turned off by those that counteract them. But I recognize that
the world is complex and that competing perspectives aren't intrinsically
evil. In other words, I try to maintain an open mind.</p>
<p>I'm attracted to employers that align their business with improving the
well-being of the planet, especially the people on it. The link
between the business and well-being can be tenuous: a B2B business for
example is presumably selling something that helps people, and that helping
is what matters to me. The tighter the link between the business and
improving the world will increase my attraction to a employer.</p>
<p>I started my university education as a biomedical engineer because I
liked the idea of being at the intersection of technology and medicine.
And part of me really wants to return to this space because there
are few things more noble than helping a fellow human being in need.</p>
<p>As for the kind of role or technical work I want to do, I could go in
any number of directions. I still enjoy doing individual contributor type
work and believe I could be an asset to an employer doing that work. But
I also crave working on a team, performing technical mentorship, and being
a leader of technical components. I enjoy participating in high-level
planning as well as implementing the low-level aspects. I recognize that
while my individual output can be substantial (I can provide data showing
that I was one of the most prolific technical contributors at Mozilla
during my time there) I can be more valuable to an employer when I
bestow skills and knowledge unto others through teaching, mentorship,
setting an example, etc.</p>
<p>I have what I would consider expertise in a few domains that may be
attractive to employers.</p>
<p>I was a technical maintainer of Firefox's build system and initiated a
transition away from an architecture that had been in place since the
Netscape days. I definitely geek out way too much on build systems.</p>
<p>I am a contributor to the Mercurial version control tool. I know way
too much about the internals of Mercurial, Git, and other version
control tools. I am intimately aware of scaling problems with these
tools. Some of the scaling work I did for Mercurial saved Mozilla tens
of thousands of dollars in direct operational costs and probably
hundreds of thousands of dollars in saved people time due to fewer
service disruptions and faster operations.</p>
<p>I have exposure to both client and server side work and the problems
encountered within each domain. I've dabbled in lots of technologies,
operating systems, and tools. I'm not afraid to learn something new.
Although as my experience increases, so does my skepticism of shiny
new things (I've been burned by technical fads too many times).</p>
<p>I have a keen fascination with optimization and scaling, whether it
be on a technical level or in terms of workflows and human behavior.
I like to ask <em>and then what</em> so I'm thinking a few steps out and am
prepared for the next problem or consequence of an immediate action.</p>
<p>I seem to have a knack for caring about user experience and interfaces.
(Although my own visual design skills aren't the greatest - see my
website design for proof.) I'm pretty passionate that tools that people
use should be simple and usable. Cognitive dissonance, latency, and
distractions are real and as an industry we don't do a great job
minimizing these disruptions so focus and productivity can be
maximized. I'm not saying I would be a good product manager or
UI designer. But it's something I've thought about because not many
engineers seem to exhibit the passion for good user experience that
I do and that intersection of skills could be valuable.</p>
<p>My favorite time at Mozilla was when I was working on a unified
<em>engineering productivity</em> team. The team controlled most of the tools
and infrastructure that Firefox developers interacted with in order
to do their jobs. I absolutely loved taking a whole-world view of
that problem space and identifying the high-level problems - and
low-hanging fruit - to improve the overall Firefox development
experience. I derived a lot of satisfaction from identifying pain
points, equating them to a dollar cost by extrapolating people time
wasted due to them, justifying working on them, and finally
celebrating - along with the overall engineering team - when improvements
were made. I think I would be a tremendous asset to a company working
in this space. And if my experience at Mozilla is any indicator, I
would more than offset my total employment cost by doing this kind
of work.</p>
<p>I've been entertaining the idea of contracting for a while before
I resume full-time employment with a single employer. However, I've
never contracted before and need to do some homework before I commit
to that. (Please leave a comment or email me if you have recommendations
on reading material.)</p>
<p>My dream contract gig would likely be to finish the Mercurial wire
protocol and storage work I started last year. I would need to type
up a formal proposal, but the gist of it is the work I started has the
potential to leapfrog Git in terms of both client-side and server-side
performance and scalability. Mercurial would be able to open Git
repositories on the local filesystem as well as consume them via the
Git wire protocol. Transparent Git interoperability would enable
Mercurial to be used as a drop-in replacement for Git, which would
benefit users who don't have control over the server (such as projects
that live on GitHub). Mercurial's new wire protocol is designed with
global scalability and distribution in mind. The goal is to enable
server operators to deploy scalable VCS servers in a turn-key manner
by relying on scalable key-value stores and content distribution
networks as much as possible (Mercurial and Git today require servers
to perform way too much work and aren't designed with modern distributed
systems best practices, which is why scaling them is hard). The new
protocol is being designed such that a <em>Mercurial</em> server could expose
Git data. It would then be possible to teach a Git client to speak the
<em>Mercurial</em> wire protocol, which would result in Mercurial being a more
scalable Git server than Git is today. If my vision is achieved, this
would make server-side VCS scaling problems go away and would eliminate
the religious debate between Git and Mercurial (the answer would be
<em>deploy a Mercurial server, allow data to be exposed to Git, and let
consumers choose</em>). I conservatively estimate that the benefits to
industry would be in the millions of dollars. How I would structure
a contract to deliver aspects of this, I'm not sure. But if you are
willing to invest six figures towards this bet, let's talk. A good
foundation of this work is already implemented in Mercurial and the
Mercurial core development team is already on-board with many aspects
of the vision, so I'm not spewing vapor.</p>
<p>Another potential contract opportunity would be funding
<a href="https://gregoryszorc.com/blog/category/pyoxidizer/">PyOxidizer</a>.
I started the project a few months back as a side-project as an
excuse to learn Rust while solving a <em>fun</em> problem that I thought
needed solving. I was hoping for the project to be useful for
Mercurial and Mozilla one day. But if social media activity is any
indication, there seems to be somewhat widespread interest in this
project. I have no doubt that once complete, companies will be using
PyOxidizer to ship products that generate revenue and that PyOxidizer
will save them engineering resources. I'd very much like to recapture
some of that value into my pockets, if possible. Again, I'm somewhat
naive about how to write contracts since I've never contracted, but I
imagine <em>deliver a tool that allows me to ship product X as a
standalone binary to platforms Y and Z</em> is definitely something that
could be structured as a contract. </p>
<p>As for the timeline, I was at Mozilla for what feels like an eternity
in Silicon Valley. And Mozilla's way of working is substantially
different from many companies. I need some time to decompress and
unlearn some Mozilla habits. My future employer will inherit a happier
and more productive employee by allowing me to take some much-needed
time off.</p>
<p>I'm looking to resume full-time work no sooner than March 1. I'd like
to figure out what the next step in my career is by the end of January.
Then I can sign some papers, pack up my skiis, and become a ski bum
for the month of February: if I don't use this unemployment opportunity
to have at least 20 days on the slopes this season and visit some new
mountains, I will be very disappointed in myself!</p>
<p>If you want to get in touch, my contact info is in my
<a href="/resume.pdf">résumé</a>. I tend not to answer incoming calls from
unknown numbers, so email is preferred. But if you leave a voicemail,
I'll try to get back to you.</p>
<p>I look forward to working for a great engineering organization in the
near future!</p>]]></content:encoded>
    </item>
    <item>
      <title>Absorbing Commit Changes in Mercurial 4.8</title>
      <link>http://gregoryszorc.com/blog/2018/11/05/absorbing-commit-changes-in-mercurial-4.8</link>
      <pubDate>Mon, 05 Nov 2018 09:25:00 PST</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/11/05/absorbing-commit-changes-in-mercurial-4.8</guid>
      <description>Absorbing Commit Changes in Mercurial 4.8</description>
      <content:encoded><![CDATA[<p>Every so often a tool you use introduces a feature that is so useful
that you can't imagine how things were before that feature existed.
The recent 4.8 release of the
<a href="https://www.mercurial-scm.org/">Mercurial version control tool</a> introduces
such a feature: the <code>hg absorb</code> command.</p>
<p><code>hg absorb</code> is a mechanism to automatically and intelligently incorporate
uncommitted changes into prior commits. Think of it as <em><code>hg histedit</code> or
<code>git rebase -i</code> with auto squashing</em>.</p>
<p>Imagine you have a set of changes to prior commits in your working
directory. <code>hg absorb</code> figures out which changes map to which commits
and <em>absorbs</em> each of those changes into the appropriate commit. Using
<code>hg absorb</code>, you can replace cumbersome and often merge conflict ridden
history editing workflows with a single command that often <em>just works</em>.
Read on for more details and examples.</p>
<p>Modern version control workflows often entail having multiple <em>unlanded</em>
commits in flight. What this looks like varies heavily by the version
control tool, standards and review workflows employed by the specific
project/repository, and personal preferences.</p>
<p>A workflow practiced by a lot of projects is to author your commits
into a sequence of standalone commits, with each commit representing
a discrete, logical unit of work. Each commit is then
reviewed/evaluated/tested on its own as part of a larger series.
(This workflow is practiced by Firefox, the Git and Mercurial projects,
and the Linux Kernel to name a few.)</p>
<p>A common task that arises when working with such a workflow is the need
to incorporate changes into an old commit. For example, let's say we have
a stack of the following commits:</p>
<pre><code>$ hg show stack
  @  1c114a ansible/hg-web: serve static files as immutable content
  o  d2cf48 ansible/hg-web: synchronize templates earlier
  o  c29f28 ansible/hg-web: convert hgrc to a template
  o  166549 ansible/hg-web: tell hgweb that static files are in /static/
  o  d46d6a ansible/hg-web: serve static template files from httpd
  o  37fdad testing: only print when in verbose mode
 /   (stack base)
o  e44c2e (@) testing: install Mercurial 4.8 final
</code></pre>
<p>Contained within this stack are 5 commits changing the way that static
files are served by hg.mozilla.org (but that's not important).</p>
<p>Let's say I submit this stack of commits for review. The reviewer spots
a problem with the second commit (<em>serve static template files from httpd</em>)
and wants me to make a change.</p>
<p>How do you go about making that change?</p>
<p>Again, this depends on the exact tool and workflow you are using.</p>
<p>A common workflow is to not rewrite the existing commits at all: you simply
create a new <em>fixup</em> commit on top of the stack, leaving the existing commits
as-is. e.g.:</p>
<pre><code>$ hg show stack
  o  deadad fix typo in httpd config
  o  1c114a ansible/hg-web: serve static files as immutable content
  o  d2cf48 ansible/hg-web: synchronize templates earlier
  o  c29f28 ansible/hg-web: convert hgrc to a template
  o  166549 ansible/hg-web: tell hgweb that static files are in /static/
  o  d46d6a ansible/hg-web: serve static template files from httpd
  o  37fdad testing: only print when in verbose mode
 /   (stack base)
o  e44c2e (@) testing: install Mercurial 4.8 final
</code></pre>
<p>When the entire series of commits is incorporated into the repository,
the end state of the files is the same, so all is well. But this strategy
of using <em>fixup commits</em> (while popular - especially with Git-based tooling
like GitHub that puts a larger emphasis on the end state of changes rather
than the individual commits) isn't practiced by all projects.
<strong><code>hg absorb</code> will not help you if this is your workflow.</strong></p>
<p>A popular variation of this <em>fixup commit</em> workflow is to author a new commit
then <em>incorporate</em> this commit into a prior commit. This typically involves
the following actions:</p>
<pre><code>&lt;save changes to a file&gt;

$ hg commit
&lt;type commit message&gt;

$ hg histedit
&lt;manually choose what actions to perform to what commits&gt;

OR

&lt;save changes to a file&gt;

$ git add &lt;file&gt;
$ git commit
&lt;type commit message&gt;

$ git rebase --interactive
&lt;manually choose what actions to perform to what commits&gt;
</code></pre>
<p>Essentially, you produce a new commit. Then you run a history editing command.
You then tell that history editing command what to do (e.g. to <em>squash</em> or
<em>fold</em> one commit into another), that command performs work and produces a set
of rewritten commits.</p>
<p>In simple cases, you may make a simple change to a single file. Things are
pretty straightforward. You need to know which two commits to <em>squash</em> together.
This is often trivial. Although it can be cumbersome if there are several
commits and it isn't clear which one should be receiving the new changes.</p>
<p>In more complex cases, you may make multiple modifications to multiple files.
You may even want to <em>squash</em> your <em>fixups</em> into separate commits. And for some
code reviews, this <em>complex</em> case can be quite common. It isn't uncommon for me
to be incorporating dozens of reviewer-suggested changes across several commits!</p>
<p>These complex use cases are where things can get really complicated for version
control tool interactions. Let's say we want to make multiple changes to a file
and then incorporate those changes into multiple commits. To keep it simple,
let's assume 2 modifications in a single file <em>squashing</em> into 2 commits:</p>
<pre><code>&lt;save changes to file&gt;

$ hg commit --interactive
&lt;select changes to commit&gt;
&lt;type commit message&gt;

$ hg commit
&lt;type commit message&gt;

$ hg histedit
&lt;manually choose what actions to perform to what commits&gt;

OR

&lt;save changes to file&gt;

$ git add &lt;file&gt;
$ git add --interactive
&lt;select changes to stage&gt;

$ git commit
&lt;type commit message&gt;

$ git add &lt;file&gt;
$ git commit
&lt;type commit message&gt;

$ git rebase --interactive
&lt;manually choose which actions to perform to what commits&gt;
</code></pre>
<p>We can see that the number of actions required by users has already increased
substantially. Not captured by the number of lines is the effort that must go
into the interactive commands like <code>hg commit --interactive</code>,
<code>git add --interactive</code>, <code>hg histedit</code>, and <code>git rebase --interactive</code>. For
these commands, users must tell the VCS tool exactly what actions to take.
This takes time and requires some cognitive load. This ultimately distracts
the user from the task at hand, which is bad for concentration and productivity.
The user just wants to <em>amend</em> old commits: telling the VCS tool what actions
to take is an obstacle in their way. (A compelling argument can be made that
the work required with these workflows to produce a <em>clean</em> history is too much
effort and it is easier to make the trade-off favoring simpler workflows
versus cleaner history.)</p>
<p><strong>These kinds of <em>squash fixup</em> workflows are what <code>hg absorb</code> is designed to
make easier.</strong> When using <code>hg absorb</code>, the above workflow can be reduced to:</p>
<pre><code>&lt;save changes to file&gt;

$ hg absorb
&lt;hit y to accept changes&gt;

OR

&lt;save changes to file&gt;

$ hg absorb --apply-changes
</code></pre>
<p>Let's assume the following changes are made in the working directory:</p>
<pre><code>$ hg diff
diff --git a/ansible/roles/hg-web/templates/vhost.conf.j2 b/ansible/roles/hg-web/templates/vhost.conf.j2
--- a/ansible/roles/hg-web/templates/vhost.conf.j2
+++ b/ansible/roles/hg-web/templates/vhost.conf.j2
@@ -76,7 +76,7 @@ LimitRequestFields 1000
      # Serve static files straight from disk.
      &lt;Directory /repo/hg/htdocs/static/&gt;
          Options FollowSymLinks
 -        AllowOverride NoneTypo
 +        AllowOverride None
          Require all granted
      &lt;/Directory&gt;

@@ -86,7 +86,7 @@ LimitRequestFields 1000
      # and URLs are versioned by the v-c-t revision, they are immutable
      # and can be served with aggressive caching settings.
      &lt;Location /static/&gt;
 -        Header set Cache-Control "max-age=31536000, immutable, bad"
 +        Header set Cache-Control "max-age=31536000, immutable"
      &lt;/Location&gt;

      #LogLevel debug
</code></pre>
<p>That is, we have 2 separate uncommitted changes to
<code>ansible/roles/hg-web/templates/vhost.conf.j2</code>.</p>
<p>Here is what happens when we run <code>hg absorb</code>:</p>
<pre><code>$ hg absorb
showing changes for ansible/roles/hg-web/templates/vhost.conf.j2
        @@ -78,1 +78,1 @@
d46d6a7 -        AllowOverride NoneTypo
d46d6a7 +        AllowOverride None
        @@ -88,1 +88,1 @@
1c114a3 -        Header set Cache-Control "max-age=31536000, immutable, bad"
1c114a3 +        Header set Cache-Control "max-age=31536000, immutable"

2 changesets affected
1c114a3 ansible/hg-web: serve static files as immutable content
d46d6a7 ansible/hg-web: serve static template files from httpd
apply changes (yn)?
&lt;press "y"&gt;
2 of 2 chunk(s) applied
</code></pre>
<p><code>hg absorb</code> automatically figured out that the 2 separate uncommitted changes
<em>mapped</em> to 2 different changesets (Mercurial's term for <em>commit</em>). It
print a summary of what lines would be changed in what changesets and
prompted me to accept its <em>plan</em> for how to proceed. The human effort involved
is a quick review of the proposed changes and answering a prompt.</p>
<p>At a technical level, <code>hg absorb</code> finds all uncommitted changes and
attempts to map each changed line to an unambiguous prior commit. For
every change that can be mapped cleanly, the uncommitted changes are
<em>absorbed</em> into the appropriate prior commit. Commits impacted by the
operation are rebased automatically. If a change cannot be mapped to an
unambiguous prior commit, it is left uncommitted and users can fall back
to an existing workflow (e.g. using <code>hg histedit</code>).</p>
<p>But wait - there's more!</p>
<p>The automatic rewriting logic of <code>hg absorb</code> is implemented by following
the history of lines. This is fundamentally different from the approach
taken by <code>hg histedit</code> or <code>git rebase</code>, which tend to rely on <em>merge
strategies</em> based on the
<a href="https://stackoverflow.com/questions/4129049/why-is-a-3-way-merge-advantageous-over-a-2-way-merge">3-way merge</a>
to derive a new version of a file given multiple input versions. This
approach combined with the fact that <code>hg absorb</code> skips over changes with
an ambiguous application commit means that <strong><code>hg absorb</code> will never
encounter merge conflicts</strong>! Now, you may be thinking <em>if you ignore
lines with ambiguous application targets, the patch would always apply
cleanly using a classical 3-way merge</em>. This statement logically sounds
correct. But it isn't: <code>hg absorb</code> can avoid merge conflicts when the
merging performed by <code>hg histedit</code> or <code>git rebase -i</code> would fail.</p>
<p>The above example attempts to exercise such a use case. Focusing on the
initial change:</p>
<pre><code>diff --git a/ansible/roles/hg-web/templates/vhost.conf.j2 b/ansible/roles/hg-web/templates/vhost.conf.j2
--- a/ansible/roles/hg-web/templates/vhost.conf.j2
+++ b/ansible/roles/hg-web/templates/vhost.conf.j2
@@ -76,7 +76,7 @@ LimitRequestFields 1000
     # Serve static files straight from disk.
     &lt;Directory /repo/hg/htdocs/static/&gt;
         Options FollowSymLinks
-        AllowOverride NoneTypo
+        AllowOverride None
         Require all granted
     &lt;/Directory&gt;
</code></pre>
<p>This patch needs to be applied against the commit which introduced it. That
commit had the following diff:</p>
<pre><code>diff --git a/ansible/roles/hg-web/templates/vhost.conf.j2 b/ansible/roles/hg-web/templates/vhost.conf.j2
--- a/ansible/roles/hg-web/templates/vhost.conf.j2
+++ b/ansible/roles/hg-web/templates/vhost.conf.j2
@@ -73,6 +73,15 @@ LimitRequestFields 1000
         {% endfor %}
     &lt;/Location&gt;

+    # Serve static files from templates directory straight from disk.
+    &lt;Directory /repo/hg/hg_templates/static/&gt;
+        Options None
+        AllowOverride NoneTypo
+        Require all granted
+    &lt;/Directory&gt;
+
+    Alias /static/ /repo/hg/hg_templates/static/
+
     #LogLevel debug
     LogFormat "%h %v %u %t \"%r\" %&gt;s %b %D \"%{Referer}i\" \"%{User-Agent}i\" \"%{Cookie}i\""
     ErrorLog "/var/log/httpd/hg.mozilla.org/error_log"
</code></pre>
<p>But after that commit was another commit with the following change:</p>
<pre><code>diff --git a/ansible/roles/hg-web/templates/vhost.conf.j2 b/ansible/roles/hg-web/templates/vhost.conf.j2
--- a/ansible/roles/hg-web/templates/vhost.conf.j2
+++ b/ansible/roles/hg-web/templates/vhost.conf.j2
@@ -73,14 +73,21 @@ LimitRequestFields 1000
         {% endfor %}
     &lt;/Location&gt;

-    # Serve static files from templates directory straight from disk.
-    &lt;Directory /repo/hg/hg_templates/static/&gt;
-        Options None
+    # Serve static files straight from disk.
+    &lt;Directory /repo/hg/htdocs/static/&gt;
+        Options FollowSymLinks
         AllowOverride NoneTypo
         Require all granted
     &lt;/Directory&gt;

...
</code></pre>
<p>When we use <code>hg histedit</code> or <code>git rebase -i</code> to rewrite this history, the VCS
would first attempt to re-order commits before squashing 2 commits together.
When we attempt to reorder the <em>fixup</em> diff immediately after the commit that
introduces it, there is a good chance your VCS tool would encounter a merge
conflict. Essentially your VCS is thinking <em>you changed this line but the
lines around the change in the final version are different from the lines
in the initial version: I don't know if those other lines matter and therefore
I don't know what the end state should be, so I'm giving up and letting the
user choose for me</em>.</p>
<p>But since <code>hg absorb</code> operates at the line history level, it knows that this
individual line wasn't actually changed (even though the lines around it did),
assumes there is no conflict, and offers to <em>absorb</em> the change. So not only
is <code>hg absorb</code> significantly simpler than today's <code>hg histedit</code> or
<code>git rebase -i</code> workflows in terms of VCS command interactions, but it can
also avoid time-consuming merge conflict resolution as well!</p>
<p>Another feature of <code>hg absorb</code> is that all the rewriting occurs in memory
and the working directory is not touched when running the command. This means
that the operation is fast (working directory updates often account for a lot
of the execution time of <code>hg histedit</code> or <code>git rebase</code> commands). It also means
that tools looking at the last modified time of files (e.g. build systems
like GNU Make) won't rebuild extra (unrelated) files that were touched
as part of updating the working directory to an old commit in order to apply
changes. This makes <code>hg absorb</code> more friendly to edit-compile-test-commit
loops and allows developers to be more productive.</p>
<p>And that's <code>hg absorb</code> in a nutshell.</p>
<p>When I first saw a demo of <code>hg absorb</code> at a Mercurial developer meetup, my
jaw - along with those all over the room - hit the figurative floor. I thought
it was magical and too good to be true. I thought Facebook (the original authors
of the feature) were trolling us with an impossible demo. But it was all real.
And now <code>hg absorb</code> is available in the core Mercurial distribution for anyone
to use.  </p>
<p>From my experience, <code>hg absorb</code> <em>just works</em> almost all of the time: I run
the command and it maps all of my uncommitted changes to the appropriate
commit and there's nothing more for me to do! In a word, it is magical.</p>
<p>To use <code>hg absorb</code>, you'll need to activate the <code>absorb</code> extension. Simply
put the following in your <code>hgrc</code> config file:</p>
<pre><code>[extensions]
absorb =
</code></pre>
<p><code>hg absorb</code> is currently an experimental feature. That means there is
no commitment to backwards compatibility and some rough edges are
expected. I also anticipate new features (such as <code>hg absorb --interactive</code>)
will be added before the experimental label is removed. If you encounter
problems or want to leave comments, <a href="https://bz.mercurial-scm.org/enter_bug.cgi?product=Mercurial">file a bug</a>,
make noise in <code>#mercurial</code> on Freenode, or
<a href="https://www.mercurial-scm.org/wiki/ContributingChanges">submit a patch</a>.
But don't let the <em>experimental</em> label scare you away from using it:
<code>hg absorb</code> is being used by some large install bases and also by many
of the Mercurial core developers. The <em>experimental</em> label is mainly there
because it is a brand new feature in core Mercurial and the <em>experimental</em>
label is usually affixed to new features.</p>
<p>If you practice workflows that frequently require amending old commits, I
think you'll be shocked at how much easier <code>hg absorb</code> makes these workflows.
I think you'll find it to be a game changer: once you use <code>hg abosrb</code>, you'll
soon wonder how you managed to get work done without it.</p>]]></content:encoded>
    </item>
    <item>
      <title>Benefits of Clone Offload on Version Control Hosting</title>
      <link>http://gregoryszorc.com/blog/2018/07/27/benefits-of-clone-offload-on-version-control-hosting</link>
      <pubDate>Fri, 27 Jul 2018 15:48:00 PDT</pubDate>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/07/27/benefits-of-clone-offload-on-version-control-hosting</guid>
      <description>Benefits of Clone Offload on Version Control Hosting</description>
      <content:encoded><![CDATA[<p>Back in 2015, I implemented a feature in Mercurial 3.6 that allows
servers to advertise URLs of pre-generated <em>bundle</em> files. When a
compatible client performs a <code>hg clone</code> against a repository leveraging
this feature, it downloads and applies the bundle from a URL then goes
back to the server and performs the equivalent of an <code>hg pull</code> to obtain
the changes to the repository made after the bundle was generated.</p>
<p>On <a href="https://hg.mozilla.org/">hg.mozilla.org</a>, we've been using this
feature since 2015. We host bundles in Amazon S3 and make them available
via the CloudFront CDN. We perform
<a href="https://hg.mozilla.org/hgcustom/version-control-tools/file/99f7164339ed/hgext/hgmo/__init__.py#l1022">IP filtering on the server</a>
so clients connecting from AWS IPs are served S3 URLs corresponding to
the closest region / S3 bucket where bundles are hosted. Most
Firefox build and test automation is run out of EC2 and automatically
clones high-volume repositories from an S3 bucket hosted in the same
AWS region. (Doing an intra-region transfer is very fast and clones
can run at &gt;50 MB/s.) Everyone else clones from a CDN. See our
<a href="https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmo/bundleclone.html">official docs</a>
for more.</p>
<p>I <a href="/blog/2015/10/22/cloning-improvements-in-mercurial-3.6/">last reported</a>
on this feature in October 2015. Since then, Bitbucket also
<a href="https://developer.atlassian.com/blog/2017/02/bitbucket-CDN-cloning/">deployed this feature</a>
in early 2017.</p>
<p>I was reminded of this <em>clone bundles</em> feature this week when
kernel.org posted
<a href="https://www.kernel.org/best-way-to-do-linux-clones-for-your-ci.html">Best way to do linux clones for your CI</a>
and that post was making the rounds in my version control circles.
tl;dr git.kernel.org apparently suffers high load due to high
clone volume against the Linux Git repository and since Git doesn't
have an equivalent feature to clone bundles built in to Git itself,
they are asking people to perform equivalent functionality to mitigate
server load.</p>
<p>(A <em>clone bundles</em> feature has been discussed on the Git mailing list
before. I remember finding old discussions when I was doing research
for Mercurial's feature in 2015. I'm sure the topic has come up since.)</p>
<p>Anyway, I thought I'd provide an update on just how valuable the
<em>clone bundles</em> feature is to Mozilla. In doing so, I hope maintainers
of other version control tools see the obvious benefits and consider
adopting the feature sooner.</p>
<p>In a typical week, hg.mozilla.org is currently serving ~135 TB of
data. The overwhelming majority of this data is related to the Mercurial
wire protocol (i.e. not HTML / JSON served from the web interface).
Of that ~135 TB, ~5 TB is served from the CDN, ~126 TB is served from
S3, and ~4 TB is served from the Mercurial servers themselves. In other
words, <strong>we're offloading ~97% of bytes served from the Mercurial servers
to S3 and the CDN</strong>.</p>
<p>If we assume this offloaded ~131 TB is equally distributed throughout
the week, this comes out to ~1,732 Mbps on average. In reality, we do
most of our load from California's Sunday evenings to early Friday
evenings. And load is typically concentrated in the 12 hours when
the sun is over Europe and North America (where most of Mozilla's
employees are based). So the typical throughput we are offloading is
more than 2 Gbps. And at a lower level, automation tends to perform
clones soon after a push is made. So load fluctuates significantly
throughout the day, corresponding to when pushes are made.</p>
<p>By volume, most of the data being offloaded is for the
<a href="https://hg.mozilla.org/mozilla-unified">mozilla-unified</a> Firefox
repository. Without clone bundles and without the special <em>stream
clone</em> Mercurial feature (which we also leverage via clone bundles), the
servers would be generating and sending ~1,588 MB of zstandard level 3
compressed data for each clone of that repository. Each clone would
consume ~280s of CPU time on the server. And at ~195,000 clones per
month, that would come out to ~309 TB/mo or ~72 TB/week. In CPU time,
that would be ~54.6 million CPU-seconds, or ~21 CPU-months. I will
leave it as an exercise to the reader to attach a dollar cost to how
much it would take to operate this service without clone bundles. But
I will say the total AWS bill for our S3 and CDN hosting for this
service is under $50 per month. (It is worth noting that intra-region
data transfer from S3 to other AWS services is free. And we are
definitely taking advantage of that.)</p>
<p>Despite a significant increase in the size of the Firefox repository and
clone volume of it since 2015, our servers are still performing less
work (in terms of bytes transferred and CPU seconds consumed) than they
were in 2015. The ~97% of bytes and millions of CPU seconds offloaded
in any given week have given us a lot of breathing room and have
saved Mozilla several thousand dollars in hosting costs. The feature
has likely helped us avoid many operational incidents due to high server
load. It has made Firefox automation faster and more reliable.</p>
<p>Succinctly, Mercurial's <em>clone bundles</em> feature has successfully and
largely effortlessly offloaded a ton of load from the hg.mozilla.org
Mercurial servers. Other version control tools should implement this
feature because it is a game changer for server operators <strong>and</strong>
results in a better client-side experience (eliminates server-side CPU
bottleneck and may eliminate network bottleneck due to a geo-local CDN
typically being as fast as your Internet pipe). It's a win-win. And a
massive win if you are operating at scale.</p>]]></content:encoded>
    </item>
    <item>
      <title>Deterministic Firefox Builds</title>
      <link>http://gregoryszorc.com/blog/2018/06/20/deterministic-firefox-builds</link>
      <pubDate>Wed, 20 Jun 2018 11:10:00 PDT</pubDate>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/06/20/deterministic-firefox-builds</guid>
      <description>Deterministic Firefox Builds</description>
      <content:encoded><![CDATA[<p>As of Firefox 60, the build environment for official Firefox Linux builds
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1399679">switched</a> from CentOS
to Debian.</p>
<p>As part of the transition, we overhauled how the build environment for
Firefox is constructed. We now populate the environment from deterministic
package snapshots and are much more stringent about dependencies and operations
being deterministic and reproducible. The end result is that the build
environment for Firefox is deterministic enough to enable Firefox itself
to be built deterministically.</p>
<p>Changing the underlying operating system environment used for builds was
a risky change. Differences in the resulting build could result in new
bugs or some users not being able to run the official builds. We figured
a good way to mitigate that risk was to make the old and new builds as
bit-identical as possible. After all, if the environments produce the same
bits, then nothing has effectively changed and there should be no new risk
for end-users.</p>
<p>Employing the <em>diffoscope</em> tool, we identified areas where Firefox builds
weren't deterministic in the same environment and where there was variance
across build environments. We iterated on differences and changed systems
so variance would no longer occur. By the end of the process, we had
bit-identical Firefox builds across environments.</p>
<p>So, as of Firefox 60, Firefox builds on Linux are deterministic in our
official build environment!</p>
<p>That being said, the builds we ship to users are using PGO. And an
end-to-end build involving PGO is intrinsically not deterministic because
it relies on timing data that varies from one run to the next. And we don't
yet have continuous automated end-to-end testing that determinism holds.
But the underlying infrastructure to support deterministic and reproducible
Firefox builds is there and is not going away. I think that's a milestone
worth celebrating.</p>
<p>This milestone required the effort of many people, often working indirectly
toward it. Debian's <a href="https://wiki.debian.org/ReproducibleBuilds">reproducible builds</a>
effort gave us an operating system that provided deterministic and
reproducible guarantees. Switching Firefox CI to Taskcluster enabled us
to switch to Debian relatively easily. Many were involved with
non-determinism fixes in Firefox over the years. But Mike Hommey drove the
transition of the build environment to Debian and he deserves recognition for
his individual contribution. Thanks to all these efforts - and especially Mike
Hommey's - we can now say <em>Firefox builds deterministically</em>!</p>
<p>The
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=885777">fx-reproducible-build</a> bug
tracks ongoing efforts to further improve the reproducibility story of
Firefox. (~300 bugs in its dependency tree have already been resolved!)</p>]]></content:encoded>
    </item>
    <item>
      <title>Scaling Firefox Development Workflows</title>
      <link>http://gregoryszorc.com/blog/2018/05/16/scaling-firefox-development-workflows</link>
      <pubDate>Wed, 16 May 2018 16:10:00 PDT</pubDate>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/05/16/scaling-firefox-development-workflows</guid>
      <description>Scaling Firefox Development Workflows</description>
      <content:encoded><![CDATA[<p>One of the central themes of my time at Mozilla has been my pursuit
of making it easier to contribute to and hack on Firefox.</p>
<p>I vividly remember my first day at Mozilla in 2011 when I went to
build Firefox for the first time. I thought the entire experience -
from obtaining the source code, installing build dependencies, building,
running tests, submitting patches for review, etc was quite... lacking.
When I asked others if they thought this was an issue, many rightfully
identified problems (like the build system being slow). But there was
a significant population who seemed to be naive and/or apathetic to
the breadth of the user experience shortcomings. This is totally
understandable: the scope of the problem is immense and various
people don't have the perspective, are blinded/biased by personal
experience, and/or don't have the product design or UX experience
necessary to comprehend the problem.</p>
<p><strong>When it comes to contributing to Firefox, I think the problems have
as much to do with user experience (UX) as they do with technical
matters.</strong> As I
<a href="/blog/2012/05/07/improving-the-mozilla-build-system-experience/">wrote in 2012</a>,
<em>user experience matters and developers are people too.</em> You can have
a technically superior product, but if the UX is bad, you will have a
hard time attracting and retaining new users. And existing users won't
be as happy. These are the kinds of problems that a product manager or
designer deals with. A difference is that in the case of Firefox
development, the target audience is a very narrow and highly
technically-minded subset of the larger population - much smaller than
what your typical product targets. The total addressable population is
(realistically) in the thousands instead of millions. But this doesn't
mean you ignore the principles of good product design when designing
developer tooling. <strong>When it comes to developer tooling and workflows, I
think it is important to have a <em>product manager</em> mindset and treat it
not as a collection of tools for technically-minded individuals, but as
a product having an overall experience.</strong> You only have to look as far as
the Firefox Developer Tools to see this approach applied and the positive
results it has achieved.</p>
<p>Historically, Mozilla has lacked a formal team with the domain expertise
and mandate to treat Firefox contribution as a <em>product</em>. We didn't have
anything close to this until a few years ago. Before we had such a team,
I took on some of these problems individually. In 2012, I wrote <code>mach</code> - a
generic CLI command dispatch tool - to provide a central, convenient,
and easy-to-use command to discover development actions and to run them.
(Read the <a href="/blog/2012/09/26/mach-has-landed/">announcement blog post</a> for
some historical context.) I also
<a href="/blog/2012/09/18/bootstrap-your-system-to-build-firefox/">introduced</a>
a one-line bootstrap tool (now <code>mach bootstrap</code>) to make it easier to
configure your machine for building Firefox. A few months later, I
was responsible for
<a href="/blog/2013/02/28/moz.build-files-and-the-firefox-build-system/">introducing moz.build files</a>,
which paved the way for countless optimizations and for rearchitecting
the Firefox build system to use modern tools - a project that is still
ongoing (digging out from ~two decades of technical debt is a massive
effort). And a few months after that, I started going down the version
control rabbit hole and improving matters there. And I was also heavily
involved with MozReview for improving the code review experience.</p>
<p>Looking back, I was responsible for and participated in a ton of
foundational changes to how Firefox is developed. Of course, dozens of
others have contributed to getting us to where we are today and I can't
and won't take credit for the hard work of others. Nor will I claim I was the
only person coming up with good ideas or transforming them into reality. I
can name several projects (like Taskcluster and Treeherder) that have
been just as or more transformational than the changes I can take credit
for. It would be vain and naive of me to elevate my contributions on a
taller pedestal and I hope nobody reads this and thinks I'm doing that.</p>
<p>(On a personal note, numerous people have told me that things like <code>mach</code>
and the bootstrap tool have transformed the Firefox contribution experience
for the better. I've also had very senior people tell me that they don't
understand why these tools are important and/or are skeptical of the need
for investments in this space. I've found this dichotomy perplexing and
troubling. Because some of the <em>detractors</em> (for lack of a better word) are
highly influential and respected, their apparent skepticism sews seeds of
doubt and causes me to second guess my contributions and world view. This
feels like a form or variation of imposter syndrome and it is something I
have struggled with during my time at Mozilla.)</p>
<p>From my perspective, the previous five or so years in Firefox development
workflows has been about initiating foundational changes and executing on
them. When it was introduced, <code>mach</code> was <em>radical</em>. It didn't do much and
its use was optional. Now almost everyone uses it. Similar stories have
unfolded for Taskcluster, MozReview, and various other tools and
platforms. In other words, we laid a foundation and have been steadily
building upon it for the past several years. That's not to say other
foundational changes haven't occurred since (they have - the imminent switch
to Phabricator is a terrific example). But the volume of foundational
changes has slowed since 2012-2014. (I think this is due to Mozilla
deciding to invest more in tools as a result of growing pains from
significant company expansion that began in 2010. With that investment, we
invested in the bigger ticket long-standing workflow pain points, such as
CI (Taskcluster), the Firefox build system, Treeherder, and code review.)</p>
<h2>Workflows Today and in the Future</h2>
<p>Over the past several years, the size, scope, and complexity of Firefox
development activities has increased.</p>
<p>One way to see this is at the source code level. The following chart
shows the size of the <a href="https://hg.mozilla.org/mozilla-central/">mozilla-central</a>
version control repository over time.</p>
<p><img alt="mozilla-central size over time" src="/images/firefox-repo-size-over-time.png" /></p>
<p>The size increases are obvious. The increases cumulatively represent
new features, technologies, and workflows. For example, the repository
contains thousands of <em>Web Platform Tests</em> (WPT) files, a shared test
suite for web platform implementations, like Gecko and Blink. WPT didn't
exist a few years ago. Now we have files under source control, tools for
running those tests, and workflows revolving around changing those tests.
The incorporation of Rust and components of Servo into Firefox is also
responsible for significant changes. Firefox features such as Developer
Tools have been introduced or ballooned in size in recent years. The
<em>Go Faster</em> project and the move to system add-ons has introduced various
new workflows and challenges for testing Firefox.</p>
<p>Many of these changes are building upon the user-facing foundational
workflow infrastructure that was last significantly changed in 2012-2014.
This has definitely contributed to some growing pains. For example, there
are now 92 <code>mach</code> commands instead of like 5. <code>mach help</code> - intended to
answer <em>what can I do and how should I do it</em> - is overwhelming, especially
to new users. The repository is around 2 gigabytes of data to clone instead
of around 500 megabytes. We have 240,000 files in a full checkout instead
of 70,000 files. There's a <strong>ton</strong> of new pieces floating around. Any
product manager tasked with user acquisition and retention will tell you
that increasing the barrier to entry and use will jeopardize these
outcomes. But with the growth of Firefox's technical underbelly in the
previous years, we've made it harder to contribute by requiring users to
download and see a lot more files (version control) and be overwhelmed
by all the options for actions to take (<code>mach</code> having 92 commands). And
as the sheer number of components constituting Firefox increases, it
becomes harder and harder for everyone - not just new contributors - to
reason about how everything fits together.</p>
<p>I've been framing this general problem as <em>scaling Firefox development
workflows</em> and <strong>every time I think about the high-level challenges facing
Firefox contribution today and in the years ahead, this problem floats
to the top of my list of concerns</strong>. Yes, we have pressing issues like
improving the code review experience and making the Firefox build
system and Taskcluster-based CI fast, efficient, and reliable. But even
if you make these individual pieces great, there is still a cross-domain
problem of how all these components weave together. <strong>This is why I think
it is important to take a wholistic view and treat developer workflow
as a product.</strong></p>
<p>When I look at this the way a product manager or designer would, I see a
few fundamental problems that need addressing.</p>
<p>First, we're not optimizing for comprehensive end-to-end workflows. By and
large, we're designing our tools in isolation. We focus more on maximizing
the individual components instead of maximizing the interaction between
them. For example, Taskcluster and Treeherder are pretty good in isolation.
But we're missing features like Treeherder being able to tell me the
command to run locally to reproduce a failure: I want to see a failure on
Treeherder and be able to copy and paste commands into my terminal to
debug the failure. In the case of code review, we've designed two good
code review tools (MozReview and Phabricator) but we haven't invested in
making submitting code reviews turn key (the initial system configuration
is difficult and we still don't have things like automatic bug filing or
reviewer selection). <strong>We are leaving many workflow optimizations on
the table by not implementing thoughtful tie-ins and transitions between
various tools.</strong></p>
<p>Second, by-and-large we're still optimizing for a single, monolithic user
segment instead of recognizing and optimizing for different users and
their workflow requirements. For example, <code>mach help</code> lists 92 commands.
I don't think any single person cares about all 92 of those commands. The
average person may only care about 10 or even 20. In terms of user
interface design, the features and workflow requirements of small user
segments are polluting the interface for all users and making the entire
experience complicated and difficult to reason about. As a concrete
example, why should a system add-on developer or a Firefox Developer Tools
developer (these people tend to care about testing a standalone Firefox
add-on) care about Gecko's build system or tests? If you aren't touching
Gecko or Firefox's <em>chrome</em> code, why should you be exposed to workflows
and requirements that don't have a major impact on you? Or something more
extreme, if you are developing a standalone Rust module or Python package
in mozilla-central, why do you need to care about Firefox at all? (Yes,
Firefox or another downstream consumer may care about changes to that
<em>standalone</em> component and you can't ignore those dependencies. But it
should at least be possible to hide those dependencies.)</p>
<p>Waving my hands, the solution to these problems is to treat Firefox
development workflow as a product and to apply the same rigor that we
use for actual Firefox product development. Give people with a vision
for the entire workflow the ability to prioritize investment across
tools and platforms. Give them a process for defining features that
work across tools. Perform formal user studies. See how people are
actually using the tools you build. Bring in design and user experience
experts to help formulate better workflows. Perform user typing so
different, segmentable workflows can be optimized for. Treat developers
as you treat users of <em>real</em> products: listen to them. Give developers
a voice to express frustrations. Let them tell you what they are trying
to do and what they wish they could do. Integrate this feedback into a
feature roadmap. Turn common feedback into action items for new features.</p>
<p>If you think these ideas are silly and it doesn't make sense to apply a
<em>product mindset</em> to developer workflows and tooling, then you should be
asking whether product management and all that it entails is also a silly
idea. If you believe that aspects of product management have beneficial
outcomes (which most companies do because otherwise there wouldn't be
product managers), then why <em>wouldn't</em> you want to apply the methods of
that discipline to developers and development workflows? Developers are
users too and the fact that they work for the same company that is
creating the product shouldn't make them immune from the benefits of
product management.</p>
<p>If we want to make contributing to Firefox an even better experience for
Mozilla employees and community contributors, I think we need to take a step
back and assess the situation as a product manager would. The improvements
that have been made to the individual pieces constituting Firefox's
development workflow during my nearly seven years at Mozilla have been
incredible. But I think in order to achieve the next round of major
advancements in workflow productivity, we'll need to focus on how all of
the pieces fit together. And that requires treating the entire workflow
as a cohesive product.</p>]]></content:encoded>
    </item>
    <item>
      <title>Revisiting Using Docker</title>
      <link>http://gregoryszorc.com/blog/2018/05/16/revisiting-using-docker</link>
      <pubDate>Wed, 16 May 2018 13:45:00 PDT</pubDate>
      <category><![CDATA[Docker]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/05/16/revisiting-using-docker</guid>
      <description>Revisiting Using Docker</description>
      <content:encoded><![CDATA[<p>When Docker was taking off like wildfire in 2013, I was caught up in the
excitement like everyone else. I remember knowing of the existence
of LXC and container technologies in Linux at the time. But Docker seemed to
be the first open source tool to actually make that technology usable (a
terrific example of how user experience matters).</p>
<p>At Mozilla, Docker was adopted all around me and by me for various utilities.
<a href="https://docs.taskcluster.net/">Taskcluster</a> - Mozilla's task execution
framework geared for running complex CI systems - adopted Docker as a
mechanism to run processes in self-contained images. Various groups in
Mozilla adopted Docker for running services in production. I adopted Docker
for
<a href="/blog/2015/01/24/end-to-end-testing-with-docker/">integration testing of complex systems</a>.</p>
<p>Having seen various groups use Docker and having spent a lot of time in the
trenches battling technical problems, my conclusion is <strong>Docker is unsuitable
as a general purpose container runtime. Instead, Docker has its niche
for hosting complex network services.</strong> Other uses of Docker should be highly
scrutinized and potentially discouraged.</p>
<p>When Docker hit first the market, it was arguably the only game in town.
Using Docker to achieve containerization was defensible because there weren't
exactly many (any?) practical alternatives. So if you wanted to use containers,
you used Docker.</p>
<p>Fast forward a few years. We now have the
<a href="https://www.opencontainers.org/">Open Container Initiative</a> (OCI). There are
specifications describing common container formats. So you can produce a
container once and take it to any number OCI compatible <em>container runtimes</em>
for execution. And in 2018, there are a <em>ton</em> of players in this space.
<a href="https://github.com/opencontainers/runc">runc</a>,
<a href="https://github.com/rkt/rkt">rkt</a>, and
<a href="https://github.com/google/gvisor">gVisor</a> are just some. So Docker is no
longer the only viable tool for executing a container. If you are just
getting started with the container space, you would be wise to research the
available options and their pros and cons.</p>
<p>When you look at all the options for running containers in 2018, I think it
is obvious that Docker - usable though it may be - is not ideal for a
significant number of container use cases. If you divide use cases into a spectrum
where one end is <em>run a process in a sandbox</em> and the other is <em>run a complex system
of orchestrated services in production</em>, Docker appears to be focusing on the
latter. Take it from <a href="https://www.docker.com/what-docker">Docker themselves</a>:</p>
<p><em>Docker is the company driving the container movement and the only container
platform provider to address every application across the hybrid cloud. Today's
businesses are under pressure to digitally transform but are constrained by
existing applications and infrastructure while rationalizing an increasingly
diverse portfolio of clouds, datacenters and application architectures. Docker
enables true independence between applications and infrastructure and developers
and IT ops to unlock their potential and creates a model for better
collaboration and innovation.</em></p>
<p>That description of Docker (the company) does a pretty good job of
describing what Docker (the technology) has become: a constellation
of software components providing the underbelly for managing complex
applications in complex infrastructures. That's pretty far detached on the
spectrum from <em>run a process in a sandbox</em>.</p>
<p>Just because Docker (the company) is focused on a complex space doesn't mean
they are incapable of exceeding at solving simple problems. However, I believe
that in this particular case, the complexity of what Docker (the company) is
focusing on has inhibited its Docker products to adequately address simple
problems.</p>
<p>Let's dive into some technical specifics.</p>
<p>At its most primitive, Docker is a glorified tool to run a process in a
sandbox. On Linux, this is accomplished by using
the <a href="http://man7.org/linux/man-pages/man2/clone.2.html">clone(2)</a> function
with specific flags and combined with various other techniques (filesystem
remounting, capabilities, cgroups, chroot, seccomp, etc) to <em>sandbox</em> the
process from the main operating system environment and kernel. There are a host
of tools living at this not-quite-containers level that make it easy to run
a sandboxed process. The
<a href="https://github.com/projectatomic/bubblewrap">bubblewrap</a> tool is one of them.</p>
<p>Strictly speaking, you don't need anything fancy to create a process
sandbox: just an executable you want to invoke and an executable that makes
a set of system calls (like bubblewrap) to run that executable.</p>
<p>When you install Docker on a machine, it starts a daemon running as root.
That daemon listens for HTTP requests on a network port and/or UNIX socket.
When you run <code>docker run</code> from the command line, that command establishes
a connection to the Docker daemon and sends any number of HTTP requests to
instruct the daemon to take actions.</p>
<p>A daemon with a remote control protocol is useful. But it shouldn't be the
only way to spawn containers with Docker. If all I want to do is spawn a temporary
container that is destroyed afterwards, I should be able to do that from
a local command without touching a network service. Something like bubblewrap.
The daemon adds all kinds of complexity and overhead. Especially if I just want
to run a simple, short-lived command.</p>
<p>Docker at this point is already pretty far detached from a tool like bubblewrap.
And the disparity gets worse.</p>
<p>Docker adds another abstraction on top of basic process sandboxing in the form
of storage / filesystem management. Docker insists that processes execute in
self-contained, chroot()'d filesystem environment and that these environments
(Docker images) be managed by Docker itself. When Docker images are <em>imported</em>
into Docker, Docker manages them using one of a handful of
<a href="https://docs.docker.com/storage/storagedriver/">storage drivers</a>. You can choose
from devicemapper, overlayfs, zfs, btrfs, and aufs and employ various
configurations of all these. Docker images are composed of <em>layers</em>, with one
layer stacked on top of the prior. This allows you to have an immutable base
layer (that can be shared across containers) where run-time file changes can be
isolated to a specific container instance.</p>
<p>Docker's ability to manage storage is pretty cool. And I dare say Docker's killer
feature in the very beginning of Docker was the ability to easily produce and
exchange self-contained Docker <em>images</em> across machines.</p>
<p>But this utility comes at a <em>very</em> steep price. Again, if our use case is
<em>run a process in a sandbox</em>, do we really care about all this advanced
storage functionality? Yes, if you are running hundreds of containers on
a single system, a storage model built on top of copy-on-write is perhaps
necessary for scaling. But for simple cases where you just want to run a single
or small number of processes, it is extremely overkill and adds many more
problems than it solves.</p>
<p>I cannot stress this enough, but <strong>I have spent hours debugging and working
around problems due to how filesystems/storage works in Docker</strong>.</p>
<p>When Docker was initially released, aufs was widely used. As I
<a href="/blog/2017/12/08/good-riddance-to-aufs/">previously wrote</a>, aufs has abysmal
performance as you scale up the number of concurrent I/O operations. We shaved
<strong>minutes</strong> off tasks in Firefox CI by ditching aufs for overlayfs.</p>
<p>But overlayfs is far from a panacea. File metadata-only updates are
<a href="https://hg.mozilla.org/hgcustom/version-control-tools/rev/63f19cfacc5c">apparently very slow in overlayfs</a>.
We're talking ~100ms to call <code>fchownat()</code> or <code>utimensat()</code>. If you perform
an <code>rsync -a</code> or <code>chown -R</code> on a directory with only just a hundred files that
were defined in a base image layer, you can have delays of seconds.</p>
<p>The Docker storage drivers backed by <em>real</em> filesystems like zfs and btrfs are
a bit better. But they have their quirks too. For example, creating layers in
images is comparatively very slow compared to overlayfs (which are practically
instantaneous). This matters when you are iterating on a Dockerfile for example
and want to quickly test changes. Your edit-compile cycle grows frustratingly
long very quickly.</p>
<p>And I could opine on a handful of other problems I've encountered over the years.</p>
<p>Having spent hours of my life debugging and working around issues with
Docker's storage, my current attitude is <em>enough of this complexity, just let me
use a directory backed by the local filesystem, dammit</em>.</p>
<p>For many use cases, <strong>you don't need the storage complexity that Docker forces
upon you</strong>. Pointing Docker at a directory on a local filesystem to chroot into
is <em>good enough</em>. I know the behavior and performance properties of common Linux
filesystems. ext4 isn't going to start making <code>fchownat()</code> or <code>utimensat()</code> calls
take ~100ms. It isn't going to complain when a hard link spans multiple layers in
an image. Or slow down to a crawl when multiple threads are performing concurrent
read I/O. There's not going to be intrinsically complicated algorithms and
caching to walk N image layers to find the most recent version of a file (or if
there is, it will be so far down the stack in kernel land that I likely won't
ever have to deal with it as a normal user). Docker images with their multiple
layers add complexity and overhead. For many use uses, the pain it inflicts
offsets the initial convenience it saves.</p>
<p>Docker's optimized-for-complex-use-cases architecture demonstrates its
inefficiency in simple benchmarks.</p>
<p>On my machine, <code>docker run -i --rm debian:stretch /bin/ls /</code> takes ~850ms.
Almost a second to perform a directory listing (sometimes it does take over
1 second - I was being generous and quoting a quicker time). This command
takes ~1ms when run in a local shell. So we're at 2.5-3 magnitudes of overhead.
The time here does include time to initially create the container and
destroy it afterwards. We can isolate that overhead by starting a persistent
container and running <code>docker exec -i &lt;cid&gt; /bin/ls /</code> to spawn a new process
in an existing container. This takes ~85ms. So, ~2 magnitudes of overhead to
spawn a process in a Docker container versus spawning it <em>natively</em>. What's
adding so much overhead, I'm not sure. Yes, there are HTTP requests under
the hood. But HTTP to a local daemon shouldn't be that slow. I'm not sure
what's going on.</p>
<p>If we <code>docker export</code> that image to the local filesystem and use <code>runc state</code>
to configure so we can run it with <code>runc</code>, <code>runc run</code> takes ~85ms to run
<code>/bin/ls /</code>. If we <code>runc exec &lt;cid&gt; /bin/ls /</code> to start a process in an
existing container, that completes in ~10ms. <code>runc</code> appears to be executing
these simple tasks ~10x faster than Docker.</p>
<p>But to even get to that point, we had to make a filesystem available to
spawn the container in. With Docker, you need to load an image into Docker.
Using <code>docker save</code> to produce a 105,523,712 tar file,
<code>docker load -i image.tar</code> takes ~1200ms to complete. <code>tar xf image.tar</code>
takes ~65ms to extract that image to the local filesystem. Granted, Docker
is computing the SHA-256 of the image as part of import. But SHA-256 runs
at ~250MB/s on my machine and on that ~105MB input takes ~400ms. Where is
that extra ~750ms of overhead in Docker coming from?</p>
<p>The Docker image loading overhead is still present on large images. With
a 4,336,605,184 image, <code>docker load</code> was taking ~32s and <code>tar x</code> was
taking ~2s. Obviously the filesystem was buffering writes in the <code>tar</code>
case. And the ~2s is ignoring the ~17s to obtain the SHA-256 of the
entire input. But there's still a substantial disparity here. (I suspect
a lot of it is overlayfs not being as optimal as ext4.)</p>
<p>Several years ago there weren't many good choices for tools to execute containers.
But today, there are good tools readily available. And thanks to OCI standards,
you can often swap in alternate container runtimes. Docker (the tool) has an
architecture that is optimized for solving complex use cases (coincidentally use
cases that Docker the company makes money from). Because of this, my conclusion -
drawn from using Docker for several years - is that Docker is unsuitable for
many common use cases. <strong>If you care about low container startup/teardown
overhead, low latency when interacting with containers (including spawning
processes from outside of them), and for workloads where Docker's storage model
interferes with understanding or performance, I think Docker should be avoided.</strong>
A simpler tool (such as <code>runc</code> or even <code>bubblewrap</code>) should be used instead.</p>
<p>Call me a curmudgeon, but having seen all the problems that Docker's complexity
causes, I'd rather see my containers resemble a tarball that can easily be
chroot()'d into. <strong>I will likely be revisiting projects that use Docker and
replacing Docker with something lighter weight and architecturally simpler.</strong> As
for the use of Docker in the more complex environments it seems to be designed
for, I don't have a meaningful opinion as I've never really used it in that
capacity. But given my negative experiences with Docker over the years, I am
definitely biased against Docker and will lean towards simpler products, especially
if their storage/filesystem management model is simpler. Docker introduced
containers to the masses and they should be commended for that. But for my
day-to-day use cases for containers, Docker is simply not the right tool for
the job.</p>
<p>I'm not sure exactly what I'll replace Docker with for my simpler use cases.
If you have experiences you'd like to share, sharing them in the comments
will be greatly appreciated.</p>]]></content:encoded>
    </item>
    <item>
      <title>Release of python-zstandard 0.9</title>
      <link>http://gregoryszorc.com/blog/2018/04/09/release-of-python-zstandard-0.9</link>
      <pubDate>Mon, 09 Apr 2018 09:30:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2018/04/09/release-of-python-zstandard-0.9</guid>
      <description>Release of python-zstandard 0.9</description>
      <content:encoded><![CDATA[<p>I have just released
<a href="https://pypi.python.org/pypi/zstandard/0.9.0">python-zstandard 0.9.0</a>. You can
install the latest release by running <code>pip install zstandard==0.9.0</code>.</p>
<p><a href="http://facebook.github.io/zstd/">Zstandard</a> is a highly tunable and therefore
flexible compression algorithm with support for modern features such as
multi-threaded compression and <em>dictionaries</em>. Its performance is remarkable
and if you use it as a drop-in replacement for zlib, bzip2, or other common
algorithms, you'll frequently see more than a doubling in performance.</p>
<p>python-zstandard provides rich bindings to the zstandard C library without
sacrificing performance, safety, features, or a Pythonic feel. The bindings
run on Python 2.7, 3.4, 3.5, 3.6, 3.7 using either a C extension or CFFI
bindings, so it works with CPython and PyPy.</p>
<p>I can make a compelling argument that python-zstandard is one of the
richest compression packages available to Python programmers. Using it, you
will be able to leverage compression in ways you couldn't with other packages
(especially those in the standard library) all while achieving ridiculous
performance. Due to my focus on performance, python-zstandard is able to
outperform Python bindings to other compression libraries that <em>should</em> be
faster. This is because python-zstandard is very diligent about minimizing
memory allocations and copying, minimizing Python object creation, reusing
state, etc.</p>
<p>While python-zstandard is formally marked as a beta-level project and hasn't
yet reached a 1.0 release, it is suitable for production usage.
python-zstandard 0.8 shipped with Mercurial and is in active production
use there. I'm also aware of other consumers using it in production, including
at Facebook and Mozilla.</p>
<p>The sections below document some of the new features of python-zstandard 0.9.</p>
<h2>File Object Interface for Reading</h2>
<p>The 0.9 release contains a <code>stream_reader()</code> API on the compressor and
decompressor objects that allows you to treat those objects as readable file
objects. This means that you can pass a <code>ZstdCompressor</code> or <code>ZstdDecompressor</code>
around to things that accept file objects and things generally <em>just work</em>.
e.g.:</p>
<div class="pygments_murphy"><pre><span></span>   <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">compressed_file</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">ifh</span><span class="p">:</span>
       <span class="n">cctx</span> <span class="o">=</span> <span class="n">zstd</span><span class="o">.</span><span class="n">ZstdDecompressor</span><span class="p">()</span>
       <span class="k">with</span> <span class="n">cctx</span><span class="o">.</span><span class="n">stream_reader</span><span class="p">(</span><span class="n">ifh</span><span class="p">)</span> <span class="k">as</span> <span class="n">reader</span><span class="p">:</span>
           <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
               <span class="n">chunk</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">32768</span><span class="p">)</span>
               <span class="k">if</span> <span class="ow">not</span> <span class="n">chunk</span><span class="p">:</span>
                   <span class="k">break</span>
</pre></div>

<p>This is probably the most requested python-zstandard feature.</p>
<p>While the feature is usable, it isn't complete. Support for <code>readline()</code>,
<code>readinto()</code>, and a few other APIs is not yet implemented. In addition,
you can't use these <em>reader</em> objects for opening zstandard compressed
tarball files because Python's <code>tarfile</code> package insists on doing
backward seeks when reading. The current implementation doesn't support
backwards seeking because that requires buffering decompressed output and that
is not trivial to implement. I recognize that all these features are useful
and I will try to work them into a subsequent release of 0.9.</p>
<h2>Negative Compression Levels</h2>
<p>The 1.3.4 release of zstandard (which python-zstandard 0.9 bundles) supports
negative compression levels. I won't go into details, but negative compression
levels disable extra compression features and allow you to trade compression
ratio for more speed.</p>
<p>When compressing a 6,472,921,921 byte uncompressed bundle of the Firefox
Mercurial repository, the previous fastest we could go with level 1 was
~510 MB/s (measured on the input side) yielding a 1,675,227,803 file (25.88%
of original).</p>
<p>With level <code>-1</code>, we compress to 1,934,253,955 (29.88% of original) at
~590 MB/s. With level <code>-5</code>, we compress to 2,339,110,873 bytes (36.14% of
original) at ~720 MB/s.</p>
<p>On the decompress side, level 1 decompresses at ~1,150 MB/s (measured at
the output side), -1 at ~1,320 MB/s, and -5 at ~1,350 MB/s (generally speaking,
zstandard's decompression speeds are relatively similar - and fast - across
compression levels).</p>
<p>And that's just with a single thread. zstandard supports using multiple
threads to compress a single input and python-zstandard makes this feature
easy to use. Using 8 threads on my 4+4 core i7-6700K, level 1 compresses
at ~2,000 MB/s (3.9x speedup), -1 at ~2,300 MB/s (3.9x speedup), and -5
at ~2,700 MB/s (3.75x speedup).</p>
<p>That's with a large input. What about small inputs?</p>
<p>If we take 456,599 Mercurial commit objects spanning 298,609,254 bytes from
the Firefox repository and compress them individually, at level 1 we yield
a total of 133,457,198 bytes (44.7% of original) at ~112 MB/s. At level -1,
we compress to 161,241,797 bytes (54.0% of original) at ~215 MB/s. And at
level -5, we compress to 185,885,545 bytes (62.3% of original) at ~395 MB/s.</p>
<p>On the decompression side, level 1 decompresses at ~260 MB/s, -1 at
~1,000 MB/s, and -5 at ~1,150 MB/s.</p>
<p>Again, that's 456,599 operations on a single thread with Python.</p>
<p>python-zstandard has an <em>experimental</em> API where you can pass in a collection
of inputs and it batch compresses or decompresses them in a single operation.
It releases and GIL and uses multiple threads. It puts the results in shared
buffers in order to minimize the overhead of memory allocations and Python
object creation and garbage collection. Using this mode with 8 threads on
my 4+4 core i7-6700K, level 1 compresses at ~525 MB/s, -1 at ~1,070 MB/s,
and -5 at ~1,930 MB/s. On the decompression side, level 1 is ~1,320 MB/s,
-1 at ~3,800 MB/s, and -5 at ~4,430 MB/s.</p>
<p>So, my consumer grade desktop i7-6700K is capable of emitting decompressed
data at over 4 GB/s with Python. That's pretty good if you ask me. (Full
disclosure: the timings were taken just around the compression operation
itself: overhead of loading data into memory was not taken into account. See
the <code>bench.py</code> script in the
<a href="https://github.com/indygreg/python-zstandard">source repository</a> for more.</p>
<h2>Long Distance Matching Mode</h2>
<p>Negative compression levels take zstandard into performance territory that
has historically been reserved for compression formats like lz4 that are
optimized for that domain. <em>Long distance matching</em> takes zstandard in the
other direction, towards compression formats that aim to achieve optimal
compression ratios at the expense of time and memory usage.</p>
<p>python-zstandard 0.9 supports long distance matching and all the configurable
parameters exposed by the zstandard API.</p>
<p>I'm not going to capture many performance numbers here because python-zstandard
performs about the same as the C implementation because <em>LDM</em> mode spends
most of its time in zstandard C code. If you are interested in numbers, I
recommend reading the zstandard
<a href="https://github.com/facebook/zstd/releases/tag/v1.3.2">1.3.2</a>
and <a href="https://github.com/facebook/zstd/releases/tag/v1.3.4">1.3.4</a> release notes.</p>
<p>I will, however, underscore that zstandard can achieve close to lzma's
compression ratios (what the <code>xz</code> utility uses) while completely smoking
lzma on decompression speed. For a bundle of the Firefox Mercurial repository,
zstandard level 19 with a long distance window size of 512 MB using 8 threads
compresses to 1,033,633,309 bytes (16.0%) in ~260s wall, 1,730s CPU.
<code>xz -T8 -8</code> compresses to 1,009,233,160 (15.6%) in ~367s wall, ~2,790s CPU.</p>
<p>On the decompression side, zstandard takes ~4.8s and runs at ~1,350 MB/s as
measured on the output side while <code>xz</code> takes ~54s and runs at ~114 MB/s.
Zstandard, however, does use a lot more memory than <code>xz</code> for decompression,
so that performance comes with a cost (512 MB versus 32 MB for this
configuration).</p>
<h2>Other Notable Changes</h2>
<p>python-zstandard now uses the <em>advanced</em> compression and decompression APIs
everywhere. All tunable compression and decompression parameters are available
to python-zstandard. This includes support for disabling magic headers in frames
(saves 4 bytes per frame - this can matter for very small inputs, especially when
using dictionary compression).</p>
<p>The full dictionary training API is exposed. Dictionary training can now use
multiple threads.</p>
<p>There are a handful of utility functions for inspecting zstandard frames,
querying the state of compressors, etc.</p>
<p>Lots of work has gone into shoring up the code base. We now build with warnings
as errors in CI. I performed a number of focused auditing passes to fix
various classes of deficiencies in the C code. This includes use of the
<em>buffer protocol</em>: python-zstandard is now able to accept <em>any</em> Python
object that provides a view into its underlying raw data.</p>
<p>Decompression contexts can now be constructed with a max memory threshold
so attempts to decompress something that would require more memory will
result in error.</p>
<p>See the
<a href="https://github.com/indygreg/python-zstandard/releases/tag/0.9.0">full release notes</a>
for more.</p>
<h2>Conclusion</h2>
<p>Since I last released a major version of python-zstandard, a lot has changed in
the zstandard world. As I
<a href="/blog/2017/03/07/better-compression-with-zstandard/">blogged last year</a>,
zstandard circa early 2017 was a very compelling compression format: it already
outperformed popular compression formats like zlib and bzip2 across the board.
As a <em>general purpose</em> compression format, it made a compelling case for itself.
In my mind, <em>brotli</em> was its only real challenger.</p>
<p>As I wrote then, zstandard isn't perfect. (Nothing is.) But a year later, it
is refreshing to see advancements.</p>
<p>A criticism one year ago was zstandard was pretty good as a general purpose
compression format but it wasn't great if you live at the fringes. If you were
a speed freak, you'd probably use lz4. If you cared about compression ratios,
you'd probably use lzma. But recent releases of zstandard have made huge strides
into the territory of these niche formats. Negative compression levels allow
zstandard to flirt with lz4's performance. Long distance matching allows
zstandard to achieve close to lzma's compression ratios. <strong>This is a big friggin
deal because it makes it much, much harder to justify a domain-specific compression
format over zstandard.</strong> I think lzma still has a significant edge for ultra
compression ratios when memory utilization is a concern. But for many consumers,
memory is readily available and it is easy to justify trading potentially hundreds
of megabytes of memory to achieve a 10x speedup for decompression. Even if you
aren't willing to sacrifice more memory, the ability to tweak compression
parameters is huge. You can do things like store multiple versions of a
compressed document and conditionally serve the one most appropriate for the
client, all while running the same zstandard-only code on the client. That's
huge.</p>
<p>A year later, zstandard continues to impress me for its set of features and its
versatility. The library is continuing to evolve - all while maintaining
backwards compatibility on the decoding side. (That's a sign of a good
format design if you ask me.) I was honestly shocked to see that zstandard
was able to change its compression settings in a way that allowed it to compete
with lz4 and lzma without requiring a format change.</p>
<p>The more I use zstandard, the more I think that <em>everyone should use this</em> and
that popular compression formats just aren't cut out for modern computing any
more. Every time I download a zlib/gz or bzip2 compressed archive, I'm thinking
<em>if only they used zstandard this archive would be smaller, it would have
decompressed already, and I wouldn't be thinking about how annoying it is
to wait for compression operations to complete</em>. In my mind, zstandard is such
an obvious advancement over the status quo and is such a versatile format -
now covering the gamut of super fast compression to ultra ratios - that it is
bordering on negligent to not use zstandard. With the removal of the controversial
patent rights grant license clause in zstandard 1.3.1, that justifiable
resistance to widespread adoption of zstandard has been eliminated. Zstandard
is objectively superior for many workloads and I heavily encourage its use. I
believe python-zstandard provides a high-quality interface to zstandard and
I encourage you to give it and zstandard a try the next time you compress data.</p>
<p>If you run into any problems or want to get involved with development,
python-zstandard lives at
<a href="https://github.com/indygreg/python-zstandard">indygreg/python-zstandard</a> on
GitHub.</p>
<p>*(I updated the post on 2018-05-16 to remove a paragraph about zstandard
competition. In the original post, I unfairly compared zstandard to Snappy
instead of Brotli and made some inaccurate statements around that comparison.)</p>]]></content:encoded>
    </item>
    <item>
      <title>High-level Problems with Git and How to Fix Them</title>
      <link>http://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them</link>
      <pubDate>Mon, 11 Dec 2017 10:30:00 PST</pubDate>
      <category><![CDATA[Git]]></category>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them</guid>
      <description>High-level Problems with Git and How to Fix Them</description>
      <content:encoded><![CDATA[<p>I have a... complicated relationship with Git.</p>
<p>When Git first came onto the scene in the mid 2000's, I was initially
skeptical because of its horrible user interface. But once I learned
it, I appreciated its speed and features - especially the ease at which
you could create feature branches, merge, and even create commits
offline (which was a big deal in the era when Subversion was the
dominant version control tool in open source and you needed to speak with
a server in order to commit code). When I started using Git day-to-day,
it was such an obvious improvement over what I was using before (mainly
Subversion and even CVS).</p>
<p>When I started working for Mozilla in 2011, I was exposed to the
Mercurial version control, which then - and still today - hosts the
canonical repository for Firefox. I didn't like Mercurial initially.
Actually, I despised it. I thought it was slow and its features lacking.
And I frequently encountered repository corruption.</p>
<p>My first experience learning the <em>internals</em> of both Git and Mercurial
came when I found myself hacking on
<a href="http://hg-git.github.io/]">hg-git</a> - a tool that allows you to convert
Git and Mercurial repositories to/from each other. I was hacking on hg-git
so I could improve the performance of converting Mercurial repositories
to Git repositories. And I was doing that because I wanted to use Git -
not Mercurial - to hack on Firefox. I was trying to enable an unofficial
Git mirror of the Firefox repository to synchronize faster so it would
be more usable. The ulterior motive was to demonstrate that Git is a
superior version control tool and that Firefox should switch its canonical
version control tool from Mercurial to Git.</p>
<p>In what is a textbook definition of <em>irony</em>, what happened instead was
I actually learned how Mercurial worked, interacted with the Mercurial
Community, realized that Mozilla's documentation and developer practices
were... lacking, and that Mercurial was actually a much, much more
pleasant tool to use than Git. It's an old post, but I
<a href="/blog/2013/05/12/thoughts-on-mercurial-(and-git)/">summarized my conversion</a>
four and a half years ago. This started a chain of events that somehow
resulted in me contributing a ton of patches to Mercurial, taking
stewardship of <em>hg.mozilla.org</em>, and becoming a member of the Mercurial
Steering Committee - the governance group for the Mercurial Project.</p>
<p>I've been an advocate of Mercurial over the years. Some would probably say
I'm a Mercurial fanboy. I reject that characterization because <em>fanboy</em> has
connotations that imply I'm ignorant of realities. I'm well aware of
Mercurial's faults and weaknesses. I'm well aware of Mercurial's relative
lack of popularity, I'm well aware that this lack of popularity almost
certainly turns away contributors to Firefox and other Mozilla projects
because people don't want to have to learn a new tool. I'm well aware that
there are changes underway to enable Git to scale to <em>very large
repositories</em> and that these changes could threaten Mercurial's scalability
advantages over Git, making choices to use Mercurial even harder to defend.
(As an aside, the party most responsible for pushing Git to adopt
architectural changes to enable it to scale these days is Microsoft.
Could anyone have foreseen that?!)</p>
<p>I've achieved mastery in both Git and Mercurial. I know their internals
and their command line interfaces extremely well. I understand the
architecture and principles upon which both are built. I'm also exposed
to some very experienced and knowledgeable people in the Mercurial
Community. People who have been around version control for much, much
longer than me and have knowledge of random version control tools you've
probably never heard of. This knowledge and exposure allows me to make
connections and see opportunities for version control that quite frankly
most do not. </p>
<p>In this post, I'll be talking about some high-level, high-impact problems
with Git and possible solutions for them. My primary goal of this post is
to foster positive change in Git and the services around it. While I
personally prefer Mercurial, improving Git is good for everyone. Put
another way, I want my knowledge and perspective from being part of
a version control community to be put to good wherever it can.</p>
<p>Speaking of Mercurial, as I said, I'm a heavy contributor and am somewhat
influential in the Mercurial Community. I want to be clear that my opinions
in this post are my own and I'm not speaking on behalf of the Mercurial
Project or the larger Mercurial Community. I also don't intend to claim
that Mercurial is <em>holier-than-thou</em>. Mercurial has tons of user interface
failings and deficiencies. And I'll even admit to being frustrated that some
systemic failings in Mercurial have gone unaddressed for as long as they
have. But that's for another post. This post is about Git. Let's get started.</p>
<h2>The Staging Area</h2>
<p>The staging area is a feature that should not be enabled in the default
Git configuration.</p>
<p>Most people see version control as an obstacle standing in the way of
accomplishing some other task. They just want to save their progress
towards some goal. In other words, they want version control to be a
<em>save file</em> feature in their workflow.</p>
<p>Unfortunately, modern version control tools don't work that way. For
starters, they require people to specify a <em>commit message</em> every time
they save. This in of itself can be annoying. But we generally accept
that as the price you pay for version control: that <em>commit message</em> has
value to others (or even your future self). So you must record it.</p>
<p>Most people want the barrier to saving changes to be effortless. A commit
message is already too annoying for many users! The Git staging area
establishes a <em>higher</em> barrier to saving. Instead of just saving your
changes, you must first <em>stage</em> your changes to be saved.</p>
<p>If you requested <em>save</em> in your favorite GUI application, text editor,
etc and it popped open a <em>select the changes you would like to
save dialog</em>, you would rightly think <em>just save all my changes already,
dammit.</em> But this is exactly what Git does with its staging area! Git
is saying <em>I know all the changes you made: now tell me which changes
you'd like to save.</em> To the average user, this is infuriating because
it works in contrast to how the <em>save</em> feature works in almost every
other application.</p>
<p>There is a counterargument to be made here. You could say that the
editor/application/etc is complex - that it has multiple <em>contexts</em>
(files) - that each context is independent - and that the user should
have full control over which contexts (files) - and even changes within
those contexts - to save. I agree: this is a compelling feature. However,
it isn't an appropriate <em>default</em> feature. The ability to pick which
changes to save is a power-user feature. Most users just want to save all
the changes all the time. So that should be the default behavior. And
the Git staging area should be an opt-in feature.</p>
<p>If intrinsic workflow warts aren't enough, the Git staging area has a
horrible user interface. It is often referred to as the <em>cache</em>
<a href="https://stackoverflow.com/questions/6716355/why-staging-directory-is-also-called-index-git-index/6718135#6718135">for historical reasons</a>.
<em>Cache</em> of course means something to anyone who knows anything about
computers or programming. And Git's use of <em>cache</em> doesn't at all align
with that common definition. Yet the the terminology in Git persists.
You have to run commands like <code>git diff --cached</code> to examine the state
of the <em>staging area</em>. Huh?!</p>
<p>But Git also refers to the <em>staging area</em> as the <em>index</em>. And this
terminology also appears in Git commands! <code>git help commit</code> has numerous
references to the <em>index</em>. Let's see what <code>git help glossary</code> has to say::</p>
<pre><code>index
    A collection of files with stat information, whose contents are
    stored as objects. The index is a stored version of your working tree.
    Truth be told, it can also contain a second, and even a third
    version of a working tree, which are used when merging.

index entry
    The information regarding a particular file, stored in the index.
    An index entry can be unmerged, if a merge was started, but not
    yet finished (i.e. if the index contains multiple versions of that
    file).
</code></pre>
<p>In terms of end-user documentation, this is a train wreck. It tells the
lay user absolutely nothing about what the <em>index</em> actually is. Instead,
it casually throws out references to <em>stat information</em> (requires the user
know what the <code>stat()</code> function call and struct are) and <em>objects</em> (a Git
term for a piece of data stored by Git). It even undermines its own credibility
with that <em>truth be told</em> sentence. This definition is so bad that it
would probably improve user understanding if it were deleted!</p>
<p>Of course, <code>git help index</code> says <em>No manual entry for gitindex</em>. So
there is literally no hope for you to get a concise, understandable
definition of the <em>index</em>. Instead, it is one of those concepts that you
think you learn from interacting with it all the time. <em>Oh, when I
<code>git add</code> something it gets into this state where <code>git commit</code> will
actually save it.</em></p>
<p>And even if you know what the Git staging area/index/cached is, it can
still confound you. Do you know the interaction between uncommitted
changes in the staging area and working directory when you <code>git rebase</code>?
What about <code>git checkout</code>? What about the various <code>git reset</code> invocations?
I have a confession: I can't remember all the edge cases either. To play
it safe, I try to make sure all my outstanding changes are committed
before I run something like <code>git rebase</code> because I <em>know</em> that will be
safe.</p>
<p>The Git staging area doesn't have to be this complicated. A <em>re-branding</em>
away from <em>index</em> to <em>staging area</em> would go a long way. Adding an alias
from <code>git diff --staged</code> to <code>git diff --cached</code> and removing references
to the <em>cache</em> from common user commands would make a lot of sense and
reduce end-user confusion.</p>
<p>Of course, the Git staging area doesn't really need to exist at all!
The staging area is essentially a <em>soft commit</em>. It performs the
<em>save progress</em> role - the basic requirement of a version control tool.
And in some aspects it is actually a better <em>save progress</em> implementation
than a <em>commit</em> because it doesn't require you to type a commit message!
Because the <em>staging area</em> is a soft commit, all workflows using it can
be modeled as if it were a real commit and the <em>staging area</em> didn't
exist at all! For example, instead of <code>git add --interactive</code> +
<code>git commit</code>, you can run <code>git commit --interactive</code>. Or if you wish
to incrementally add new changes to an in-progress commit, you can
run <code>git commit --amend</code> or <code>git commit --amend --interactive</code> or
<code>git commit --amend --all</code>. If you actually understand the various modes
of <code>git reset</code>, you can use those to <em>uncommit</em>. Of course, the user
interface to performing these actions in Git today is a bit convoluted.
But if the <em>staging area</em> didn't exist, new high-level commands like
<code>git amend</code> and <code>git uncommit</code> could certainly be invented. </p>
<p>To the average user, the <em>staging area</em> is a complicated concept. I'm
a power user. I understand its purpose and how to harness its power. Yet
when I use Mercurial (which doesn't have a <em>staging area</em>), I don't miss
the <em>staging area</em> at all. Instead, I learn that all operations involving
the <em>staging area</em> can be modeled as other fundamental primitives (like
<em>commit amend</em>) that you are likely to encounter anyway. The <em>staging
area</em> therefore constitutes an unnecessary burden and cognitive load on
users. While powerful, its complexity and incurred confusion does not
justify its existence in the default Git configuration. The <em>staging
area</em> is a power-user feature and should be opt-in by default. </p>
<h2>Branches and Remotes Management is Complex and Time-Consuming</h2>
<p>When I first used Git (coming from CVS and Subversion), I thought
branches and remotes were incredible because they enabled new workflows
that allowed you to easily track multiple lines of work across many
repositories. And ~10 years later, I still believe the workflows they
enable are important. However, having amassed a broader perspective, I
also believe their implementation is poor and this unnecessarily confuses
many users and wastes the time of <em>all</em> users.</p>
<p>My initial <em>zen moment</em> with Git - the time when Git finally clicked for me -
was when I understood Git's object model: that Git is just a
content indexed key-value store consisting of a different object types
(blobs, trees, and commits) that have a particular relationship with
each other. <em>Refs</em> are symbolic names pointing to Git commit objects. And
Git <em>branches</em> - both local and remote - are just <em>refs</em> having a
well-defined naming convention (<code>refs/heads/&lt;name&gt;</code> for local branches and
<code>refs/remotes/&lt;remote&gt;/&lt;name&gt;</code> for remote branches). Even <em>tags</em> and
<em>notes</em> are defined via <em>refs</em>.</p>
<p><em>Refs</em> are a necessary primitive in Git because the Git storage model is
to throw all <em>objects</em> into a single, key-value namespace. Since the store
is content indexed and the key name is a cryptographic hash of the object's
content (which for all intents and purposes is random gibberish to
end-users), the Git store by itself is unable to locate objects. If all you
had was the key-value store and you wanted to <em>find all commits</em>, you would
need to walk every object in the store and read it to see if it is a commit
object. You'd then need to buffer metadata about those objects in memory so
you could reassemble them into say a DAG to facilitate looking at commit
history. This approach obviously doesn't scale. <em>Refs</em> short-circuit this
process by providing pointers to objects of importance. It may help to
think of the set of <em>refs</em> as an <em>index</em> into the Git store.  </p>
<p><em>Refs</em> also serve another role: as guards against garbage collection.
I won't go into details about loose objects and packfiles, but it's worth
noting that Git's key-value store also behaves in ways similar to
a generational garbage collector like you would find in programming languages
such as Java and Python. The important thing to know is that Git will
garbage collect (read: delete) objects that are unused. And the mechanism
it uses to determine which objects are unused is to iterate through <em>refs</em>
and walk all transitive references from that initial pointer. If there is
an object in the store that can't be traced back to a <em>ref</em>, it is
<em>unreachable</em> and can be deleted.</p>
<p><em>Reflogs</em> maintain the history of a value for a <em>ref</em>: for each <em>ref</em> they
contain a log of what <em>commit</em> it was pointing to, when that pointer
was established, who established it, etc. <em>Reflogs</em> serve two purposes:
facilitating <em>undoing</em> a previous action and holding a reference to <em>old</em>
data to prevent it from being garbage collected. The two use cases are
related: if you don't care about undo, you don't need the old reference
to prevent garbage collection.</p>
<p>This design of Git's store is actually quite sensible. It's not perfect
(nothing is). But it is a solid foundation to build a version control tool
(or even other data storage applications) on top of.</p>
<p>The title of this section has to do with sub-optimal branches and
remotes management. But I've hardly said anything about branches or remotes!
And this leads me to my main complaint about Git's branches and remotes:
that they are very thin veneer over <em>refs</em>. The properties of Git's
underlying key-value store unnecessarily bleed into user-facing concepts
(like branches and remotes) and therefore dictate sub-optimal practices.
This is what's referred to as a <em>leaky abstraction</em>.</p>
<p>I'll give some examples.</p>
<p>As I stated above, many users treat version control as a <em>save file</em>
step in their workflow. I believe that any step that interferes with users
saving their work is user hostile. This even includes writing a commit
message! I already argued that the <em>staging area</em> significantly interferes
with this critical task. Git <em>branches</em> do as well.</p>
<p>If we were designing a version control tool from scratch (or if you were
a new user to version control), you would probably think that a sane
feature/requirement would be to update to <em>any</em> revision and start making
changes. In Git speak, this would be something like
<code>git checkout b201e96f</code>, make some file changes, <code>git commit</code>. I think
that's a pretty basic workflow requirement for a version control tool.
And the workflow I suggested is pretty intuitive: choose the thing to
start working on, make some changes, then save those changes.</p>
<p>Let's see what happens when we actually do this:</p>
<pre><code>$ git checkout b201e96f
Note: checking out 'b201e96f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at b201e96f94... Merge branch 'rs/config-write-section-fix' into maint

$ echo 'my change' &gt;&gt; README.md
$ git commit -a -m 'my change'
[detached HEAD aeb0c997ff] my change
 1 file changed, 1 insertion(+)

$ git push indygreg
fatal: You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use

    git push indygreg HEAD:&lt;name-of-remote-branch&gt;

$ git checkout master
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  aeb0c997ff my change

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch &lt;new-branch-name&gt; aeb0c997ff

Switched to branch 'master'
Your branch is up to date with 'origin/master'.
</code></pre>
<p>I know what all these messages mean because I've mastered Git. But if
you were a newcomer (or even a seasoned user), you might be very confused.
Just so we're on the same page, here is what's happening (along with
some commentary).</p>
<p>When I run <code>git checkout b201e96f</code>, Git is trying to tell me that I'm
potentially doing something that could result in the loss of my data. A
golden rule of version control tools is <em>don't lose the user's data</em>. When
I run <code>git checkout</code>, Git should be stating the risk for data loss very
clearly. But instead, the <em>If you want to create a new branch</em> sentence is
hiding this fact by instead phrasing things around <em>retaining commits you
create</em> rather than the possible loss of data. It's up to the user
to make the connection that <em>retaining commits you create</em> actually means
<em>don't eat my data</em>. Preventing data loss is critical and Git should not
mince words here!</p>
<p>The <code>git commit</code> seems to work like normal. However, since we're in a
<em>detached HEAD</em> state (a phrase that is likely gibberish to most users),
that commit isn't referred to by any <em>ref</em>, so it can be <em>lost</em> easily.
Git <em>should</em> be telling me that I just committed something it may not
be able to find in the future. But it doesn't. Again, Git isn't being
as protective of my data as it needs to be.</p>
<p>The failure in the <code>git push</code> command is essentially telling me I need
to give things a name in order to <em>push</em>. <em>Pushing</em> is effectively <em>remote
save</em>. And I'm going to apply my reasoning about version control tools
not interfering with <em>save</em> to <em>pushing</em> as well: Git is adding an
extra barrier to <em>remote save</em> by refusing to push commits without a
<em>branch</em> attached and by doing so is being user hostile.</p>
<p>Finally, we <code>git checkout master</code> to move to another commit. Here, Git
is actually doing something halfway reasonable. It is telling me I'm
leaving commits behind, which commits those are, and the command to
use to <em>keep</em> those commits. The warning is good but not great. I think
it needs to be stronger to reflect the risk around data loss if that
suggested Git commit isn't executed. (Of course, the <em>reflog</em> for <code>HEAD</code>
will ensure that data isn't immediately deleted. But users shouldn't
need to involve <em>reflogs</em> to not lose data that wasn't rewritten.)</p>
<p>The point I want to make is that Git doesn't allow you to just <em>update
and save</em>. Because its <em>dumb</em> store requires pointers to relevant commits
(<em>refs</em>) and because that requirement isn't abstracted away or paved over
by user-friendly features in the frontend, Git is effectively requiring
end-users to define names (<em>branches</em>) for all commits. If you fail to
define a name, it gets a lot harder to find your commits, exchange them,
and Git may delete your data. While it is technically possible to not
create branches, the version control tool is essentially unusable without
them.</p>
<p>When local branches are exchanged, they appear as <em>remote branches</em> to
others. Essentially, you give each instance of the repository a name
(the <em>remote</em>). And branches/refs fetched from a named <em>remote</em> appear
as a <em>ref</em> in the <em>ref namespace</em> for that <em>remote</em>. e.g.
<em>refs/remotes/origin</em> holds <em>refs</em> for the <em>origin</em> <em>remote</em>. (Git allows
you to not have to specify the <em>refs/remotes</em> part, so you can refer
to e.g. <em>refs/remotes/origin/master</em> as <em>origin/master</em>.)</p>
<p>Again, if you were designing a version control tool from scratch or you
were a new Git user, you'd probably think <em>remote refs</em> would make
good starting points for work. For example, if you know you should be
saving new work on top of the <em>master</em> branch, you might be inclined
to begin that work by running <code>git checkout origin/master</code>. But like
our specific-commit checkout above:</p>
<pre><code>$ git checkout origin/master
Note: checking out 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at 95ec6b1b33... RelNotes: the eighth batch
</code></pre>
<p>This is the same message we got for a direct checkout. But we did
supply a <em>ref</em>/<em>remote branch</em> name. What gives? Essentially, Git tries
to enforce that the <em>refs/remotes/</em> namespace is read-only and only
updated by operations that exchange data with a remote, namely <code>git fetch</code>,
<code>git pull</code>, and <code>git push</code>.</p>
<p>For this to work correctly, you need to create a new <em>local branch</em>
(which initially points to the commit that <code>refs/remotes/origin/master</code>
points to) and then switch/activate that <em>local branch</em>.</p>
<p>I could go on talking about all the subtle nuances of how Git branches
are managed. But I won't.</p>
<p>If you've used Git, you know you need to use branches. You may or may
not recognize just how frequently you have to type a branch name into
a <code>git</code> command. I guarantee that if you are familiar with version control
tools and workflows that aren't based on having to manage <em>refs</em> to
track data, you will find Git's forced usage of <em>refs</em> and <em>branches</em>
a bit absurd. I half jokingly refer to Git as <em>Game of Refs</em>. I say that
because coming from Mercurial (which doesn't require you to name things),
Git workflows feel to me like all I'm doing is typing the names of branches
and <em>refs</em> into <code>git</code> commands. I feel like I'm wasting my precious
time telling Git the names of things only because this is necessary to
placate the leaky abstraction of Git's storage layer which requires
references to relevant commits.</p>
<p>Git and version control doesn't have to be this way.</p>
<p>As I said, my Mercurial workflow doesn't rely on naming things. Unlike
Git, Mercurial's store has an explicit (not shared) storage location
for commits (<em>changesets</em> in Mercurial parlance). And this data structure
is ordered, meaning a changeset <em>later</em>  always occurs after its
parent/predecessor. This means that Mercurial can open a single
file/index to quickly find all <em>changesets</em>. Because Mercurial doesn't
need pointers to commits of relevance, names aren't required.</p>
<p>My <em>Zen of Mercurial</em> moment came when I realized you didn't have
to name things in Mercurial. Having used Git before Mercurial, I
was conditioned to always be naming things. This is the Git way
after all. And, truth be told, it is common to name things in Mercurial
as well. Mercurial's <em>named branches</em> were the way to do <em>feature
branches</em> in Mercurial for years. Some used the <em>MQ</em> extension (essentially
a port of <a href="https://en.wikipedia.org/wiki/Quilt_(software)">quilt</a>), which
also requires naming individual patches. Git users coming to Mercurial
were missing Git branches and Mercurial's <em>bookmarks</em> were a poor
<em>port</em> of Git branches.</p>
<p>But recently, more and more Mercurial users have been coming to the
realization that names aren't really necessary. If the tool doesn't
actually require naming things, why force users to name things? As long
as users can find the commits they need to find, do you actually need
names?</p>
<p>As a demonstration, my Mercurial workflow leans heavily on the <code>hg show work</code>
and <code>hg show stack</code> commands. You will need to enable the <em>show</em> extension
by putting the following in your hgrc config file to use them:</p>
<pre><code>[extensions]
show =
</code></pre>
<p>Running <code>hg show work</code> (I have also set the config
<code>commands.show.aliasprefix=s</code>to enable me to type <code>hg swork</code>) finds all
in-progress changesets and other likely-relevant changesets (those
with names and DAG heads). It prints a concise DAG of those changesets:</p>
<p><img alt="hg show work output" src="/images/hg-show-work.png" /></p>
<p>And <code>hg show stack</code> shows just the current line of work and its
relationship to other important heads:</p>
<p><img alt="hg show stack output" src="/images/hg-show-stack.png" /></p>
<p>Aside from the <code>@</code> bookmark/name set on that top-most changeset, there are
no names! (That <code>@</code> comes from the remote repository, which has set that name.)</p>
<p>Outside of code archeology workflows, <code>hg show work</code> shows the changesets I
care about 95% of the time. With all I care about (my in-progress work and
possible rebase targets) rendered concisely, I don't have to name things
because I can just find whatever I'm looking for by running <code>hg show work</code>!
Yes, you need to run <code>hg show work</code>, visually scan for what you are looking
for, and copy a (random) hash fragment into a number of commands. This
sounds like a lot of work. But I believe it is far less work than naming
things. Only when you practice this workflow do you realize just how much
time you actually spend finding and then typing names in to <code>hg</code> and -
especailly - <code>git</code> commands! The ability to just <code>hg update</code> to a changeset
and commit without having to name things is just so liberating. It feels
like my version control tool is putting up fewer barriers and letting me
work quickly.</p>
<p>Another benefit of <code>hg show work</code> and <code>hg show stack</code> are that they present
a concise DAG visualization to users. This helps educate users about the
underlying <em>shape</em> of repository data. When you see connected nodes on a
graph and how they change over time, it makes it a lot easier to understand
concepts like <em>merge</em> and <em>rebase</em>. </p>
<p>This <em>nameless</em> workflow may sound radical. But that's because we're all
conditioned to naming things. I initially thought it was crazy as well. But
once you have a mechanism that gives you rapid access to data you care
about (<code>hg show work</code> in Mercurial's case), names become very optional. Now,
a pure <em>nameless</em> workflow isn't without its limitations. You want names
to identify the main <em>targets</em> for work (e.g. the <em>master</em> branch). And when
you exchange work with others, names are easier to work with, especially
since names survive rewriting. But in my experience, most of my commits
are only exchanged with me (synchronizing my in-progress commits across
devices) and with code review tools (which don't really need names and
can operate against raw commits). My most frequent use of names comes
when I'm in <em>repository maintainer mode</em> and I need to ensure commits
have names for others to reference.</p>
<p>Could Git support <em>nameless</em> workflows? In theory it can.</p>
<p>Git needs <em>refs</em> to find relevant commits in its store. And the wire
protocol uses <em>refs</em> to exchange data. So <em>refs</em> have to exist for Git
to function (assuming Git doesn't radically change its storage and
exchange mechanisms to mitigate the need for <em>refs</em>, but that would be
a massive change and I don't see this happening).</p>
<p>While there is a fundamental requirement for <em>refs</em> to exist, this
doesn't necessarily mean that user-facing names must exist. The reason
that we need <em>branches</em> today is because <em>branches</em> are little more than
a <em>ref</em> with special behavior. It is theoretically possible to invent a
mechanism that transparently maps <em>nameless</em> commits onto <em>refs</em>. For
example, you could create a <em>refs/nameless/</em> namespace that was
automatically populated with DAG heads that didn't have names attached.
And Git could exchange these <em>refs</em> just like it can <em>branches</em> today.
It would be a lot of work to think through all the implications and to
design and implement support for <em>nameless</em> development in Git. But I
think it is possible.</p>
<p>I encourage the Git community to investigate supporting <em>nameless</em> workflows.
Having adopted this workflow in Mercurial, Git's workflow around naming
branches feels heavyweight and restrictive to me. Put another way, <em>nameless</em>
commits are actually lighter-weight branches than Git branches! To the
common user who just wants version control to be a <em>save</em> feature,
requiring names establishes a barrier towards that goal. So removing the
naming requirement would make Git simpler and more approachable to new
users.</p>
<h2>Forks aren't the Model You are Looking For</h2>
<p>This section is more about hosted Git services (like GitHub, Bitbucket, and
GitLab) than Git itself. But since hosted Git services are synonymous
with <em>Git</em> and interaction with a hosted Git services is a regular
part of a common Git user's workflow, I feel like I need to cover it.
(For what it's worth, my experience at Mozilla tells me that a large
percentage of people who say <em>I prefer Git</em> or <em>we should use Git</em>
actually mean <em>I like GitHub</em>. Git and GitHub/Bitbucket/GitLab are
effectively the same thing in the minds of many and anyone finding
themselves discussing version control needs to keep this in mind because
<em>Git</em> is more than just the command line tool: it is an ecosystem.)</p>
<p>I'll come right out and say it: I think <em>forks</em> are a relatively poor
model for collaborating. They are light years better than what
existed before. But they are still so far from the turn-key experience
that should be possible. The <em>fork</em> hasn't really changed much since
the current implementation of it was made popular by GitHub many years
ago. And I view this as a general failure of hosted services to
innovate.</p>
<p>So we have a shared understanding, a <em>fork</em> (as implemented on GitHub,
Bitbucket, GitLab, etc) is essentially a complete copy of a repository
(a <code>git clone</code> if using Git) and a fresh workspace for additional
value-added services the hosting provider offers (pull requests, issues,
wikis, project tracking, release tracking, etc). If you open the main
web page for a <em>fork</em> on these services, it looks just like the main
project's. You know it is a fork because there are cosmetics somewhere
(typically next to the project/repository name) saying <em>forked from</em>.</p>
<p>Before service providers adopted the <em>fork</em> terminology, <em>fork</em> was
used in open source to refer to a splintering of a project. If
someone or a group of people didn't like the direction a project was
taking, wanted to take over ownership of a project because of
stagnation, etc, they would <em>fork it</em>. The <em>fork</em> was based on the
original (and there may even be active collaboration between the
fork and original), but the intent of the <em>fork</em> was to create
distance between the original project and its new incantation. A
new entity that was sufficiently independent of the original.</p>
<p><em>Forks</em> on service providers mostly retain this <em>old school</em> <em>fork</em>
model. The <em>fork</em> gets a new copy of issues, wikis, etc. And anyone
who <em>forks</em> establishes what looks like an independent incantation
of a project. It's worth noting that the execution varies by service
provider. For example, GitHub won't enable <em>Issues</em> for a fork by
default, thereby encouraging people to file issues against the
<em>upstream</em> project it was forked from. (This is good default behavior.)</p>
<p>And I know why service providers (initially) implemented things this
way: it was easy. If you are building a product, it's simpler to just
say <em>a user's version of this project is a <code>git clone</code> and they get
a fresh database</em>. On a technical level, this meets the traditional
definition of <em>fork</em>. And rather than introduce a new term into the
vernacular, they just re-purposed <em>fork</em> (albeit with <em>softer</em>
connotations, since the traditional <em>fork</em> commonly implied there
was some form of strife precipitating a <em>fork</em>).</p>
<p>To help differentiate flavors of <em>forks</em>, I'm going to define the
terms <em>soft fork</em> and <em>hard fork</em>. A <em>soft fork</em> is a <em>fork</em> that
exists for purposes of collaboration. The differentiating feature
between a <em>soft fork</em> and <em>hard fork</em> is whether the <em>fork</em> is
intended to be used as its own project. If it is, it is a
<em>hard fork</em>. If not - if all changes are intended to be <em>merged</em>
into the <em>upstream</em> project and be consumed from there - it is a
<em>soft fork</em>.</p>
<p>I don't have concrete numbers, but I'm willing to wager that the vast
majority of <em>forks</em> on Git service providers which have changes are
<em>soft forks</em> rather than <em>hard forks</em>. In other words, these <em>forks</em>
exist purely as a conduit to collaborate with the canonical/upstream
project (or to facilitate a short-lived one-off change).</p>
<p>The current implementation of <em>fork</em> - which borrows a lot from its
predecessor of the same name - is a good - but not great - way to
facilitate collaboration. It isn't great because it technically
resembles what you'd expect to see for <em>hard fork</em> use cases even
though it is used predominantly with <em>soft forks</em>. This mismatch
creates problems.</p>
<p>If you were to take a step back and invent your own version control
hosted service and weren't tainted by exposure to existing services
and were willing to think a bit beyond making it a glorified frontend
for the <code>git</code> command line interface, you might realize that the problem
you are solving - the product you are selling - is collaboration as
a service, not a Git hosting service. And if your product is
collaboration, then implementing your collaboration model around the
<em>hard fork</em> model with strong barriers between the original project and
its <em>forks</em> is counterproductive and undermines your own product.
But this is how GitHub, Bitbucket, GitLab, and others have implemented
their product!</p>
<p>To improve collaboration on version control hosted services, the concept
of a <em>fork</em> needs to significantly curtailed. Replacing it should be
a UI and workflow that revolves around the central, canonical repository.</p>
<p>You shouldn't need to create your own <em>clone</em> or <em>fork</em> of a repository
in order to contribute. Instead, you should be able to clone the
canonical repository. When you create commits, those commits should
be stored and/or more tightly affiliated with the original project - not
inside a <em>fork</em>.</p>
<p>One potential implementation is doable today. I'm going to call it
<em>workspaces</em>. Here's how it would work.</p>
<p>There would exist a namespace for <em>refs</em> that can be controlled by
the user. For example, on GitHub (where my username is <em>indygreg</em>),
if I wanted to contribute to some random project, I would <code>git push</code>
my refs somewhere under <code>refs/users/indygreg/</code> directly to that
project's. No <em>forking</em> necessary. If I wanted to contribute to a
project, I would just clone its repo then push to my <em>workspace</em> under
it. You could do this today by configuring your Git <em>refspec</em> properly.
For pushes, it would look something like
<code>refs/heads/*:refs/users/indygreg/*</code> (that tells Git to map local <em>refs</em>
under <code>refs/heads/</code> to <code>refs/users/indygreg/</code> on that <em>remote</em> repository).
If this became a popular feature, presumably the Git wire protocol could
be taught to advertise this feature such that Git clients automatically
configured themselves to push to user-specific <em>workspaces</em> attached to
the original repository.</p>
<p>There are several advantages to such a <em>workspace</em> model. Many of them
revolve around eliminating <em>forks</em>.</p>
<p>At initial contribution time, no server-side <em>fork</em> is necessary in order
to contribute. You would be able to <em>clone and contribute</em> without waiting
for or configuring a <em>fork</em>. Or if you can create commits from the web
interface, the clone wouldn't even be necessary! Lowering the barrier to
contribution is a good thing, especially if collaboration is the product
you are selling.</p>
<p>In the web UI, <em>workspaces</em> would also revolve around the source project
and not be off in their own world like <em>forks</em> are today. People could
more easily see what others are up to. And fetching their work would
require typing in their username as opposed to configuring a whole new
remote. This would bring communities closer and hopefully lead to better
collaboration.</p>
<p>Not requiring <em>forks</em> also eliminates the need to synchronize your <em>fork</em>
with the upstream repository. I don't know about you, but one of the things
that bothers me about the <em>Game of Refs</em> that Git imposes is that I have
to keep my <em>refs</em> in sync with the upstream <em>refs</em>. When I fetch from
<em>origin</em> and pull down a new <em>master</em> branch, I need to <code>git merge</code>
that branch into my local <em>master</em> branch. Then I need to push that new
<em>master</em> branch to my fork. This is quite tedious. And it is easy to merge
the wrong branches and get your <em>branch</em> state out of whack. There are
better ways to map remote <em>refs</em> into your local names to make this far
less confusing.</p>
<p>Another win here is not having to push and store data multiple times.
When working on a <em>fork</em> (which is a separate repository), after you
<code>git fetch</code> changes from upstream, you need to eventually <code>git push</code> those
into your <em>fork</em>. If you've ever worked on a large repository and didn't
have a super fast Internet connection, you may have been stymied by
having to <code>git push</code> large amounts of data to your <em>fork</em>. This is quite
annoying, especially for people with slow Internet connections. Wouldn't
it be nice if that <code>git push</code> only pushed the data that was truly new and
didn't already exist somewhere else on the server? A <em>workspace</em> model
where development all occurs in the original repository would fix this.
As a bonus, it would make the storage problem on servers easier because
you would eliminate thousands of forks and you probably wouldn't have to
care as much about data duplication across repos/clones because the
version control tool solves a lot of this problem for you, courtesy of
having all data live alongside or in the original repository instead of
in a <em>fork</em>.</p>
<p>Another win from <em>workspace</em>-centric development would be the potential to
do more user-friendly things after <em>pull/merge requests</em> are incorporated
in the official project. For example, the <em>ref</em> in your workspace could
be deleted automatically. This would ease the burden on users to clean up
after their submissions are accepted. Again, instead of mashing keys to
play the <em>Game of Refs</em>, this would all be taken care of for you
automatically. (Yes, I know there are scripts and shell aliases to
make this more turn-key. But user-friendly behavior shouldn't have to
be opt-in: it should be the default.)</p>
<p>But <em>workspaces</em> aren't all rainbows and unicorns. There are access
control concerns. You probably don't want users able to mutate the
<em>workspaces</em> of other users. Or do you? You can make a compelling
case that project <em>administrators</em> should have that ability. And what if
someone pushes bad or illegal content to a workspace and you receive
a cease and desist? Can you take down just the offending workspace while
complying with the order? And what happens if the original project is
deleted? Do all its workspaces die with it? These are not trivial
concerns. But they don't feel impossible to tackle either.</p>
<p><em>Workspaces</em> are only one potential alternative to <em>forks</em>. And I can
come up with multiple implementations of the <em>workspace</em> concept. Although
many of them are constrained by current features in the Git wire protocol.
But Git is (finally) getting a more extensible wire protocol, so hopefully
this will enable <em>nice things</em>.</p>
<p>I challenge Git service providers like GitHub, Bitbucket, and GitLab to
think outside the box and implement something better than how <em>forks</em>
are implemented today. It will be a large shift. But I think users will
appreciate it in the long run.</p>
<h2>Conclusion</h2>
<p>Git is an ubiquitous version control tool. But it is
<a href="http://stevelosh.com/blog/2013/04/git-koans/">frequently lampooned</a> for
its <a href="https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/">poor usability</a>
and <a href="https://git-man-page-generator.lokaltog.net/">documentation</a>.
We even have
<a href="https://spderosso.github.io/onward13.pdf">research</a>
<a href="https://spderosso.github.io/oopsla16.pdf">papers</a> telling us which parts
are bad. Nobody I know has had a pleasant initial experience with Git.
And it is clear that few people actually understand Git: most just know
the command incantations they need to know to accomplish a small set of
common activities. (If you are such a person, there is nothing to be
ashamed about: Git is a <em>hard</em> tool.)</p>
<p>Popular Git-based hosting and collaboration services (such as GitHub,
Bitbucket, and GitLab) exist. While they've made strides to make it
easier to commit data to a Git repository (I purposefully avoid saying
<em>use Git</em> because the most usable tools seem to avoid the <code>git</code> command
line interface as much as possible), they are often a thin veneer over
Git itself (see <em>forks</em>). And Git is a thin veneer over a content
indexed key-value store (see forced usage of bookmarks).</p>
<p>As an industry, we should be concerned about the lousy usability of Git
and the tools and services that surround it. Some may say that Git -
with its near monopoly over version control mindset - is a success. I
have a different view: I think it is a failure that a tool with a user
experience this bad has achieved the success it has.</p>
<p>The cost to Git's poor usability can be measured in tens if not hundreds
of millions of dollars in time people have wasted because they couldn't
figure out how to use Git. Git should be viewed as a source of
embarrassment, not a success story.</p>
<p>What's really concerning is that the usability problems of Git have been
known for years. Yet it is as popular as ever and there have been few
substantial usability improvements. We do have some
<a href="http://gitless.com/">alternative frontends</a> floating around. But these
haven't caught on.</p>
<p>I'm at a loss to understand how an open source tool as popular as Git
has remained so mediocre for so long. The source code is out there.
Anybody can submit a patch to fix it. Why is it that so many people get
tripped up by the same poor usability issues years after Git became
the common version control tool? It certainly appears that as an
industry we have been unable or unwilling to address systemic deficiencies
in a critical tool. Why this is, I'm not sure.</p>
<p>Despite my pessimism about Git's usability and its poor track record of
being attentive to the needs of people who aren't power users, I'm
optimistic that the future will be brighter. While the ~7000 words in this
post pale in comparison to the aggregate word count that has been
written about Git, hopefully this post strikes a nerve and causes
positive change. Just because one generation has toiled with the
usability problems of Git doesn't mean the next generation has to
suffer through the same. Git can be improved and I encourage that change
to happen. The three issues above and their possible solutions would
be a good place to start.</p>]]></content:encoded>
    </item>
    <item>
      <title>Good Riddance to AUFS</title>
      <link>http://gregoryszorc.com/blog/2017/12/08/good-riddance-to-aufs</link>
      <pubDate>Fri, 08 Dec 2017 15:00:00 PST</pubDate>
      <category><![CDATA[Docker]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2017/12/08/good-riddance-to-aufs</guid>
      <description>Good Riddance to AUFS</description>
      <content:encoded><![CDATA[<p>For over a year, AUFS - a layering filesystem for Linux - has been
giving me fits.</p>
<p>As
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1291940">I initially measured last year</a>,
AUFS has... suboptimal performance characteristics. The crux of the problem is
that AUFS obtains a <strong>global</strong> lock in the Linux kernel (at least version 3.13)
for various I/O operations, including <em>stat()</em>. If you have more than a couple
of active CPU cores, the overhead from excessive kernel locking inside
<em>_raw_spin_lock()</em> can add more overhead than extra CPU cores add capacity.
That's right: under certain workloads, adding more CPU cores actually slows
down execution due to cores being starved waiting for a global lock in the
kernel!</p>
<p>If that weren't enough, AUFS can also violate POSIX filesystem guarantees
under load. It appears that AUFS sometimes forgets about created files or
has race conditions that prevent created files from being visible to
readers until many seconds later! I <em>think</em> this issue only occurs when
there are concurrent threads creating files.</p>
<p>These two characteristics of AUFS have inflicted a lot of hardship on
Firefox's continuous integration. Large parts of Firefox's CI execute in
Docker. And the host environment for Docker has historically used Ubuntu
14.04 with Linux 3.13 and Docker using AUFS. AUFS was/is the default
storage driver for many versions of Docker. When this storage driver is
used, all files inside Docker containers are backed by AUFS unless a
Docker <em>volume</em> (a directory bind mounted from the host filesystem - EXT4
in our case) is in play.</p>
<p>When we started using EC2 instances with more CPU cores, we weren't
getting a linear speedup for CPU bound operations. Instead, CPU cycles
were being spent inside the kernel. Stack profiling showed AUFS as the
culprit. We were thus unable to leverage more powerful EC2 instances
because adding more cores would only provide marginal to negative gains
against significant cost expenditure.</p>
<p>We worked around this problem by making heavy use of Docker <em>volumes</em>
for tasks incurring significant I/O. This included version control clones
and checkouts.</p>
<p>Somewhere along the line, we discovered that AUFS volumes were also the
cause of several random <em>file not found</em> errors throughout automation.
Initially, we thought many of these errors were due to bugs in the
underlying tools (Mercurial and Firefox's build system were common
victims because they do lots of concurrent I/O). When the bugs
mysteriously went away after ensuring certain operations were performed
on EXT4 volumes, we were able to blame AUFS for the myriad of filesystem
consistency problems.</p>
<p>Earlier today, we pushed out a change to upgrade Firefox's CI to Linux
4.4 and switched Docker from AUFS to overlayfs (using the <em>overlay2</em> storage
driver). The improvements exceeded my expectations.</p>
<p>Linux build times have decreased by ~4 minutes, from ~750s to ~510s.</p>
<p>Linux Rust test times have decreased by ~4 minutes, from ~615s to ~380s.</p>
<p>Linux PGO build times have decreased by ~5 minutes, from ~2130s to ~1820s.</p>
<p>And this is just the build side of the world. I don't have numbers
off hand, but I suspect many tests also got a nice speedup from this
change.</p>
<p>Multiplied by thousands of tasks per day and factoring in the cost
to operate these machines, the elimination of AUFS has substantially
increased the efficiency (and reliability) of Firefox CI and easily
saved Mozilla tens of thousands of dollars per year. And that's just
factoring in the savings in the AWS bill. Time is money and people
are a lot more expensive than AWS instances (you can run over 3,000
c5.large EC2 instances at spot pricing for what it costs to employ me
when I'm <em>on the clock</em>). So the real win here comes from Firefox
developers being able to move faster because their builds and tests
complete several minutes faster.</p>
<p>In conclusion, if you care about performance or filesystem correctness,
avoid AUFS. Use overlayfs instead.</p>]]></content:encoded>
    </item>
    <item>
      <title>from __past__ import bytes_literals</title>
      <link>http://gregoryszorc.com/blog/2017/03/13/from-__past__-import-bytes_literals</link>
      <pubDate>Mon, 13 Mar 2017 09:55:00 PDT</pubDate>
      <category><![CDATA[Python]]></category>
      <category><![CDATA[Mercurial]]></category>
      <category><![CDATA[Mozilla]]></category>
      <guid isPermaLink="true">http://gregoryszorc.com/blog/2017/03/13/from-__past__-import-bytes_literals</guid>
      <description>from __past__ import bytes_literals</description>
      <content:encoded><![CDATA[<p>Last year, I simultaneously committed one of the ugliest and
impressive hacks of my programming <em>career</em>. I haven't had time
to write about it. Until now.</p>
<p>In summary, the hack is a
<a href="https://www.mercurial-scm.org/repo/hg/rev/1c22400db72d">source-transforming module loader</a>
for Python. It can be used by Python 3 to import a Python 2 source
file while translating certain primitives to their Python 3 equivalents.
It is kind of like <a href="https://docs.python.org/3.6/library/2to3.html">2to3</a>
except it executes at run-time during <code>import</code>. The main goal of the
hack was to facilitate porting Mercurial to Python 3 while deferring
having to make the most invasive - and therefore most annoying -
elements of the port in the canonical source code representation.</p>
<p>For the technically curious, it works as follows.</p>
<p>The <code>hg</code> Python executable registers a custom
<a href="https://docs.python.org/3.6/library/sys.html#sys.meta_path">meta path finder</a>
instance. This entity is invoked during <code>import</code> statements to try
to find the module being imported. It tells a later phase of the
import mechanism how to <em>load</em> that module from wherever it is
(usually a <code>.py</code> or <code>.pyc</code> file on disk) to a Python module object.
The custom finder only responds to requests for modules known
to be managed by the Mercurial project. For these modules, it tells
the next stage of the import mechanism to invoke a custom
<a href="https://docs.python.org/3.6/library/importlib.html#importlib.abc.SourceLoader">SourceLoader</a>
instance. Here's where the real magic is: when the custom <em>loader</em>
is invoked, it tokenizes the Python source code using the
<a href="https://docs.python.org/3.6/library/tokenize.html">tokenize</a> module,
iterates over the token stream, finds specific patterns, and
rewrites them to something <em>more appropriate</em>. It then <em>untokenizes</em>
back to Python source code then falls back to the built-in loader
which does the heavy lifting of compiling the source to Python code
objects. So, we have Python 2 source files on disk that magically get
transformed to be Python compatible when they are loaded by Python 3.
Oh, and there is no performance penalty for the token transformation
on subsequence loads because the transformed bytecode is cached in
the <code>.pyc</code> file (using a custom header so we know it was transformed
and can be invalidated when the transformation logic changes).</p>
<p>At the time I wrote it, the token stream manipulation converted most
string literals (<code>''</code>) to bytes literals (<code>b''</code>). In other words, it
restored the Python 2 behavior of string literals being <code>bytes</code> and
not <code>unicode</code>. We jokingly call it
<code>from __past__ import bytes_literals</code> (a play on Python 2's
<code>from __future__ import unicode_literals</code> special syntax which
changes string literals from Python 2's <code>str</code>/<code>bytes</code> type to
<code>unicode</code> to match Python 3's behavior).</p>
<p>Since I implemented the first version, others have implemented:</p>
<ul>
<li><a href="https://www.mercurial-scm.org/repo/hg/rev/178c89e8519a">Automatically inserting</a>
  a <code>from mercurial.pycompat import ...</code> statement to the top of the
  source. This statement is the Mercurial equivalent of importing
  common wrapper types similar to what
  <a href="https://pythonhosted.org/six/">six</a> provides.</li>
<li>More robust
  <a href="https://www.mercurial-scm.org/repo/hg/rev/423377290a3a">function argument parsing support</a>.
  (Because going from a token stream to a higher-level primitive like a
  function call is difficult.)</li>
<li><a href="https://www.mercurial-scm.org/repo/hg/rev/eaaedad68011">Automatically rewriting</a>
  <code>.iteritems()</code> to <code>.items()</code>.</li>
</ul>
<p>As one can expect, when I tweeted a link to this commit, many Python
developers (including a few CPython core developers) expressed a mix
of intrigue and horror. But mostly horror.</p>
<p>I fully concede that what I did here is a gross hack. And, it is the
intention of the Mercurial project to undo this hack and perform a
proper port once Python 3 support in Mercurial is more mature. But, I
want to lay out my defense on why I did this and why the Mercurial
project is tolerant of this ugly hack.</p>
<p>Individuals within the Mercurial project have wanted to port to Python
3 for years. Until recently, it hasn't been a project priority
because a port was too much work for too little end-user gain. And, on
the technical front, a port was just not practical until Python 3.5.
(Two main blockers were no <code>u''</code> literals - restored in Python 3.3 -
and no <code>%</code> formatting for <code>b''</code> literals - restored in 3.5. And as I
understand it, senior members of the Mercurial project had to lobby
Python maintainers pretty hard to get features like <code>%</code> formatting of
<code>b''</code> literals restored to Python 3.)</p>
<p>Anyway, after a number of failed attempts to initiate the Python 3
port over the years, the Mercurial project started making some
positive steps towards Python 3 compatibility, such as switching
to <a href="https://www.python.org/dev/peps/pep-0328/">absolute imports</a> and
addressing syntax issues that allowed modules to be parsed into
an AST and even compiled and loadable. These may seem like small
steps, but for a larger project, it was a lot of work.</p>
<p>The porting effort hit a large wall when it came time to actually
make the AST-valid Python code run on Python 3. Specifically, we had
a strings problem.</p>
<p>When you write software that exchanges data between machines -
sometimes machines running different operating systems or having
different encodings - and there is an expectation that things work
the same and data roundtrips accordingly, trying to force text
encodings is essentially impossible and inevitably breaks something or
someone. It is much easier for Mercurial to operate <em>bytes first</em> and
only take text encoding into consideration when absolutely necessary
(such as when emitting bytes to the terminal in the wanted encoding
or when emitting JSON). That's not to say Mercurial ignores the
existence of encodings. Far from it: Mercurial does attempt to
normalize some data to Unicode. But it often does so with a special
Python type that internally stores the raw byte sequence of the
source so that a consumer can choose to operate at the bytes or
Unicode level. </p>
<p>Anyway, this means that practically every string variable in Mercurial
is a <code>bytes</code> type (or something that acts like a <code>bytes</code> type). And
since string literals in Python 3 are the <code>str</code> type (which represents
Unicode), that would mean having to prefix almost every <code>''</code> string
literal in Mercurial with <code>b''</code> in order to placate Python 3. Having
to update every occurrence of simple primitives that could be statically
transformed automatically felt like busy work. <strong>We wanted to spend time
on the meaningful parts of the Python 3 port so we could find
interesting problems and challenges, not toil with mechanical
conversions that add little to no short-term value while simultaneously
increasing cognitive dissonance and quite possibly increasing the odds
of introducing a bug in Python 2.</strong> In other words, why should humans
do the work that machines can do for us? Thus, the source-transforming
module importer was born.</p>
<p>While I concede what Mercurial did is a giant hack, I maintain it was
the correct thing to do. It has allowed the Python 3 port to move
forward without being blocked on the more tedious and invasive
transformations that could introduce subtle bugs (including performance
regressions) in Python 2. Perfect is the enemy of good. People time is
valuable. The source-transforming module importer allowed us to unblock
an important project without sinking a lot of people time into it. I'd
make that trade-off again.</p>
<p>While I won't encourage others to take this approach to porting to
Python 3, if you want to, Mercurial's source is available under a GPL
license and the custom module importer could be adapted to any project
with minimal modifications. If someone does extract it as reusable code,
please leave a comment and I'll update the post to link to it.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
